
SmartWatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009944  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018f8  08009ae8  08009ae8  0000aae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3e0  0800b3e0  0000d1fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3e0  0800b3e0  0000c3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3e8  0800b3e8  0000d1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3e8  0800b3e8  0000c3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b3ec  0800b3ec  0000c3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800b3f0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  200001fc  0800b5ec  0000d1fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  0800b5ec  0000d7c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cc5  00000000  00000000  0000d22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002811  00000000  00000000  0001def1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00020708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bcd  00000000  00000000  00021640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018914  00000000  00000000  0002220d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012cb6  00000000  00000000  0003ab21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099ac1  00000000  00000000  0004d7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7298  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050c0  00000000  00000000  000e72dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000ec39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009acc 	.word	0x08009acc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	08009acc 	.word	0x08009acc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <circ_buffer_init>:
#include "CircularBuffer.h"

void circ_buffer_init(CircularBuffer *cb) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
    cb->head = 0;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    cb->tail = 0;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <circ_buffer_is_empty>:

int circ_buffer_is_empty(CircularBuffer *cb) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
    return (cb->head == cb->tail);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f8b3 212c 	ldrh.w	r2, [r3, #300]	@ 0x12c
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	bf0c      	ite	eq
 8000ee4:	2301      	moveq	r3, #1
 8000ee6:	2300      	movne	r3, #0
 8000ee8:	b2db      	uxtb	r3, r3
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <circ_buffer_is_full>:

int circ_buffer_is_full(CircularBuffer *cb) {
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
    return ((cb->head + 1) % CIRC_BUFFER_SIZE == cb->tail);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f8b3 312c 	ldrh.w	r3, [r3, #300]	@ 0x12c
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <circ_buffer_is_full+0x44>)
 8000f0a:	fb83 1302 	smull	r1, r3, r3, r2
 8000f0e:	1159      	asrs	r1, r3, #5
 8000f10:	17d3      	asrs	r3, r2, #31
 8000f12:	1acb      	subs	r3, r1, r3
 8000f14:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000f18:	fb01 f303 	mul.w	r3, r1, r3
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	f8b2 212e 	ldrh.w	r2, [r2, #302]	@ 0x12e
 8000f24:	4293      	cmp	r3, r2
 8000f26:	bf0c      	ite	eq
 8000f28:	2301      	moveq	r3, #1
 8000f2a:	2300      	movne	r3, #0
 8000f2c:	b2db      	uxtb	r3, r3
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	1b4e81b5 	.word	0x1b4e81b5

08000f40 <circ_buffer_put>:

void circ_buffer_put(CircularBuffer *cb, uint8_t data) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	70fb      	strb	r3, [r7, #3]
    if (!circ_buffer_is_full(cb)) {
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ffd3 	bl	8000ef8 <circ_buffer_is_full>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d119      	bne.n	8000f8c <circ_buffer_put+0x4c>
        cb->buffer[cb->head] = data;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f8b3 312c 	ldrh.w	r3, [r3, #300]	@ 0x12c
 8000f5e:	4619      	mov	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	78fa      	ldrb	r2, [r7, #3]
 8000f64:	545a      	strb	r2, [r3, r1]
        cb->head = (cb->head + 1) % CIRC_BUFFER_SIZE;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f8b3 312c 	ldrh.w	r3, [r3, #300]	@ 0x12c
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	4a09      	ldr	r2, [pc, #36]	@ (8000f94 <circ_buffer_put+0x54>)
 8000f70:	fb82 1203 	smull	r1, r2, r2, r3
 8000f74:	1151      	asrs	r1, r2, #5
 8000f76:	17da      	asrs	r2, r3, #31
 8000f78:	1a8a      	subs	r2, r1, r2
 8000f7a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000f7e:	fb01 f202 	mul.w	r2, r1, r2
 8000f82:	1a9a      	subs	r2, r3, r2
 8000f84:	b292      	uxth	r2, r2
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    }
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	1b4e81b5 	.word	0x1b4e81b5

08000f98 <circ_buffer_get>:

void circ_buffer_get(CircularBuffer *cb, uint8_t *dst) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
    if (!circ_buffer_is_empty(cb)) {
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ff92 	bl	8000ecc <circ_buffer_is_empty>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d11a      	bne.n	8000fe4 <circ_buffer_get+0x4c>
        *dst = cb->buffer[cb->tail];
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	5c9a      	ldrb	r2, [r3, r2]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	701a      	strb	r2, [r3, #0]
        cb->tail = (cb->tail + 1) % CIRC_BUFFER_SIZE;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	4a09      	ldr	r2, [pc, #36]	@ (8000fec <circ_buffer_get+0x54>)
 8000fc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fcc:	1151      	asrs	r1, r2, #5
 8000fce:	17da      	asrs	r2, r3, #31
 8000fd0:	1a8a      	subs	r2, r1, r2
 8000fd2:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000fd6:	fb01 f202 	mul.w	r2, r1, r2
 8000fda:	1a9a      	subs	r2, r3, r2
 8000fdc:	b292      	uxth	r2, r2
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e
    }
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	1b4e81b5 	.word	0x1b4e81b5

08000ff0 <LSM6DS3_I2C_Write>:
#include "lsm6d3s.h"

static void LSM6DS3_I2C_Write(uint8_t reg, uint8_t val){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	460a      	mov	r2, r1
 8000ffa:	71fb      	strb	r3, [r7, #7]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&LSM6DS3_I2C_PORT, LSM6DS3_I2C_WRITE_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &val, 1, HAL_MAX_DELAY);
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	b29a      	uxth	r2, r3
 8001004:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001008:	9302      	str	r3, [sp, #8]
 800100a:	2301      	movs	r3, #1
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	1dbb      	adds	r3, r7, #6
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	21d4      	movs	r1, #212	@ 0xd4
 8001016:	4803      	ldr	r0, [pc, #12]	@ (8001024 <LSM6DS3_I2C_Write+0x34>)
 8001018:	f002 ff16 	bl	8003e48 <HAL_I2C_Mem_Write>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000260 	.word	0x20000260

08001028 <LSM6DS3_I2C_Read>:

static void LSM6DS3_I2C_Read(uint8_t reg, uint8_t *val){
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af04      	add	r7, sp, #16
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&LSM6DS3_I2C_PORT, LSM6DS3_I2C_READ_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, val, 1, HAL_MAX_DELAY);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	b29a      	uxth	r2, r3
 8001038:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	2301      	movs	r3, #1
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	21d5      	movs	r1, #213	@ 0xd5
 800104a:	4803      	ldr	r0, [pc, #12]	@ (8001058 <LSM6DS3_I2C_Read+0x30>)
 800104c:	f002 fff6 	bl	800403c <HAL_I2C_Mem_Read>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000260 	.word	0x20000260

0800105c <LSM6DS3_Init>:

void LSM6DS3_Init(){
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
	uint8_t ctrl1_val = LSM6DS3_CTRL1_XL_ODR_XL_1_66kHz |
 8001062:	2380      	movs	r3, #128	@ 0x80
 8001064:	71fb      	strb	r3, [r7, #7]
						LSM6DS3_CTRL1_XL_FS_XL_2g		|
						LSM6DS3_CTRL1_XL_BW_XL_400Hz	;
	LSM6DS3_I2C_Write(LSM6DS3_CTRL1_XL, ctrl1_val);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	4619      	mov	r1, r3
 800106a:	2010      	movs	r0, #16
 800106c:	f7ff ffc0 	bl	8000ff0 <LSM6DS3_I2C_Write>
	uint8_t ctrl2_val = LSM6DS3_CTRL2_G_ODR_G_1_66kHz |
 8001070:	2380      	movs	r3, #128	@ 0x80
 8001072:	71bb      	strb	r3, [r7, #6]
						LSM6DS3_CTRL2_G_FS_G_250dps	  ;
	LSM6DS3_I2C_Write(LSM6DS3_CTRL2_G, ctrl2_val);
 8001074:	79bb      	ldrb	r3, [r7, #6]
 8001076:	4619      	mov	r1, r3
 8001078:	2011      	movs	r0, #17
 800107a:	f7ff ffb9 	bl	8000ff0 <LSM6DS3_I2C_Write>
	uint8_t ctrl3_val = LSM6DS3_CTRL3_C_IF_INC;
 800107e:	2304      	movs	r3, #4
 8001080:	717b      	strb	r3, [r7, #5]
	LSM6DS3_I2C_Write(LSM6DS3_CTRL2_G, ctrl3_val);
 8001082:	797b      	ldrb	r3, [r7, #5]
 8001084:	4619      	mov	r1, r3
 8001086:	2011      	movs	r0, #17
 8001088:	f7ff ffb2 	bl	8000ff0 <LSM6DS3_I2C_Write>
	uint8_t ctrl8_val = LSM6DS3_CTRL8_XL_LOW_PASS_EN;
 800108c:	2302      	movs	r3, #2
 800108e:	713b      	strb	r3, [r7, #4]
	LSM6DS3_I2C_Write(LSM6DS3_CTRL8_XL, ctrl8_val);
 8001090:	793b      	ldrb	r3, [r7, #4]
 8001092:	4619      	mov	r1, r3
 8001094:	2017      	movs	r0, #23
 8001096:	f7ff ffab 	bl	8000ff0 <LSM6DS3_I2C_Write>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <LSM6DS3_AccGetRawXYZ>:

void LSM6DS3_WhoAmI(uint8_t *val){
	LSM6DS3_I2C_Read(LSM6DS3_WHO_AM_I, val);
}

void LSM6DS3_AccGetRawXYZ(int16_t *buff){
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	LSM6DS3_I2C_Read(LSM6DS3_OUTX_H_XL, &tmp);
 80010aa:	f107 030f 	add.w	r3, r7, #15
 80010ae:	4619      	mov	r1, r3
 80010b0:	2029      	movs	r0, #41	@ 0x29
 80010b2:	f7ff ffb9 	bl	8001028 <LSM6DS3_I2C_Read>
	buff[0] = (int16_t)tmp << 8;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	801a      	strh	r2, [r3, #0]
	LSM6DS3_I2C_Read(LSM6DS3_OUTX_L_XL, &tmp);
 80010c0:	f107 030f 	add.w	r3, r7, #15
 80010c4:	4619      	mov	r1, r3
 80010c6:	2028      	movs	r0, #40	@ 0x28
 80010c8:	f7ff ffae 	bl	8001028 <LSM6DS3_I2C_Read>
	buff[0] |= (int16_t)tmp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b21a      	sxth	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	801a      	strh	r2, [r3, #0]
	LSM6DS3_I2C_Read(LSM6DS3_OUTY_H_XL, &tmp);
 80010de:	f107 030f 	add.w	r3, r7, #15
 80010e2:	4619      	mov	r1, r3
 80010e4:	202b      	movs	r0, #43	@ 0x2b
 80010e6:	f7ff ff9f 	bl	8001028 <LSM6DS3_I2C_Read>
	buff[1] = (int16_t)tmp << 8;
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	021a      	lsls	r2, r3, #8
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3302      	adds	r3, #2
 80010f2:	b212      	sxth	r2, r2
 80010f4:	801a      	strh	r2, [r3, #0]
	LSM6DS3_I2C_Read(LSM6DS3_OUTY_L_XL, &tmp);
 80010f6:	f107 030f 	add.w	r3, r7, #15
 80010fa:	4619      	mov	r1, r3
 80010fc:	202a      	movs	r0, #42	@ 0x2a
 80010fe:	f7ff ff93 	bl	8001028 <LSM6DS3_I2C_Read>
	buff[1] |= (int16_t)tmp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3302      	adds	r3, #2
 8001106:	f9b3 1000 	ldrsh.w	r1, [r3]
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	b21a      	sxth	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3302      	adds	r3, #2
 8001112:	430a      	orrs	r2, r1
 8001114:	b212      	sxth	r2, r2
 8001116:	801a      	strh	r2, [r3, #0]
	LSM6DS3_I2C_Read(LSM6DS3_OUTZ_H_XL, &tmp);
 8001118:	f107 030f 	add.w	r3, r7, #15
 800111c:	4619      	mov	r1, r3
 800111e:	202d      	movs	r0, #45	@ 0x2d
 8001120:	f7ff ff82 	bl	8001028 <LSM6DS3_I2C_Read>
	buff[2] = (int16_t)tmp << 8;
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	021a      	lsls	r2, r3, #8
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3304      	adds	r3, #4
 800112c:	b212      	sxth	r2, r2
 800112e:	801a      	strh	r2, [r3, #0]
	LSM6DS3_I2C_Read(LSM6DS3_OUTZ_L_XL, &tmp);
 8001130:	f107 030f 	add.w	r3, r7, #15
 8001134:	4619      	mov	r1, r3
 8001136:	202c      	movs	r0, #44	@ 0x2c
 8001138:	f7ff ff76 	bl	8001028 <LSM6DS3_I2C_Read>
	buff[2] |= (int16_t)tmp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3304      	adds	r3, #4
 8001140:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	b21a      	sxth	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3304      	adds	r3, #4
 800114c:	430a      	orrs	r2, r1
 800114e:	b212      	sxth	r2, r2
 8001150:	801a      	strh	r2, [r3, #0]

}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <LSM6DS3_AccGetXYZ>:

void LSM6DS3_AccGetXYZ(float *buff){
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	int16_t raw_buff[3];
	uint8_t tmp;
	float coef = 0;
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]

	LSM6DS3_AccGetRawXYZ(raw_buff);
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff97 	bl	80010a2 <LSM6DS3_AccGetRawXYZ>
	LSM6DS3_I2C_Read(LSM6DS3_CTRL1_XL, &tmp);
 8001174:	f107 030f 	add.w	r3, r7, #15
 8001178:	4619      	mov	r1, r3
 800117a:	2010      	movs	r0, #16
 800117c:	f7ff ff54 	bl	8001028 <LSM6DS3_I2C_Read>
	switch(tmp & LSM6DS3_CTRL1_XL_FS_XL_MASK){
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b0c      	cmp	r3, #12
 8001188:	d82c      	bhi.n	80011e4 <LSM6DS3_AccGetXYZ+0x88>
 800118a:	a201      	add	r2, pc, #4	@ (adr r2, 8001190 <LSM6DS3_AccGetXYZ+0x34>)
 800118c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001190:	080011c5 	.word	0x080011c5
 8001194:	080011e5 	.word	0x080011e5
 8001198:	080011e5 	.word	0x080011e5
 800119c:	080011e5 	.word	0x080011e5
 80011a0:	080011dd 	.word	0x080011dd
 80011a4:	080011e5 	.word	0x080011e5
 80011a8:	080011e5 	.word	0x080011e5
 80011ac:	080011e5 	.word	0x080011e5
 80011b0:	080011cd 	.word	0x080011cd
 80011b4:	080011e5 	.word	0x080011e5
 80011b8:	080011e5 	.word	0x080011e5
 80011bc:	080011e5 	.word	0x080011e5
 80011c0:	080011d5 	.word	0x080011d5
	case LSM6DS3_CTRL1_XL_FS_XL_2g:
		coef = 2;
 80011c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011c8:	61fb      	str	r3, [r7, #28]
		break;
 80011ca:	e00b      	b.n	80011e4 <LSM6DS3_AccGetXYZ+0x88>
	case LSM6DS3_CTRL1_XL_FS_XL_4g:
		coef = 4;
 80011cc:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 80011d0:	61fb      	str	r3, [r7, #28]
		break;
 80011d2:	e007      	b.n	80011e4 <LSM6DS3_AccGetXYZ+0x88>
	case LSM6DS3_CTRL1_XL_FS_XL_8g:
		coef = 8;
 80011d4:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80011d8:	61fb      	str	r3, [r7, #28]
		break;
 80011da:	e003      	b.n	80011e4 <LSM6DS3_AccGetXYZ+0x88>
	case LSM6DS3_CTRL1_XL_FS_XL_16g:
		coef = 16;
 80011dc:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80011e0:	61fb      	str	r3, [r7, #28]
		break;
 80011e2:	bf00      	nop
	}
	for (int i = 0; i < 3; ++i) {
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	e01a      	b.n	8001220 <LSM6DS3_AccGetXYZ+0xc4>
		buff[i] = (float)raw_buff[i] / INT16_MAX * coef;
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	3320      	adds	r3, #32
 80011f0:	443b      	add	r3, r7
 80011f2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011fe:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001230 <LSM6DS3_AccGetXYZ+0xd4>
 8001202:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001216:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; ++i) {
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	3301      	adds	r3, #1
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	2b02      	cmp	r3, #2
 8001224:	dde1      	ble.n	80011ea <LSM6DS3_AccGetXYZ+0x8e>
	}



}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	3720      	adds	r7, #32
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	46fffe00 	.word	0x46fffe00

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b0a9      	sub	sp, #164	@ 0xa4
 8001238:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123a:	f001 fb07 	bl	800284c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123e:	f000 f905 	bl	800144c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001242:	f000 fa97 	bl	8001774 <MX_GPIO_Init>
  MX_DMA_Init();
 8001246:	f000 fa75 	bl	8001734 <MX_DMA_Init>
  MX_SPI1_Init();
 800124a:	f000 f9e9 	bl	8001620 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800124e:	f000 fa47 	bl	80016e0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001252:	f000 f965 	bl	8001520 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001256:	f000 fa19 	bl	800168c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800125a:	f000 f9b3 	bl	80015c4 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  circ_buffer_init(&esp01_rx_cb);
 800125e:	4868      	ldr	r0, [pc, #416]	@ (8001400 <main+0x1cc>)
 8001260:	f7ff fe22 	bl	8000ea8 <circ_buffer_init>
  ST7735_Init();
 8001264:	f000 fdc0 	bl	8001de8 <ST7735_Init>
  LSM6DS3_Init();
 8001268:	f7ff fef8 	bl	800105c <LSM6DS3_Init>
  ST7735_SetRotation(ST7735_LANDSCAPE);
 800126c:	2003      	movs	r0, #3
 800126e:	f000 ff37 	bl	80020e0 <ST7735_SetRotation>
  ST7735_Backlight_On();
 8001272:	f000 ff29 	bl	80020c8 <ST7735_Backlight_On>
  ST7735_FillScreen(ST7735_BLACK);
 8001276:	2000      	movs	r0, #0
 8001278:	f000 ff0a 	bl	8002090 <ST7735_FillScreen>

  uint32_t time = 14 * 3600 + 42 * 60 + 0;
 800127c:	f64c 63b8 	movw	r3, #52920	@ 0xceb8
 8001280:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  time_on_start = HAL_GetTick();
 8001284:	f001 fb48 	bl	8002918 <HAL_GetTick>
 8001288:	4603      	mov	r3, r0
 800128a:	4a5e      	ldr	r2, [pc, #376]	@ (8001404 <main+0x1d0>)
 800128c:	6013      	str	r3, [r2, #0]



  //ST7735_DrawString(ST7735_GetWidth() / 2 - Font_16x26.width / 2 * 5, ST7735_GetHeight() / 2 - Font_16x26.height / 2, "13:42", Font_16x26, ST7735_WHITE, ST7735_BLACK);

  HAL_UART_Receive_IT(&huart2, &tmp_char, 1);
 800128e:	2201      	movs	r2, #1
 8001290:	495d      	ldr	r1, [pc, #372]	@ (8001408 <main+0x1d4>)
 8001292:	485e      	ldr	r0, [pc, #376]	@ (800140c <main+0x1d8>)
 8001294:	f004 fe5b 	bl	8005f4e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &tmp_char2, 1);
 8001298:	2201      	movs	r2, #1
 800129a:	495d      	ldr	r1, [pc, #372]	@ (8001410 <main+0x1dc>)
 800129c:	485d      	ldr	r0, [pc, #372]	@ (8001414 <main+0x1e0>)
 800129e:	f004 fe56 	bl	8005f4e <HAL_UART_Receive_IT>
  {
	  /*redrawClockHands(time);
	  time++;
	  HAL_Delay(1000 - 63);*/

	  if(pcIsSent == 1 && pcDataReady == 1){
 80012a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001418 <main+0x1e4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d120      	bne.n	80012ec <main+0xb8>
 80012aa:	4b5c      	ldr	r3, [pc, #368]	@ (800141c <main+0x1e8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d11c      	bne.n	80012ec <main+0xb8>
		  pcIsSent = 0;
 80012b2:	4b59      	ldr	r3, [pc, #356]	@ (8001418 <main+0x1e4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
		  pcDataReady = 0;
 80012b8:	4b58      	ldr	r3, [pc, #352]	@ (800141c <main+0x1e8>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
		  char str[80];
		  int size = sprintf(str, "\r>>%s ", pc_tx_buff);
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4a57      	ldr	r2, [pc, #348]	@ (8001420 <main+0x1ec>)
 80012c2:	4958      	ldr	r1, [pc, #352]	@ (8001424 <main+0x1f0>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f006 fb83 	bl	80079d0 <siprintf>
 80012ca:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
		  //HAL_UART_Transmit_IT(&huart2, str, size);
		  ST7735_DrawString(0, 0, str, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80012ce:	4b56      	ldr	r3, [pc, #344]	@ (8001428 <main+0x1f4>)
 80012d0:	1d39      	adds	r1, r7, #4
 80012d2:	2200      	movs	r2, #0
 80012d4:	9202      	str	r2, [sp, #8]
 80012d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012da:	9201      	str	r2, [sp, #4]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	9200      	str	r2, [sp, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	460a      	mov	r2, r1
 80012e4:	2100      	movs	r1, #0
 80012e6:	2000      	movs	r0, #0
 80012e8:	f000 fda4 	bl	8001e34 <ST7735_DrawString>
	  }
	  if(esp01IsSent == 1 && esp01DataReady == 1){
 80012ec:	4b4f      	ldr	r3, [pc, #316]	@ (800142c <main+0x1f8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d119      	bne.n	8001328 <main+0xf4>
 80012f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001430 <main+0x1fc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d115      	bne.n	8001328 <main+0xf4>
	  	  	esp01IsSent = 0;
 80012fc:	4b4b      	ldr	r3, [pc, #300]	@ (800142c <main+0x1f8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
	  	  	esp01DataReady = 0;
 8001302:	4b4b      	ldr	r3, [pc, #300]	@ (8001430 <main+0x1fc>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
	  	  	char str[80];
	  	  	int size = sprintf(str, "%s\r\n", esp01_tx_buff);
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4a4a      	ldr	r2, [pc, #296]	@ (8001434 <main+0x200>)
 800130c:	494a      	ldr	r1, [pc, #296]	@ (8001438 <main+0x204>)
 800130e:	4618      	mov	r0, r3
 8001310:	f006 fb5e 	bl	80079d0 <siprintf>
 8001314:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
	  	  	HAL_UART_Transmit_IT(&huart1, str, size);
 8001318:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800131c:	b29a      	uxth	r2, r3
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4619      	mov	r1, r3
 8001322:	483c      	ldr	r0, [pc, #240]	@ (8001414 <main+0x1e0>)
 8001324:	f004 fddd 	bl	8005ee2 <HAL_UART_Transmit_IT>


	  }
	  char letter[3] = {'X', 'Y', 'Z'};
 8001328:	4a44      	ldr	r2, [pc, #272]	@ (800143c <main+0x208>)
 800132a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	4611      	mov	r1, r2
 8001332:	8019      	strh	r1, [r3, #0]
 8001334:	3302      	adds	r3, #2
 8001336:	0c12      	lsrs	r2, r2, #16
 8001338:	701a      	strb	r2, [r3, #0]
	  uint16_t color[3] = {ST7735_RED, ST7735_BLUE, ST7735_GREEN};
 800133a:	4a41      	ldr	r2, [pc, #260]	@ (8001440 <main+0x20c>)
 800133c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001340:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001344:	6018      	str	r0, [r3, #0]
 8001346:	3304      	adds	r3, #4
 8001348:	8019      	strh	r1, [r3, #0]
	  int16_t raw[3];
	  float xyz[3];
	  char str[10];
	  LSM6DS3_AccGetXYZ(xyz);
 800134a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff04 	bl	800115c <LSM6DS3_AccGetXYZ>
	  LSM6DS3_AccGetRawXYZ(raw);
 8001354:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fea2 	bl	80010a2 <LSM6DS3_AccGetRawXYZ>
	  for (int i = 0; i < 3; ++i) {
 800135e:	2300      	movs	r3, #0
 8001360:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001364:	e03f      	b.n	80013e6 <main+0x1b2>
		  sprintf(str, "%c: %.3f", letter[i], xyz[i]);
 8001366:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800136a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461c      	mov	r4, r3
 8001374:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	3390      	adds	r3, #144	@ 0x90
 800137c:	443b      	add	r3, r7
 800137e:	3b30      	subs	r3, #48	@ 0x30
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8e8 	bl	8000558 <__aeabi_f2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8001390:	e9cd 2300 	strd	r2, r3, [sp]
 8001394:	4622      	mov	r2, r4
 8001396:	492b      	ldr	r1, [pc, #172]	@ (8001444 <main+0x210>)
 8001398:	f006 fb1a 	bl	80079d0 <siprintf>
		  ST7735_DrawString(5, 20 + i * Font_11x18.height + i, str, Font_11x18, color[i], ST7735_BLACK);
 800139c:	4b2a      	ldr	r3, [pc, #168]	@ (8001448 <main+0x214>)
 800139e:	785b      	ldrb	r3, [r3, #1]
 80013a0:	3301      	adds	r3, #1
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	fb12 f303 	smulbb	r3, r2, r3
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	3314      	adds	r3, #20
 80013b2:	b299      	uxth	r1, r3
 80013b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	3390      	adds	r3, #144	@ 0x90
 80013bc:	443b      	add	r3, r7
 80013be:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 80013c2:	4b21      	ldr	r3, [pc, #132]	@ (8001448 <main+0x214>)
 80013c4:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80013c8:	2400      	movs	r4, #0
 80013ca:	9402      	str	r4, [sp, #8]
 80013cc:	9201      	str	r2, [sp, #4]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	9200      	str	r2, [sp, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4602      	mov	r2, r0
 80013d6:	2005      	movs	r0, #5
 80013d8:	f000 fd2c 	bl	8001e34 <ST7735_DrawString>
	  for (int i = 0; i < 3; ++i) {
 80013dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013e0:	3301      	adds	r3, #1
 80013e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80013e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	ddbb      	ble.n	8001366 <main+0x132>
	  }
	  HAL_UART_Transmit(&huart2, (uint8_t *)raw, 3 * 2, HAL_MAX_DELAY);
 80013ee:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013f6:	2206      	movs	r2, #6
 80013f8:	4804      	ldr	r0, [pc, #16]	@ (800140c <main+0x1d8>)
 80013fa:	f004 fce7 	bl	8005dcc <HAL_UART_Transmit>
  {
 80013fe:	e750      	b.n	80012a2 <main+0x6e>
 8001400:	200004d0 	.word	0x200004d0
 8001404:	200003fc 	.word	0x200003fc
 8001408:	20000010 	.word	0x20000010
 800140c:	200003b4 	.word	0x200003b4
 8001410:	20000011 	.word	0x20000011
 8001414:	2000036c 	.word	0x2000036c
 8001418:	20000014 	.word	0x20000014
 800141c:	20000668 	.word	0x20000668
 8001420:	20000400 	.word	0x20000400
 8001424:	08009ae8 	.word	0x08009ae8
 8001428:	20000000 	.word	0x20000000
 800142c:	20000018 	.word	0x20000018
 8001430:	2000066c 	.word	0x2000066c
 8001434:	20000468 	.word	0x20000468
 8001438:	08009af0 	.word	0x08009af0
 800143c:	08009b04 	.word	0x08009b04
 8001440:	08009b08 	.word	0x08009b08
 8001444:	08009af8 	.word	0x08009af8
 8001448:	20000008 	.word	0x20000008

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b094      	sub	sp, #80	@ 0x50
 8001450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 0320 	add.w	r3, r7, #32
 8001456:	2230      	movs	r2, #48	@ 0x30
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f006 fb1b 	bl	8007a96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	4b28      	ldr	r3, [pc, #160]	@ (8001518 <SystemClock_Config+0xcc>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	4a27      	ldr	r2, [pc, #156]	@ (8001518 <SystemClock_Config+0xcc>)
 800147a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001480:	4b25      	ldr	r3, [pc, #148]	@ (8001518 <SystemClock_Config+0xcc>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	4b22      	ldr	r3, [pc, #136]	@ (800151c <SystemClock_Config+0xd0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a21      	ldr	r2, [pc, #132]	@ (800151c <SystemClock_Config+0xd0>)
 8001496:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <SystemClock_Config+0xd0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a8:	2302      	movs	r3, #2
 80014aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ac:	2301      	movs	r3, #1
 80014ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b0:	2310      	movs	r3, #16
 80014b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b4:	2302      	movs	r3, #2
 80014b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b8:	2300      	movs	r3, #0
 80014ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014bc:	2310      	movs	r3, #16
 80014be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80014c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014c6:	2304      	movs	r3, #4
 80014c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014ca:	2304      	movs	r3, #4
 80014cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ce:	f107 0320 	add.w	r3, r7, #32
 80014d2:	4618      	mov	r0, r3
 80014d4:	f003 fb98 	bl	8004c08 <HAL_RCC_OscConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014de:	f000 fb1b 	bl	8001b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e2:	230f      	movs	r3, #15
 80014e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e6:	2302      	movs	r3, #2
 80014e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	2102      	movs	r1, #2
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 fdfa 	bl	80050f8 <HAL_RCC_ClockConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800150a:	f000 fb05 	bl	8001b18 <Error_Handler>
  }
}
 800150e:	bf00      	nop
 8001510:	3750      	adds	r7, #80	@ 0x50
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000

08001520 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001526:	463b      	mov	r3, r7
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001532:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <MX_ADC1_Init+0x98>)
 8001534:	4a21      	ldr	r2, [pc, #132]	@ (80015bc <MX_ADC1_Init+0x9c>)
 8001536:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001538:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <MX_ADC1_Init+0x98>)
 800153a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800153e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001540:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <MX_ADC1_Init+0x98>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001546:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <MX_ADC1_Init+0x98>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800154c:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <MX_ADC1_Init+0x98>)
 800154e:	2200      	movs	r2, #0
 8001550:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001552:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <MX_ADC1_Init+0x98>)
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800155a:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <MX_ADC1_Init+0x98>)
 800155c:	2200      	movs	r2, #0
 800155e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001560:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <MX_ADC1_Init+0x98>)
 8001562:	4a17      	ldr	r2, [pc, #92]	@ (80015c0 <MX_ADC1_Init+0xa0>)
 8001564:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <MX_ADC1_Init+0x98>)
 8001568:	2200      	movs	r2, #0
 800156a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <MX_ADC1_Init+0x98>)
 800156e:	2201      	movs	r2, #1
 8001570:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_ADC1_Init+0x98>)
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800157a:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <MX_ADC1_Init+0x98>)
 800157c:	2201      	movs	r2, #1
 800157e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001580:	480d      	ldr	r0, [pc, #52]	@ (80015b8 <MX_ADC1_Init+0x98>)
 8001582:	f001 f9f9 	bl	8002978 <HAL_ADC_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800158c:	f000 fac4 	bl	8001b18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001590:	230e      	movs	r3, #14
 8001592:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001594:	2301      	movs	r3, #1
 8001596:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159c:	463b      	mov	r3, r7
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <MX_ADC1_Init+0x98>)
 80015a2:	f001 fa2d 	bl	8002a00 <HAL_ADC_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015ac:	f000 fab4 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000218 	.word	0x20000218
 80015bc:	40012000 	.word	0x40012000
 80015c0:	0f000001 	.word	0x0f000001

080015c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015c8:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <MX_I2C1_Init+0x54>)
 80015ca:	4a14      	ldr	r2, [pc, #80]	@ (800161c <MX_I2C1_Init+0x58>)
 80015cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80015ce:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <MX_I2C1_Init+0x54>)
 80015d0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80015d4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <MX_I2C1_Init+0x54>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <MX_I2C1_Init+0x54>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001618 <MX_I2C1_Init+0x54>)
 80015e4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <MX_I2C1_Init+0x54>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015f0:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <MX_I2C1_Init+0x54>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <MX_I2C1_Init+0x54>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <MX_I2C1_Init+0x54>)
 80015fe:	2200      	movs	r2, #0
 8001600:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	@ (8001618 <MX_I2C1_Init+0x54>)
 8001604:	f002 fadc 	bl	8003bc0 <HAL_I2C_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800160e:	f000 fa83 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000260 	.word	0x20000260
 800161c:	40005400 	.word	0x40005400

08001620 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001624:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <MX_SPI1_Init+0x64>)
 8001626:	4a18      	ldr	r2, [pc, #96]	@ (8001688 <MX_SPI1_Init+0x68>)
 8001628:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800162a:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <MX_SPI1_Init+0x64>)
 800162c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001630:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001632:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <MX_SPI1_Init+0x64>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001638:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <MX_SPI1_Init+0x64>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800163e:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <MX_SPI1_Init+0x64>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001644:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <MX_SPI1_Init+0x64>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <MX_SPI1_Init+0x64>)
 800164c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001650:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <MX_SPI1_Init+0x64>)
 8001654:	2218      	movs	r2, #24
 8001656:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001658:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <MX_SPI1_Init+0x64>)
 800165a:	2200      	movs	r2, #0
 800165c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800165e:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <MX_SPI1_Init+0x64>)
 8001660:	2200      	movs	r2, #0
 8001662:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001664:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <MX_SPI1_Init+0x64>)
 8001666:	2200      	movs	r2, #0
 8001668:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <MX_SPI1_Init+0x64>)
 800166c:	220a      	movs	r2, #10
 800166e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001670:	4804      	ldr	r0, [pc, #16]	@ (8001684 <MX_SPI1_Init+0x64>)
 8001672:	f003 ff61 	bl	8005538 <HAL_SPI_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800167c:	f000 fa4c 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200002b4 	.word	0x200002b4
 8001688:	40013000 	.word	0x40013000

0800168c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001690:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <MX_USART1_UART_Init+0x4c>)
 8001692:	4a12      	ldr	r2, [pc, #72]	@ (80016dc <MX_USART1_UART_Init+0x50>)
 8001694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001696:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <MX_USART1_UART_Init+0x4c>)
 8001698:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800169c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	@ (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016c4:	f004 fb32 	bl	8005d2c <HAL_UART_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016ce:	f000 fa23 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000036c 	.word	0x2000036c
 80016dc:	40011000 	.word	0x40011000

080016e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <MX_USART2_UART_Init+0x4c>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	@ (8001730 <MX_USART2_UART_Init+0x50>)
 80016e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <MX_USART2_UART_Init+0x4c>)
 80016ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <MX_USART2_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <MX_USART2_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <MX_USART2_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001704:	4b09      	ldr	r3, [pc, #36]	@ (800172c <MX_USART2_UART_Init+0x4c>)
 8001706:	220c      	movs	r2, #12
 8001708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170a:	4b08      	ldr	r3, [pc, #32]	@ (800172c <MX_USART2_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <MX_USART2_UART_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	@ (800172c <MX_USART2_UART_Init+0x4c>)
 8001718:	f004 fb08 	bl	8005d2c <HAL_UART_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001722:	f000 f9f9 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200003b4 	.word	0x200003b4
 8001730:	40004400 	.word	0x40004400

08001734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <MX_DMA_Init+0x3c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a0b      	ldr	r2, [pc, #44]	@ (8001770 <MX_DMA_Init+0x3c>)
 8001744:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <MX_DMA_Init+0x3c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	203a      	movs	r0, #58	@ 0x3a
 800175c:	f001 fc59 	bl	8003012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001760:	203a      	movs	r0, #58	@ 0x3a
 8001762:	f001 fc72 	bl	800304a <HAL_NVIC_EnableIRQ>

}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	@ 0x28
 8001778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	4b42      	ldr	r3, [pc, #264]	@ (8001898 <MX_GPIO_Init+0x124>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a41      	ldr	r2, [pc, #260]	@ (8001898 <MX_GPIO_Init+0x124>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b3f      	ldr	r3, [pc, #252]	@ (8001898 <MX_GPIO_Init+0x124>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001898 <MX_GPIO_Init+0x124>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001898 <MX_GPIO_Init+0x124>)
 80017b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b38      	ldr	r3, [pc, #224]	@ (8001898 <MX_GPIO_Init+0x124>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	4b34      	ldr	r3, [pc, #208]	@ (8001898 <MX_GPIO_Init+0x124>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	4a33      	ldr	r2, [pc, #204]	@ (8001898 <MX_GPIO_Init+0x124>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d2:	4b31      	ldr	r3, [pc, #196]	@ (8001898 <MX_GPIO_Init+0x124>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001898 <MX_GPIO_Init+0x124>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a2c      	ldr	r2, [pc, #176]	@ (8001898 <MX_GPIO_Init+0x124>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001898 <MX_GPIO_Init+0x124>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_BLK_Pin|GPIO_PIN_13|ST7735_RES_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 5111 	mov.w	r1, #9280	@ 0x2440
 8001800:	4826      	ldr	r0, [pc, #152]	@ (800189c <MX_GPIO_Init+0x128>)
 8001802:	f002 f9c3 	bl	8003b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	2180      	movs	r1, #128	@ 0x80
 800180a:	4825      	ldr	r0, [pc, #148]	@ (80018a0 <MX_GPIO_Init+0x12c>)
 800180c:	f002 f9be 	bl	8003b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001816:	4823      	ldr	r0, [pc, #140]	@ (80018a4 <MX_GPIO_Init+0x130>)
 8001818:	f002 f9b8 	bl	8003b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800181c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001822:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	481b      	ldr	r0, [pc, #108]	@ (80018a0 <MX_GPIO_Init+0x12c>)
 8001834:	f002 f826 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_BLK_Pin PB13 ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_BLK_Pin|GPIO_PIN_13|ST7735_RES_Pin;
 8001838:	f44f 5311 	mov.w	r3, #9280	@ 0x2440
 800183c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4812      	ldr	r0, [pc, #72]	@ (800189c <MX_GPIO_Init+0x128>)
 8001852:	f002 f817 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7735_DC_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin;
 8001856:	2380      	movs	r3, #128	@ 0x80
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185a:	2301      	movs	r3, #1
 800185c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST7735_DC_GPIO_Port, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	480c      	ldr	r0, [pc, #48]	@ (80018a0 <MX_GPIO_Init+0x12c>)
 800186e:	f002 f809 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin;
 8001872:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001878:	2301      	movs	r3, #1
 800187a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST7735_CS_GPIO_Port, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4806      	ldr	r0, [pc, #24]	@ (80018a4 <MX_GPIO_Init+0x130>)
 800188c:	f001 fffa 	bl	8003884 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001890:	bf00      	nop
 8001892:	3728      	adds	r7, #40	@ 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	40020400 	.word	0x40020400
 80018a0:	40020800 	.word	0x40020800
 80018a4:	40020000 	.word	0x40020000

080018a8 <PC_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */



void PC_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	if(tmp_char == 127){
 80018b0:	4b25      	ldr	r3, [pc, #148]	@ (8001948 <PC_UART_RxCpltCallback+0xa0>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80018b6:	d115      	bne.n	80018e4 <PC_UART_RxCpltCallback+0x3c>
		if(user_buff_size > 0){
 80018b8:	4b24      	ldr	r3, [pc, #144]	@ (800194c <PC_UART_RxCpltCallback+0xa4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d03a      	beq.n	8001936 <PC_UART_RxCpltCallback+0x8e>
			user_buff_size--;
 80018c0:	4b22      	ldr	r3, [pc, #136]	@ (800194c <PC_UART_RxCpltCallback+0xa4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	4a21      	ldr	r2, [pc, #132]	@ (800194c <PC_UART_RxCpltCallback+0xa4>)
 80018c8:	6013      	str	r3, [r2, #0]
			user_buff[user_buff_size] = '\0';
 80018ca:	4b20      	ldr	r3, [pc, #128]	@ (800194c <PC_UART_RxCpltCallback+0xa4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a20      	ldr	r2, [pc, #128]	@ (8001950 <PC_UART_RxCpltCallback+0xa8>)
 80018d0:	2100      	movs	r1, #0
 80018d2:	54d1      	strb	r1, [r2, r3]
			strcpy(pc_tx_buff, user_buff);
 80018d4:	491e      	ldr	r1, [pc, #120]	@ (8001950 <PC_UART_RxCpltCallback+0xa8>)
 80018d6:	481f      	ldr	r0, [pc, #124]	@ (8001954 <PC_UART_RxCpltCallback+0xac>)
 80018d8:	f006 f96d 	bl	8007bb6 <strcpy>
			pcDataReady = 1;
 80018dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001958 <PC_UART_RxCpltCallback+0xb0>)
 80018de:	2201      	movs	r2, #1
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	e028      	b.n	8001936 <PC_UART_RxCpltCallback+0x8e>
		}
	}
	else if(tmp_char == '\r')
 80018e4:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <PC_UART_RxCpltCallback+0xa0>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b0d      	cmp	r3, #13
 80018ea:	d10d      	bne.n	8001908 <PC_UART_RxCpltCallback+0x60>
	{
		strcpy(esp01_tx_buff, user_buff);
 80018ec:	4918      	ldr	r1, [pc, #96]	@ (8001950 <PC_UART_RxCpltCallback+0xa8>)
 80018ee:	481b      	ldr	r0, [pc, #108]	@ (800195c <PC_UART_RxCpltCallback+0xb4>)
 80018f0:	f006 f961 	bl	8007bb6 <strcpy>
		user_buff_size = 0;
 80018f4:	4b15      	ldr	r3, [pc, #84]	@ (800194c <PC_UART_RxCpltCallback+0xa4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
		user_buff[0] = '\0';
 80018fa:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <PC_UART_RxCpltCallback+0xa8>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
		esp01DataReady = 1;
 8001900:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <PC_UART_RxCpltCallback+0xb8>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	e016      	b.n	8001936 <PC_UART_RxCpltCallback+0x8e>
	}
	else
	{
		user_buff[user_buff_size] = tmp_char;
 8001908:	4b10      	ldr	r3, [pc, #64]	@ (800194c <PC_UART_RxCpltCallback+0xa4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0e      	ldr	r2, [pc, #56]	@ (8001948 <PC_UART_RxCpltCallback+0xa0>)
 800190e:	7811      	ldrb	r1, [r2, #0]
 8001910:	4a0f      	ldr	r2, [pc, #60]	@ (8001950 <PC_UART_RxCpltCallback+0xa8>)
 8001912:	54d1      	strb	r1, [r2, r3]
		user_buff_size++;
 8001914:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <PC_UART_RxCpltCallback+0xa4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	3301      	adds	r3, #1
 800191a:	4a0c      	ldr	r2, [pc, #48]	@ (800194c <PC_UART_RxCpltCallback+0xa4>)
 800191c:	6013      	str	r3, [r2, #0]
		user_buff[user_buff_size] = '\0';
 800191e:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <PC_UART_RxCpltCallback+0xa4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a0b      	ldr	r2, [pc, #44]	@ (8001950 <PC_UART_RxCpltCallback+0xa8>)
 8001924:	2100      	movs	r1, #0
 8001926:	54d1      	strb	r1, [r2, r3]
		strcpy(pc_tx_buff, user_buff);
 8001928:	4909      	ldr	r1, [pc, #36]	@ (8001950 <PC_UART_RxCpltCallback+0xa8>)
 800192a:	480a      	ldr	r0, [pc, #40]	@ (8001954 <PC_UART_RxCpltCallback+0xac>)
 800192c:	f006 f943 	bl	8007bb6 <strcpy>
		pcDataReady = 1;
 8001930:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <PC_UART_RxCpltCallback+0xb0>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, &tmp_char, 1);
 8001936:	2201      	movs	r2, #1
 8001938:	4903      	ldr	r1, [pc, #12]	@ (8001948 <PC_UART_RxCpltCallback+0xa0>)
 800193a:	480a      	ldr	r0, [pc, #40]	@ (8001964 <PC_UART_RxCpltCallback+0xbc>)
 800193c:	f004 fb07 	bl	8005f4e <HAL_UART_Receive_IT>

}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000010 	.word	0x20000010
 800194c:	20000664 	.word	0x20000664
 8001950:	20000600 	.word	0x20000600
 8001954:	20000400 	.word	0x20000400
 8001958:	20000668 	.word	0x20000668
 800195c:	20000468 	.word	0x20000468
 8001960:	2000066c 	.word	0x2000066c
 8001964:	200003b4 	.word	0x200003b4

08001968 <ESP01_UART_RxCpltCallback>:

void ESP01_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	if(tmp_char2 == '\n'){
 8001970:	4b29      	ldr	r3, [pc, #164]	@ (8001a18 <ESP01_UART_RxCpltCallback+0xb0>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b0a      	cmp	r3, #10
 8001976:	d13f      	bne.n	80019f8 <ESP01_UART_RxCpltCallback+0x90>
		circ_buffer_put(&esp01_rx_cb, '\n');
 8001978:	210a      	movs	r1, #10
 800197a:	4828      	ldr	r0, [pc, #160]	@ (8001a1c <ESP01_UART_RxCpltCallback+0xb4>)
 800197c:	f7ff fae0 	bl	8000f40 <circ_buffer_put>
			pc_tx_buff[pc_tx_buff_size] = data;
			pc_tx_buff_size++;
		}
		while(data != '\n');*/
		int l;
		if(esp01_rx_cb.head > esp01_rx_cb.tail){
 8001980:	4b26      	ldr	r3, [pc, #152]	@ (8001a1c <ESP01_UART_RxCpltCallback+0xb4>)
 8001982:	f8b3 212c 	ldrh.w	r2, [r3, #300]	@ 0x12c
 8001986:	4b25      	ldr	r3, [pc, #148]	@ (8001a1c <ESP01_UART_RxCpltCallback+0xb4>)
 8001988:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
 800198c:	429a      	cmp	r2, r3
 800198e:	d909      	bls.n	80019a4 <ESP01_UART_RxCpltCallback+0x3c>
			l = esp01_rx_cb.head - esp01_rx_cb.tail;
 8001990:	4b22      	ldr	r3, [pc, #136]	@ (8001a1c <ESP01_UART_RxCpltCallback+0xb4>)
 8001992:	f8b3 312c 	ldrh.w	r3, [r3, #300]	@ 0x12c
 8001996:	461a      	mov	r2, r3
 8001998:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <ESP01_UART_RxCpltCallback+0xb4>)
 800199a:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e009      	b.n	80019b8 <ESP01_UART_RxCpltCallback+0x50>
		}else{
			l = CIRC_BUFFER_SIZE - esp01_rx_cb.tail + esp01_rx_cb.head;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <ESP01_UART_RxCpltCallback+0xb4>)
 80019a6:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
 80019aa:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 80019ae:	4a1b      	ldr	r2, [pc, #108]	@ (8001a1c <ESP01_UART_RxCpltCallback+0xb4>)
 80019b0:	f8b2 212c 	ldrh.w	r2, [r2, #300]	@ 0x12c
 80019b4:	4413      	add	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]
		}
		for (int i = 0; i < l; ++i) {
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	e014      	b.n	80019e8 <ESP01_UART_RxCpltCallback+0x80>
			uint8_t data = '\0';
 80019be:	2300      	movs	r3, #0
 80019c0:	73fb      	strb	r3, [r7, #15]
			circ_buffer_get(&esp01_rx_cb, &data);
 80019c2:	f107 030f 	add.w	r3, r7, #15
 80019c6:	4619      	mov	r1, r3
 80019c8:	4814      	ldr	r0, [pc, #80]	@ (8001a1c <ESP01_UART_RxCpltCallback+0xb4>)
 80019ca:	f7ff fae5 	bl	8000f98 <circ_buffer_get>
			pc_tx_buff[pc_tx_buff_size] = data;
 80019ce:	4b14      	ldr	r3, [pc, #80]	@ (8001a20 <ESP01_UART_RxCpltCallback+0xb8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	7bf9      	ldrb	r1, [r7, #15]
 80019d4:	4a13      	ldr	r2, [pc, #76]	@ (8001a24 <ESP01_UART_RxCpltCallback+0xbc>)
 80019d6:	54d1      	strb	r1, [r2, r3]
			pc_tx_buff_size++;
 80019d8:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <ESP01_UART_RxCpltCallback+0xb8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	3301      	adds	r3, #1
 80019de:	4a10      	ldr	r2, [pc, #64]	@ (8001a20 <ESP01_UART_RxCpltCallback+0xb8>)
 80019e0:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < l; ++i) {
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	3301      	adds	r3, #1
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	dbe6      	blt.n	80019be <ESP01_UART_RxCpltCallback+0x56>
		}
		pcDataReady = 1;
 80019f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a28 <ESP01_UART_RxCpltCallback+0xc0>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	e005      	b.n	8001a04 <ESP01_UART_RxCpltCallback+0x9c>

	}else{
		circ_buffer_put(&esp01_rx_cb, tmp_char2);
 80019f8:	4b07      	ldr	r3, [pc, #28]	@ (8001a18 <ESP01_UART_RxCpltCallback+0xb0>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	4807      	ldr	r0, [pc, #28]	@ (8001a1c <ESP01_UART_RxCpltCallback+0xb4>)
 8001a00:	f7ff fa9e 	bl	8000f40 <circ_buffer_put>
	}

	HAL_UART_Receive_IT(&huart1, &tmp_char2, 1);
 8001a04:	2201      	movs	r2, #1
 8001a06:	4904      	ldr	r1, [pc, #16]	@ (8001a18 <ESP01_UART_RxCpltCallback+0xb0>)
 8001a08:	4808      	ldr	r0, [pc, #32]	@ (8001a2c <ESP01_UART_RxCpltCallback+0xc4>)
 8001a0a:	f004 faa0 	bl	8005f4e <HAL_UART_Receive_IT>
}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000011 	.word	0x20000011
 8001a1c:	200004d0 	.word	0x200004d0
 8001a20:	20000464 	.word	0x20000464
 8001a24:	20000400 	.word	0x20000400
 8001a28:	20000668 	.word	0x20000668
 8001a2c:	2000036c 	.word	0x2000036c

08001a30 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a08      	ldr	r2, [pc, #32]	@ (8001a60 <HAL_UART_RxCpltCallback+0x30>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d102      	bne.n	8001a48 <HAL_UART_RxCpltCallback+0x18>
		PC_UART_RxCpltCallback(huart);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ff30 	bl	80018a8 <PC_UART_RxCpltCallback>
	if(huart->Instance == USART1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a05      	ldr	r2, [pc, #20]	@ (8001a64 <HAL_UART_RxCpltCallback+0x34>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d102      	bne.n	8001a58 <HAL_UART_RxCpltCallback+0x28>
		ESP01_UART_RxCpltCallback(huart);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ff88 	bl	8001968 <ESP01_UART_RxCpltCallback>
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40004400 	.word	0x40004400
 8001a64:	40011000 	.word	0x40011000

08001a68 <ESP01_UART_TxCpltCallback>:

void ESP01_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	esp01IsSent = 1;
 8001a70:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <ESP01_UART_TxCpltCallback+0x2c>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
	esp01DataReady = 0;
 8001a76:	4b08      	ldr	r3, [pc, #32]	@ (8001a98 <ESP01_UART_TxCpltCallback+0x30>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
	esp01_tx_buff[0] = '\0';
 8001a7c:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <ESP01_UART_TxCpltCallback+0x34>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
	esp01_tx_buff_size = 0;
 8001a82:	4b07      	ldr	r3, [pc, #28]	@ (8001aa0 <ESP01_UART_TxCpltCallback+0x38>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	20000018 	.word	0x20000018
 8001a98:	2000066c 	.word	0x2000066c
 8001a9c:	20000468 	.word	0x20000468
 8001aa0:	200004cc 	.word	0x200004cc

08001aa4 <PC_UART_TxCpltCallback>:

void PC_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	pcIsSent = 1;
 8001aac:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <PC_UART_TxCpltCallback+0x2c>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
	pcDataReady = 0;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <PC_UART_TxCpltCallback+0x30>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
	pc_tx_buff[0] = '\0';
 8001ab8:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <PC_UART_TxCpltCallback+0x34>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
	pc_tx_buff_size = 0;
 8001abe:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <PC_UART_TxCpltCallback+0x38>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	20000014 	.word	0x20000014
 8001ad4:	20000668 	.word	0x20000668
 8001ad8:	20000400 	.word	0x20000400
 8001adc:	20000464 	.word	0x20000464

08001ae0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a08      	ldr	r2, [pc, #32]	@ (8001b10 <HAL_UART_TxCpltCallback+0x30>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d102      	bne.n	8001af8 <HAL_UART_TxCpltCallback+0x18>
			PC_UART_TxCpltCallback(huart);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffd6 	bl	8001aa4 <PC_UART_TxCpltCallback>
	if(huart->Instance == USART1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <HAL_UART_TxCpltCallback+0x34>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d102      	bne.n	8001b08 <HAL_UART_TxCpltCallback+0x28>
			ESP01_UART_TxCpltCallback(huart);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ffb0 	bl	8001a68 <ESP01_UART_TxCpltCallback>
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40004400 	.word	0x40004400
 8001b14:	40011000 	.word	0x40011000

08001b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b1c:	b672      	cpsid	i
}
 8001b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <Error_Handler+0x8>

08001b24 <ST7735_GPIO_Init>:
static void ST7735_ExecuteCommandList(const uint8_t *addr);
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor);

static void ST7735_GPIO_Init(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <ST7735_Reset>:

static void ST7735_Reset()
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	TFT_RES_L();
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2140      	movs	r1, #64	@ 0x40
 8001b3c:	4806      	ldr	r0, [pc, #24]	@ (8001b58 <ST7735_Reset+0x24>)
 8001b3e:	f002 f825 	bl	8003b8c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001b42:	2014      	movs	r0, #20
 8001b44:	f000 fef4 	bl	8002930 <HAL_Delay>
	TFT_RES_H();
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2140      	movs	r1, #64	@ 0x40
 8001b4c:	4802      	ldr	r0, [pc, #8]	@ (8001b58 <ST7735_Reset+0x24>)
 8001b4e:	f002 f81d 	bl	8003b8c <HAL_GPIO_WritePin>
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40020400 	.word	0x40020400

08001b5c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
	TFT_DC_C();
 8001b66:	2200      	movs	r2, #0
 8001b68:	2180      	movs	r1, #128	@ 0x80
 8001b6a:	4807      	ldr	r0, [pc, #28]	@ (8001b88 <ST7735_WriteCommand+0x2c>)
 8001b6c:	f002 f80e 	bl	8003b8c <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
  completed1 = 0;
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else*/
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001b70:	1df9      	adds	r1, r7, #7
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b76:	2201      	movs	r2, #1
 8001b78:	4804      	ldr	r0, [pc, #16]	@ (8001b8c <ST7735_WriteCommand+0x30>)
 8001b7a:	f003 fd66 	bl	800564a <HAL_SPI_Transmit>
//#endif
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	200002b4 	.word	0x200002b4

08001b90 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
	TFT_DC_D();
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2180      	movs	r1, #128	@ 0x80
 8001b9e:	480b      	ldr	r0, [pc, #44]	@ (8001bcc <ST7735_WriteData+0x3c>)
 8001ba0:	f001 fff4 	bl	8003b8c <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	4808      	ldr	r0, [pc, #32]	@ (8001bd0 <ST7735_WriteData+0x40>)
 8001bae:	f003 fe8f 	bl	80058d0 <HAL_SPI_Transmit_DMA>
	while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
 8001bb2:	bf00      	nop
 8001bb4:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <ST7735_WriteData+0x40>)
 8001bb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d0f9      	beq.n	8001bb4 <ST7735_WriteData+0x24>
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
#endif
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	200002b4 	.word	0x200002b4

08001bd4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 8001be6:	e034      	b.n	8001c52 <ST7735_ExecuteCommandList+0x7e>
    {
    	uint8_t cmd = *addr++;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001bf2:	7afb      	ldrb	r3, [r7, #11]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ffb1 	bl	8001b5c <ST7735_WriteCommand>

        numArgs = *addr++;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001c04:	7abb      	ldrb	r3, [r7, #10]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c0c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001c0e:	7abb      	ldrb	r3, [r7, #10]
 8001c10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c14:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 8001c16:	7abb      	ldrb	r3, [r7, #10]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001c1c:	7abb      	ldrb	r3, [r7, #10]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ffb5 	bl	8001b90 <ST7735_WriteData>
            addr += numArgs;
 8001c26:	7abb      	ldrb	r3, [r7, #10]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 8001c2e:	89bb      	ldrh	r3, [r7, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00e      	beq.n	8001c52 <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001c3e:	89bb      	ldrh	r3, [r7, #12]
 8001c40:	2bff      	cmp	r3, #255	@ 0xff
 8001c42:	d102      	bne.n	8001c4a <ST7735_ExecuteCommandList+0x76>
 8001c44:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001c48:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001c4a:	89bb      	ldrh	r3, [r7, #12]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 fe6f 	bl	8002930 <HAL_Delay>
    while(numCommands--)
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	1e5a      	subs	r2, r3, #1
 8001c56:	73fa      	strb	r2, [r7, #15]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1c5      	bne.n	8001be8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4604      	mov	r4, r0
 8001c70:	4608      	mov	r0, r1
 8001c72:	4611      	mov	r1, r2
 8001c74:	461a      	mov	r2, r3
 8001c76:	4623      	mov	r3, r4
 8001c78:	71fb      	strb	r3, [r7, #7]
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71bb      	strb	r3, [r7, #6]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	717b      	strb	r3, [r7, #5]
 8001c82:	4613      	mov	r3, r2
 8001c84:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001c86:	202a      	movs	r0, #42	@ 0x2a
 8001c88:	f7ff ff68 	bl	8001b5c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	733b      	strb	r3, [r7, #12]
 8001c90:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <ST7735_SetAddressWindow+0x88>)
 8001c92:	781a      	ldrb	r2, [r3, #0]
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	4413      	add	r3, r2
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	737b      	strb	r3, [r7, #13]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73bb      	strb	r3, [r7, #14]
 8001ca0:	4b13      	ldr	r3, [pc, #76]	@ (8001cf0 <ST7735_SetAddressWindow+0x88>)
 8001ca2:	781a      	ldrb	r2, [r3, #0]
 8001ca4:	797b      	ldrb	r3, [r7, #5]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	2104      	movs	r1, #4
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ff6c 	bl	8001b90 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001cb8:	202b      	movs	r0, #43	@ 0x2b
 8001cba:	f7ff ff4f 	bl	8001b5c <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf4 <ST7735_SetAddressWindow+0x8c>)
 8001cc0:	781a      	ldrb	r2, [r3, #0]
 8001cc2:	79bb      	ldrb	r3, [r7, #6]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8001cca:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf4 <ST7735_SetAddressWindow+0x8c>)
 8001ccc:	781a      	ldrb	r2, [r3, #0]
 8001cce:	793b      	ldrb	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	2104      	movs	r1, #4
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff57 	bl	8001b90 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001ce2:	202c      	movs	r0, #44	@ 0x2c
 8001ce4:	f7ff ff3a 	bl	8001b5c <ST7735_WriteCommand>
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd90      	pop	{r4, r7, pc}
 8001cf0:	20000024 	.word	0x20000024
 8001cf4:	20000025 	.word	0x20000025

08001cf8 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	b590      	push	{r4, r7, lr}
 8001cfc:	b089      	sub	sp, #36	@ 0x24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d02:	4603      	mov	r3, r0
 8001d04:	80fb      	strh	r3, [r7, #6]
 8001d06:	460b      	mov	r3, r1
 8001d08:	80bb      	strh	r3, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	b2d8      	uxtb	r0, r3
 8001d12:	88bb      	ldrh	r3, [r7, #4]
 8001d14:	b2d9      	uxtb	r1, r3
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001d1e:	4413      	add	r3, r2
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b2dc      	uxtb	r4, r3
 8001d26:	88bb      	ldrh	r3, [r7, #4]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001d2e:	4413      	add	r3, r2
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	4622      	mov	r2, r4
 8001d38:	f7ff ff96 	bl	8001c68 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
 8001d40:	e043      	b.n	8001dca <ST7735_WriteChar+0xd2>
    {
        b = font.data[(ch - 32) * font.height + i];
 8001d42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	3b20      	subs	r3, #32
 8001d48:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8001d4c:	fb01 f303 	mul.w	r3, r1, r3
 8001d50:	4619      	mov	r1, r3
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	440b      	add	r3, r1
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	e029      	b.n	8001db8 <ST7735_WriteChar+0xc0>
        {
            if((b << j) & 0x8000)
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00e      	beq.n	8001d92 <ST7735_WriteChar+0x9a>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001d74:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	743b      	strb	r3, [r7, #16]
 8001d7e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001d84:	f107 0310 	add.w	r3, r7, #16
 8001d88:	2102      	movs	r1, #2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff00 	bl	8001b90 <ST7735_WriteData>
 8001d90:	e00f      	b.n	8001db2 <ST7735_WriteChar+0xba>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001d92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	733b      	strb	r3, [r7, #12]
 8001d9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	2102      	movs	r1, #2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff feef 	bl	8001b90 <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	3301      	adds	r3, #1
 8001db6:	61bb      	str	r3, [r7, #24]
 8001db8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d3cf      	bcc.n	8001d64 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001dce:	461a      	mov	r2, r3
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d3b5      	bcc.n	8001d42 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001dd6:	bf00      	nop
 8001dd8:	bf00      	nop
 8001dda:	3724      	adds	r7, #36	@ 0x24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001de2:	b002      	add	sp, #8
 8001de4:	4770      	bx	lr
	...

08001de8 <ST7735_Init>:

void ST7735_Init()
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
	ST7735_GPIO_Init();
 8001dec:	f7ff fe9a 	bl	8001b24 <ST7735_GPIO_Init>
	TFT_CS_L();
 8001df0:	2200      	movs	r2, #0
 8001df2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001df6:	480b      	ldr	r0, [pc, #44]	@ (8001e24 <ST7735_Init+0x3c>)
 8001df8:	f001 fec8 	bl	8003b8c <HAL_GPIO_WritePin>
    ST7735_Reset();
 8001dfc:	f7ff fe9a 	bl	8001b34 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001e00:	4809      	ldr	r0, [pc, #36]	@ (8001e28 <ST7735_Init+0x40>)
 8001e02:	f7ff fee7 	bl	8001bd4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001e06:	4809      	ldr	r0, [pc, #36]	@ (8001e2c <ST7735_Init+0x44>)
 8001e08:	f7ff fee4 	bl	8001bd4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001e0c:	4808      	ldr	r0, [pc, #32]	@ (8001e30 <ST7735_Init+0x48>)
 8001e0e:	f7ff fee1 	bl	8001bd4 <ST7735_ExecuteCommandList>
    TFT_CS_H();
 8001e12:	2201      	movs	r2, #1
 8001e14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e18:	4802      	ldr	r0, [pc, #8]	@ (8001e24 <ST7735_Init+0x3c>)
 8001e1a:	f001 feb7 	bl	8003b8c <HAL_GPIO_WritePin>
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40020000 	.word	0x40020000
 8001e28:	0800afd8 	.word	0x0800afd8
 8001e2c:	0800b014 	.word	0x0800b014
 8001e30:	0800b024 	.word	0x0800b024

08001e34 <ST7735_DrawString>:

    TFT_CS_H();
}

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001e34:	b082      	sub	sp, #8
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af04      	add	r7, sp, #16
 8001e3c:	603a      	str	r2, [r7, #0]
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	4603      	mov	r3, r0
 8001e42:	80fb      	strh	r3, [r7, #6]
 8001e44:	460b      	mov	r3, r1
 8001e46:	80bb      	strh	r3, [r7, #4]
	TFT_CS_L();
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e4e:	4825      	ldr	r0, [pc, #148]	@ (8001ee4 <ST7735_DrawString+0xb0>)
 8001e50:	f001 fe9c 	bl	8003b8c <HAL_GPIO_WritePin>

    while(*str)
 8001e54:	e033      	b.n	8001ebe <ST7735_DrawString+0x8a>
    {
        if(x + font.width >= _width)
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	7d3a      	ldrb	r2, [r7, #20]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a22      	ldr	r2, [pc, #136]	@ (8001ee8 <ST7735_DrawString+0xb4>)
 8001e5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001e62:	4293      	cmp	r3, r2
 8001e64:	db16      	blt.n	8001e94 <ST7735_DrawString+0x60>
        {
            x = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001e6a:	7d7b      	ldrb	r3, [r7, #21]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	88bb      	ldrh	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height)
 8001e74:	88bb      	ldrh	r3, [r7, #4]
 8001e76:	7d7a      	ldrb	r2, [r7, #21]
 8001e78:	4413      	add	r3, r2
 8001e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001eec <ST7735_DrawString+0xb8>)
 8001e7c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001e80:	4293      	cmp	r3, r2
 8001e82:	da21      	bge.n	8001ec8 <ST7735_DrawString+0x94>
            {
                break;
            }

            if(*str == ' ')
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	d103      	bne.n	8001e94 <ST7735_DrawString+0x60>
            {
                // skip spaces in the beginning of the new line
                str++;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	603b      	str	r3, [r7, #0]
                continue;
 8001e92:	e014      	b.n	8001ebe <ST7735_DrawString+0x8a>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	781a      	ldrb	r2, [r3, #0]
 8001e98:	88b9      	ldrh	r1, [r7, #4]
 8001e9a:	88f8      	ldrh	r0, [r7, #6]
 8001e9c:	8c3b      	ldrh	r3, [r7, #32]
 8001e9e:	9302      	str	r3, [sp, #8]
 8001ea0:	8bbb      	ldrh	r3, [r7, #28]
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f7ff ff25 	bl	8001cf8 <ST7735_WriteChar>
        x += font.width;
 8001eae:	7d3b      	ldrb	r3, [r7, #20]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	80fb      	strh	r3, [r7, #6]
        str++;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	603b      	str	r3, [r7, #0]
    while(*str)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1c7      	bne.n	8001e56 <ST7735_DrawString+0x22>
 8001ec6:	e000      	b.n	8001eca <ST7735_DrawString+0x96>
                break;
 8001ec8:	bf00      	nop
    }
    TFT_CS_H();
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ed0:	4804      	ldr	r0, [pc, #16]	@ (8001ee4 <ST7735_DrawString+0xb0>)
 8001ed2:	f001 fe5b 	bl	8003b8c <HAL_GPIO_WritePin>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ee0:	b002      	add	sp, #8
 8001ee2:	4770      	bx	lr
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	20000022 	.word	0x20000022
 8001eec:	20000020 	.word	0x20000020

08001ef0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ef4:	b086      	sub	sp, #24
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4606      	mov	r6, r0
 8001efa:	4608      	mov	r0, r1
 8001efc:	4611      	mov	r1, r2
 8001efe:	461a      	mov	r2, r3
 8001f00:	4633      	mov	r3, r6
 8001f02:	80fb      	strh	r3, [r7, #6]
 8001f04:	4603      	mov	r3, r0
 8001f06:	80bb      	strh	r3, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	803b      	strh	r3, [r7, #0]
 8001f10:	466b      	mov	r3, sp
 8001f12:	469a      	mov	sl, r3
    // clipping
    if ((x >= _width) || (y >= _height))
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	4a59      	ldr	r2, [pc, #356]	@ (800207c <ST7735_FillRectangle+0x18c>)
 8001f18:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	da05      	bge.n	8001f2c <ST7735_FillRectangle+0x3c>
 8001f20:	88bb      	ldrh	r3, [r7, #4]
 8001f22:	4a57      	ldr	r2, [pc, #348]	@ (8002080 <ST7735_FillRectangle+0x190>)
 8001f24:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	db01      	blt.n	8001f30 <ST7735_FillRectangle+0x40>
        return;
 8001f2c:	46d5      	mov	sp, sl
 8001f2e:	e0a0      	b.n	8002072 <ST7735_FillRectangle+0x182>
    if ((x + w - 1) >= _width)
 8001f30:	88fa      	ldrh	r2, [r7, #6]
 8001f32:	887b      	ldrh	r3, [r7, #2]
 8001f34:	4413      	add	r3, r2
 8001f36:	4a51      	ldr	r2, [pc, #324]	@ (800207c <ST7735_FillRectangle+0x18c>)
 8001f38:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	dd06      	ble.n	8001f4e <ST7735_FillRectangle+0x5e>
        w = _width - x;
 8001f40:	4b4e      	ldr	r3, [pc, #312]	@ (800207c <ST7735_FillRectangle+0x18c>)
 8001f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	807b      	strh	r3, [r7, #2]
    if ((y + h - 1) >= _height)
 8001f4e:	88ba      	ldrh	r2, [r7, #4]
 8001f50:	883b      	ldrh	r3, [r7, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	4a4a      	ldr	r2, [pc, #296]	@ (8002080 <ST7735_FillRectangle+0x190>)
 8001f56:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	dd06      	ble.n	8001f6c <ST7735_FillRectangle+0x7c>
        h = _height - y;
 8001f5e:	4b48      	ldr	r3, [pc, #288]	@ (8002080 <ST7735_FillRectangle+0x190>)
 8001f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	88bb      	ldrh	r3, [r7, #4]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f72:	4844      	ldr	r0, [pc, #272]	@ (8002084 <ST7735_FillRectangle+0x194>)
 8001f74:	f001 fe0a 	bl	8003b8c <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	b2d8      	uxtb	r0, r3
 8001f7c:	88bb      	ldrh	r3, [r7, #4]
 8001f7e:	b2d9      	uxtb	r1, r3
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	887b      	ldrh	r3, [r7, #2]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b2de      	uxtb	r6, r3
 8001f90:	88bb      	ldrh	r3, [r7, #4]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	883b      	ldrh	r3, [r7, #0]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	4413      	add	r3, r2
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	4632      	mov	r2, r6
 8001fa2:	f7ff fe61 	bl	8001c68 <ST7735_SetAddressWindow>

    uint8_t data[2] = { color >> 8, color & 0xFF };
 8001fa6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	723b      	strb	r3, [r7, #8]
 8001fb0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	727b      	strb	r3, [r7, #9]
    TFT_DC_D();
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	2180      	movs	r1, #128	@ 0x80
 8001fba:	4833      	ldr	r0, [pc, #204]	@ (8002088 <ST7735_FillRectangle+0x198>)
 8001fbc:	f001 fde6 	bl	8003b8c <HAL_GPIO_WritePin>

#ifdef USE_SPI_DMA
    uint8_t tbuf[w*2];
 8001fc0:	887b      	ldrh	r3, [r7, #2]
 8001fc2:	005e      	lsls	r6, r3, #1
 8001fc4:	1e73      	subs	r3, r6, #1
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	4632      	mov	r2, r6
 8001fca:	2300      	movs	r3, #0
 8001fcc:	4690      	mov	r8, r2
 8001fce:	4699      	mov	r9, r3
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fdc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fe0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fe4:	4632      	mov	r2, r6
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	4614      	mov	r4, r2
 8001fea:	461d      	mov	r5, r3
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	00eb      	lsls	r3, r5, #3
 8001ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ffa:	00e2      	lsls	r2, r4, #3
 8001ffc:	4633      	mov	r3, r6
 8001ffe:	3307      	adds	r3, #7
 8002000:	08db      	lsrs	r3, r3, #3
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	ebad 0d03 	sub.w	sp, sp, r3
 8002008:	466b      	mov	r3, sp
 800200a:	3300      	adds	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
    for (y = h; y > 0; y--) {
 800200e:	883b      	ldrh	r3, [r7, #0]
 8002010:	80bb      	strh	r3, [r7, #4]
 8002012:	e024      	b.n	800205e <ST7735_FillRectangle+0x16e>
        for (int x = w * 2; x >= 0; x -= 2) {
 8002014:	887b      	ldrh	r3, [r7, #2]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	e00d      	b.n	8002038 <ST7735_FillRectangle+0x148>
            tbuf[x] = data[0];
 800201c:	7a39      	ldrb	r1, [r7, #8]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	4413      	add	r3, r2
 8002024:	460a      	mov	r2, r1
 8002026:	701a      	strb	r2, [r3, #0]
            tbuf[x + 1] = data[1];
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3301      	adds	r3, #1
 800202c:	7a79      	ldrb	r1, [r7, #9]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	54d1      	strb	r1, [r2, r3]
        for (int x = w * 2; x >= 0; x -= 2) {
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3b02      	subs	r3, #2
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	daee      	bge.n	800201c <ST7735_FillRectangle+0x12c>
        }
        HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, tbuf, sizeof(tbuf));
 800203e:	b2b3      	uxth	r3, r6
 8002040:	461a      	mov	r2, r3
 8002042:	68f9      	ldr	r1, [r7, #12]
 8002044:	4811      	ldr	r0, [pc, #68]	@ (800208c <ST7735_FillRectangle+0x19c>)
 8002046:	f003 fc43 	bl	80058d0 <HAL_SPI_Transmit_DMA>
        while (hspi1.State == HAL_SPI_STATE_BUSY_TX) {
 800204a:	bf00      	nop
 800204c:	4b0f      	ldr	r3, [pc, #60]	@ (800208c <ST7735_FillRectangle+0x19c>)
 800204e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b03      	cmp	r3, #3
 8002056:	d0f9      	beq.n	800204c <ST7735_FillRectangle+0x15c>
    for (y = h; y > 0; y--) {
 8002058:	88bb      	ldrh	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	80bb      	strh	r3, [r7, #4]
 800205e:	88bb      	ldrh	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1d7      	bne.n	8002014 <ST7735_FillRectangle+0x124>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
        }
    }
#endif

    TFT_CS_H();
 8002064:	2201      	movs	r2, #1
 8002066:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800206a:	4806      	ldr	r0, [pc, #24]	@ (8002084 <ST7735_FillRectangle+0x194>)
 800206c:	f001 fd8e 	bl	8003b8c <HAL_GPIO_WritePin>
 8002070:	46d5      	mov	sp, sl
}
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800207a:	bf00      	nop
 800207c:	20000022 	.word	0x20000022
 8002080:	20000020 	.word	0x20000020
 8002084:	40020000 	.word	0x40020000
 8002088:	40020800 	.word	0x40020800
 800208c:	200002b4 	.word	0x200002b4

08002090 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af02      	add	r7, sp, #8
 8002096:	4603      	mov	r3, r0
 8002098:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 800209a:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <ST7735_FillScreen+0x30>)
 800209c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <ST7735_FillScreen+0x34>)
 80020a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a8:	b299      	uxth	r1, r3
 80020aa:	88fb      	ldrh	r3, [r7, #6]
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	460b      	mov	r3, r1
 80020b0:	2100      	movs	r1, #0
 80020b2:	2000      	movs	r0, #0
 80020b4:	f7ff ff1c 	bl	8001ef0 <ST7735_FillRectangle>
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000022 	.word	0x20000022
 80020c4:	20000020 	.word	0x20000020

080020c8 <ST7735_Backlight_On>:
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
    TFT_CS_H();
}

void ST7735_Backlight_On(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
	TFT_BL_H();
 80020cc:	2201      	movs	r2, #1
 80020ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020d2:	4802      	ldr	r0, [pc, #8]	@ (80020dc <ST7735_Backlight_On+0x14>)
 80020d4:	f001 fd5a 	bl	8003b8c <HAL_GPIO_WritePin>
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40020400 	.word	0x40020400

080020e0 <ST7735_SetRotation>:
/***************************************************************************************
** Function name:           setRotation
** Description:             rotate the screen orientation m = 0-3
***************************************************************************************/
void ST7735_SetRotation(uint8_t m)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  _value_rotation = m % 4;
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4b4a      	ldr	r3, [pc, #296]	@ (800221c <ST7735_SetRotation+0x13c>)
 80020f4:	701a      	strb	r2, [r3, #0]

  TFT_CS_L();
 80020f6:	2200      	movs	r2, #0
 80020f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020fc:	4848      	ldr	r0, [pc, #288]	@ (8002220 <ST7735_SetRotation+0x140>)
 80020fe:	f001 fd45 	bl	8003b8c <HAL_GPIO_WritePin>

  ST7735_WriteCommand(ST7735_MADCTL);
 8002102:	2036      	movs	r0, #54	@ 0x36
 8002104:	f7ff fd2a 	bl	8001b5c <ST7735_WriteCommand>

  switch (_value_rotation)
 8002108:	4b44      	ldr	r3, [pc, #272]	@ (800221c <ST7735_SetRotation+0x13c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b03      	cmp	r3, #3
 800210e:	d87b      	bhi.n	8002208 <ST7735_SetRotation+0x128>
 8002110:	a201      	add	r2, pc, #4	@ (adr r2, 8002118 <ST7735_SetRotation+0x38>)
 8002112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002116:	bf00      	nop
 8002118:	08002129 	.word	0x08002129
 800211c:	08002165 	.word	0x08002165
 8002120:	080021a1 	.word	0x080021a1
 8002124:	080021cd 	.word	0x080021cd
  {
    case 0:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[1] | _data_rotation[3]);
 8002128:	4b3e      	ldr	r3, [pc, #248]	@ (8002224 <ST7735_SetRotation+0x144>)
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	4b3d      	ldr	r3, [pc, #244]	@ (8002224 <ST7735_SetRotation+0x144>)
 800212e:	785b      	ldrb	r3, [r3, #1]
 8002130:	4313      	orrs	r3, r2
 8002132:	b2da      	uxtb	r2, r3
 8002134:	4b3b      	ldr	r3, [pc, #236]	@ (8002224 <ST7735_SetRotation+0x144>)
 8002136:	78db      	ldrb	r3, [r3, #3]
 8002138:	4313      	orrs	r3, r2
 800213a:	b2db      	uxtb	r3, r3
 800213c:	73fb      	strb	r3, [r7, #15]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 800213e:	f107 030f 	add.w	r3, r7, #15
 8002142:	2101      	movs	r1, #1
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fd23 	bl	8001b90 <ST7735_WriteData>
        _width  = ST7735_WIDTH;
 800214a:	4b37      	ldr	r3, [pc, #220]	@ (8002228 <ST7735_SetRotation+0x148>)
 800214c:	2250      	movs	r2, #80	@ 0x50
 800214e:	801a      	strh	r2, [r3, #0]
        _height = ST7735_HEIGHT;
 8002150:	4b36      	ldr	r3, [pc, #216]	@ (800222c <ST7735_SetRotation+0x14c>)
 8002152:	22a0      	movs	r2, #160	@ 0xa0
 8002154:	801a      	strh	r2, [r3, #0]
        _xstart = ST7735_XSTART;
 8002156:	4b36      	ldr	r3, [pc, #216]	@ (8002230 <ST7735_SetRotation+0x150>)
 8002158:	221a      	movs	r2, #26
 800215a:	701a      	strb	r2, [r3, #0]
		_ystart = ST7735_YSTART;
 800215c:	4b35      	ldr	r3, [pc, #212]	@ (8002234 <ST7735_SetRotation+0x154>)
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
    }
     break;
 8002162:	e051      	b.n	8002208 <ST7735_SetRotation+0x128>
    case 1:
    {
    	uint8_t d_r = (_data_rotation[1] | _data_rotation[2] | _data_rotation[3]);
 8002164:	4b2f      	ldr	r3, [pc, #188]	@ (8002224 <ST7735_SetRotation+0x144>)
 8002166:	785a      	ldrb	r2, [r3, #1]
 8002168:	4b2e      	ldr	r3, [pc, #184]	@ (8002224 <ST7735_SetRotation+0x144>)
 800216a:	789b      	ldrb	r3, [r3, #2]
 800216c:	4313      	orrs	r3, r2
 800216e:	b2da      	uxtb	r2, r3
 8002170:	4b2c      	ldr	r3, [pc, #176]	@ (8002224 <ST7735_SetRotation+0x144>)
 8002172:	78db      	ldrb	r3, [r3, #3]
 8002174:	4313      	orrs	r3, r2
 8002176:	b2db      	uxtb	r3, r3
 8002178:	73bb      	strb	r3, [r7, #14]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 800217a:	f107 030e 	add.w	r3, r7, #14
 800217e:	2101      	movs	r1, #1
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fd05 	bl	8001b90 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 8002186:	4b28      	ldr	r3, [pc, #160]	@ (8002228 <ST7735_SetRotation+0x148>)
 8002188:	22a0      	movs	r2, #160	@ 0xa0
 800218a:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 800218c:	4b27      	ldr	r3, [pc, #156]	@ (800222c <ST7735_SetRotation+0x14c>)
 800218e:	2250      	movs	r2, #80	@ 0x50
 8002190:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 8002192:	4b27      	ldr	r3, [pc, #156]	@ (8002230 <ST7735_SetRotation+0x150>)
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 8002198:	4b26      	ldr	r3, [pc, #152]	@ (8002234 <ST7735_SetRotation+0x154>)
 800219a:	221a      	movs	r2, #26
 800219c:	701a      	strb	r2, [r3, #0]
    }
      break;
 800219e:	e033      	b.n	8002208 <ST7735_SetRotation+0x128>
    case 2:
    {
    	uint8_t d_r = _data_rotation[3];
 80021a0:	4b20      	ldr	r3, [pc, #128]	@ (8002224 <ST7735_SetRotation+0x144>)
 80021a2:	78db      	ldrb	r3, [r3, #3]
 80021a4:	737b      	strb	r3, [r7, #13]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 80021a6:	f107 030d 	add.w	r3, r7, #13
 80021aa:	2101      	movs	r1, #1
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fcef 	bl	8001b90 <ST7735_WriteData>
    	_width  = ST7735_WIDTH;
 80021b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002228 <ST7735_SetRotation+0x148>)
 80021b4:	2250      	movs	r2, #80	@ 0x50
 80021b6:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_HEIGHT;
 80021b8:	4b1c      	ldr	r3, [pc, #112]	@ (800222c <ST7735_SetRotation+0x14c>)
 80021ba:	22a0      	movs	r2, #160	@ 0xa0
 80021bc:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_XSTART;
 80021be:	4b1c      	ldr	r3, [pc, #112]	@ (8002230 <ST7735_SetRotation+0x150>)
 80021c0:	221a      	movs	r2, #26
 80021c2:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_YSTART;
 80021c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002234 <ST7735_SetRotation+0x154>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	701a      	strb	r2, [r3, #0]
    }
      break;
 80021ca:	e01d      	b.n	8002208 <ST7735_SetRotation+0x128>
    case 3:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[2] | _data_rotation[3]);
 80021cc:	4b15      	ldr	r3, [pc, #84]	@ (8002224 <ST7735_SetRotation+0x144>)
 80021ce:	781a      	ldrb	r2, [r3, #0]
 80021d0:	4b14      	ldr	r3, [pc, #80]	@ (8002224 <ST7735_SetRotation+0x144>)
 80021d2:	789b      	ldrb	r3, [r3, #2]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	4b12      	ldr	r3, [pc, #72]	@ (8002224 <ST7735_SetRotation+0x144>)
 80021da:	78db      	ldrb	r3, [r3, #3]
 80021dc:	4313      	orrs	r3, r2
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	733b      	strb	r3, [r7, #12]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	2101      	movs	r1, #1
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fcd1 	bl	8001b90 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002228 <ST7735_SetRotation+0x148>)
 80021f0:	22a0      	movs	r2, #160	@ 0xa0
 80021f2:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 80021f4:	4b0d      	ldr	r3, [pc, #52]	@ (800222c <ST7735_SetRotation+0x14c>)
 80021f6:	2250      	movs	r2, #80	@ 0x50
 80021f8:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 80021fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002230 <ST7735_SetRotation+0x150>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 8002200:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <ST7735_SetRotation+0x154>)
 8002202:	221a      	movs	r2, #26
 8002204:	701a      	strb	r2, [r3, #0]
    }
      break;
 8002206:	bf00      	nop
  }
  TFT_CS_H();
 8002208:	2201      	movs	r2, #1
 800220a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800220e:	4804      	ldr	r0, [pc, #16]	@ (8002220 <ST7735_SetRotation+0x140>)
 8002210:	f001 fcbc 	bl	8003b8c <HAL_GPIO_WritePin>
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000670 	.word	0x20000670
 8002220:	40020000 	.word	0x40020000
 8002224:	2000001c 	.word	0x2000001c
 8002228:	20000022 	.word	0x20000022
 800222c:	20000020 	.word	0x20000020
 8002230:	20000024 	.word	0x20000024
 8002234:	20000025 	.word	0x20000025

08002238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <HAL_MspInit+0x4c>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002246:	4a0f      	ldr	r2, [pc, #60]	@ (8002284 <HAL_MspInit+0x4c>)
 8002248:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800224c:	6453      	str	r3, [r2, #68]	@ 0x44
 800224e:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <HAL_MspInit+0x4c>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002252:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <HAL_MspInit+0x4c>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	4a08      	ldr	r2, [pc, #32]	@ (8002284 <HAL_MspInit+0x4c>)
 8002264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002268:	6413      	str	r3, [r2, #64]	@ 0x40
 800226a:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <HAL_MspInit+0x4c>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002276:	2007      	movs	r0, #7
 8002278:	f000 fec0 	bl	8002ffc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40023800 	.word	0x40023800

08002288 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	@ 0x28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a17      	ldr	r2, [pc, #92]	@ (8002304 <HAL_ADC_MspInit+0x7c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d127      	bne.n	80022fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	4b16      	ldr	r3, [pc, #88]	@ (8002308 <HAL_ADC_MspInit+0x80>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b2:	4a15      	ldr	r2, [pc, #84]	@ (8002308 <HAL_ADC_MspInit+0x80>)
 80022b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ba:	4b13      	ldr	r3, [pc, #76]	@ (8002308 <HAL_ADC_MspInit+0x80>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002308 <HAL_ADC_MspInit+0x80>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002308 <HAL_ADC_MspInit+0x80>)
 80022d0:	f043 0304 	orr.w	r3, r3, #4
 80022d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <HAL_ADC_MspInit+0x80>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022e2:	2310      	movs	r3, #16
 80022e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022e6:	2303      	movs	r3, #3
 80022e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ee:	f107 0314 	add.w	r3, r7, #20
 80022f2:	4619      	mov	r1, r3
 80022f4:	4805      	ldr	r0, [pc, #20]	@ (800230c <HAL_ADC_MspInit+0x84>)
 80022f6:	f001 fac5 	bl	8003884 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022fa:	bf00      	nop
 80022fc:	3728      	adds	r7, #40	@ 0x28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40012000 	.word	0x40012000
 8002308:	40023800 	.word	0x40023800
 800230c:	40020800 	.word	0x40020800

08002310 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	@ 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a19      	ldr	r2, [pc, #100]	@ (8002394 <HAL_I2C_MspInit+0x84>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d12c      	bne.n	800238c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	4b18      	ldr	r3, [pc, #96]	@ (8002398 <HAL_I2C_MspInit+0x88>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	4a17      	ldr	r2, [pc, #92]	@ (8002398 <HAL_I2C_MspInit+0x88>)
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	6313      	str	r3, [r2, #48]	@ 0x30
 8002342:	4b15      	ldr	r3, [pc, #84]	@ (8002398 <HAL_I2C_MspInit+0x88>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800234e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002354:	2312      	movs	r3, #18
 8002356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235c:	2303      	movs	r3, #3
 800235e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002360:	2304      	movs	r3, #4
 8002362:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	4619      	mov	r1, r3
 800236a:	480c      	ldr	r0, [pc, #48]	@ (800239c <HAL_I2C_MspInit+0x8c>)
 800236c:	f001 fa8a 	bl	8003884 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	4b08      	ldr	r3, [pc, #32]	@ (8002398 <HAL_I2C_MspInit+0x88>)
 8002376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002378:	4a07      	ldr	r2, [pc, #28]	@ (8002398 <HAL_I2C_MspInit+0x88>)
 800237a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800237e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002380:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <HAL_I2C_MspInit+0x88>)
 8002382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800238c:	bf00      	nop
 800238e:	3728      	adds	r7, #40	@ 0x28
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40005400 	.word	0x40005400
 8002398:	40023800 	.word	0x40023800
 800239c:	40020400 	.word	0x40020400

080023a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a30      	ldr	r2, [pc, #192]	@ (8002480 <HAL_SPI_MspInit+0xe0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d159      	bne.n	8002476 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002484 <HAL_SPI_MspInit+0xe4>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	4a2e      	ldr	r2, [pc, #184]	@ (8002484 <HAL_SPI_MspInit+0xe4>)
 80023cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002484 <HAL_SPI_MspInit+0xe4>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b28      	ldr	r3, [pc, #160]	@ (8002484 <HAL_SPI_MspInit+0xe4>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	4a27      	ldr	r2, [pc, #156]	@ (8002484 <HAL_SPI_MspInit+0xe4>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ee:	4b25      	ldr	r3, [pc, #148]	@ (8002484 <HAL_SPI_MspInit+0xe4>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80023fa:	23e0      	movs	r3, #224	@ 0xe0
 80023fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002406:	2303      	movs	r3, #3
 8002408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800240a:	2305      	movs	r3, #5
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4619      	mov	r1, r3
 8002414:	481c      	ldr	r0, [pc, #112]	@ (8002488 <HAL_SPI_MspInit+0xe8>)
 8002416:	f001 fa35 	bl	8003884 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 800241a:	4b1c      	ldr	r3, [pc, #112]	@ (800248c <HAL_SPI_MspInit+0xec>)
 800241c:	4a1c      	ldr	r2, [pc, #112]	@ (8002490 <HAL_SPI_MspInit+0xf0>)
 800241e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8002420:	4b1a      	ldr	r3, [pc, #104]	@ (800248c <HAL_SPI_MspInit+0xec>)
 8002422:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002426:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002428:	4b18      	ldr	r3, [pc, #96]	@ (800248c <HAL_SPI_MspInit+0xec>)
 800242a:	2240      	movs	r2, #64	@ 0x40
 800242c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800242e:	4b17      	ldr	r3, [pc, #92]	@ (800248c <HAL_SPI_MspInit+0xec>)
 8002430:	2200      	movs	r2, #0
 8002432:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002434:	4b15      	ldr	r3, [pc, #84]	@ (800248c <HAL_SPI_MspInit+0xec>)
 8002436:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800243a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800243c:	4b13      	ldr	r3, [pc, #76]	@ (800248c <HAL_SPI_MspInit+0xec>)
 800243e:	2200      	movs	r2, #0
 8002440:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002442:	4b12      	ldr	r3, [pc, #72]	@ (800248c <HAL_SPI_MspInit+0xec>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002448:	4b10      	ldr	r3, [pc, #64]	@ (800248c <HAL_SPI_MspInit+0xec>)
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800244e:	4b0f      	ldr	r3, [pc, #60]	@ (800248c <HAL_SPI_MspInit+0xec>)
 8002450:	2200      	movs	r2, #0
 8002452:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002454:	4b0d      	ldr	r3, [pc, #52]	@ (800248c <HAL_SPI_MspInit+0xec>)
 8002456:	2200      	movs	r2, #0
 8002458:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800245a:	480c      	ldr	r0, [pc, #48]	@ (800248c <HAL_SPI_MspInit+0xec>)
 800245c:	f000 fe10 	bl	8003080 <HAL_DMA_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8002466:	f7ff fb57 	bl	8001b18 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a07      	ldr	r2, [pc, #28]	@ (800248c <HAL_SPI_MspInit+0xec>)
 800246e:	649a      	str	r2, [r3, #72]	@ 0x48
 8002470:	4a06      	ldr	r2, [pc, #24]	@ (800248c <HAL_SPI_MspInit+0xec>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002476:	bf00      	nop
 8002478:	3728      	adds	r7, #40	@ 0x28
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40013000 	.word	0x40013000
 8002484:	40023800 	.word	0x40023800
 8002488:	40020000 	.word	0x40020000
 800248c:	2000030c 	.word	0x2000030c
 8002490:	40026440 	.word	0x40026440

08002494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08c      	sub	sp, #48	@ 0x30
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 031c 	add.w	r3, r7, #28
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a3a      	ldr	r2, [pc, #232]	@ (800259c <HAL_UART_MspInit+0x108>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d135      	bne.n	8002522 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	4b39      	ldr	r3, [pc, #228]	@ (80025a0 <HAL_UART_MspInit+0x10c>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024be:	4a38      	ldr	r2, [pc, #224]	@ (80025a0 <HAL_UART_MspInit+0x10c>)
 80024c0:	f043 0310 	orr.w	r3, r3, #16
 80024c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024c6:	4b36      	ldr	r3, [pc, #216]	@ (80025a0 <HAL_UART_MspInit+0x10c>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	4b32      	ldr	r3, [pc, #200]	@ (80025a0 <HAL_UART_MspInit+0x10c>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	4a31      	ldr	r2, [pc, #196]	@ (80025a0 <HAL_UART_MspInit+0x10c>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e2:	4b2f      	ldr	r3, [pc, #188]	@ (80025a0 <HAL_UART_MspInit+0x10c>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80024ee:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 80024f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fc:	2303      	movs	r3, #3
 80024fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002500:	2307      	movs	r3, #7
 8002502:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002504:	f107 031c 	add.w	r3, r7, #28
 8002508:	4619      	mov	r1, r3
 800250a:	4826      	ldr	r0, [pc, #152]	@ (80025a4 <HAL_UART_MspInit+0x110>)
 800250c:	f001 f9ba 	bl	8003884 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002510:	2200      	movs	r2, #0
 8002512:	2100      	movs	r1, #0
 8002514:	2025      	movs	r0, #37	@ 0x25
 8002516:	f000 fd7c 	bl	8003012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800251a:	2025      	movs	r0, #37	@ 0x25
 800251c:	f000 fd95 	bl	800304a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002520:	e038      	b.n	8002594 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a20      	ldr	r2, [pc, #128]	@ (80025a8 <HAL_UART_MspInit+0x114>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d133      	bne.n	8002594 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	4b1b      	ldr	r3, [pc, #108]	@ (80025a0 <HAL_UART_MspInit+0x10c>)
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	4a1a      	ldr	r2, [pc, #104]	@ (80025a0 <HAL_UART_MspInit+0x10c>)
 8002536:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800253a:	6413      	str	r3, [r2, #64]	@ 0x40
 800253c:	4b18      	ldr	r3, [pc, #96]	@ (80025a0 <HAL_UART_MspInit+0x10c>)
 800253e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	4b14      	ldr	r3, [pc, #80]	@ (80025a0 <HAL_UART_MspInit+0x10c>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002550:	4a13      	ldr	r2, [pc, #76]	@ (80025a0 <HAL_UART_MspInit+0x10c>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6313      	str	r3, [r2, #48]	@ 0x30
 8002558:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <HAL_UART_MspInit+0x10c>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002564:	230c      	movs	r3, #12
 8002566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002570:	2303      	movs	r3, #3
 8002572:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002574:	2307      	movs	r3, #7
 8002576:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002578:	f107 031c 	add.w	r3, r7, #28
 800257c:	4619      	mov	r1, r3
 800257e:	4809      	ldr	r0, [pc, #36]	@ (80025a4 <HAL_UART_MspInit+0x110>)
 8002580:	f001 f980 	bl	8003884 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002584:	2200      	movs	r2, #0
 8002586:	2100      	movs	r1, #0
 8002588:	2026      	movs	r0, #38	@ 0x26
 800258a:	f000 fd42 	bl	8003012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800258e:	2026      	movs	r0, #38	@ 0x26
 8002590:	f000 fd5b 	bl	800304a <HAL_NVIC_EnableIRQ>
}
 8002594:	bf00      	nop
 8002596:	3730      	adds	r7, #48	@ 0x30
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40011000 	.word	0x40011000
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40004400 	.word	0x40004400

080025ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025b0:	bf00      	nop
 80025b2:	e7fd      	b.n	80025b0 <NMI_Handler+0x4>

080025b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <HardFault_Handler+0x4>

080025bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c0:	bf00      	nop
 80025c2:	e7fd      	b.n	80025c0 <MemManage_Handler+0x4>

080025c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025c8:	bf00      	nop
 80025ca:	e7fd      	b.n	80025c8 <BusFault_Handler+0x4>

080025cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d0:	bf00      	nop
 80025d2:	e7fd      	b.n	80025d0 <UsageFault_Handler+0x4>

080025d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002602:	f000 f975 	bl	80028f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002610:	4802      	ldr	r0, [pc, #8]	@ (800261c <USART1_IRQHandler+0x10>)
 8002612:	f003 fcc1 	bl	8005f98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	2000036c 	.word	0x2000036c

08002620 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002624:	4802      	ldr	r0, [pc, #8]	@ (8002630 <USART2_IRQHandler+0x10>)
 8002626:	f003 fcb7 	bl	8005f98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200003b4 	.word	0x200003b4

08002634 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002638:	4802      	ldr	r0, [pc, #8]	@ (8002644 <DMA2_Stream2_IRQHandler+0x10>)
 800263a:	f000 feb9 	bl	80033b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	2000030c 	.word	0x2000030c

08002648 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return 1;
 800264c:	2301      	movs	r3, #1
}
 800264e:	4618      	mov	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <_kill>:

int _kill(int pid, int sig)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002662:	f005 fa7b 	bl	8007b5c <__errno>
 8002666:	4603      	mov	r3, r0
 8002668:	2216      	movs	r2, #22
 800266a:	601a      	str	r2, [r3, #0]
  return -1;
 800266c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <_exit>:

void _exit (int status)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002680:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ffe7 	bl	8002658 <_kill>
  while (1) {}    /* Make sure we hang here */
 800268a:	bf00      	nop
 800268c:	e7fd      	b.n	800268a <_exit+0x12>

0800268e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	e00a      	b.n	80026b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026a0:	f3af 8000 	nop.w
 80026a4:	4601      	mov	r1, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	60ba      	str	r2, [r7, #8]
 80026ac:	b2ca      	uxtb	r2, r1
 80026ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3301      	adds	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	dbf0      	blt.n	80026a0 <_read+0x12>
  }

  return len;
 80026be:	687b      	ldr	r3, [r7, #4]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	e009      	b.n	80026ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	60ba      	str	r2, [r7, #8]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	3301      	adds	r3, #1
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	dbf1      	blt.n	80026da <_write+0x12>
  }
  return len;
 80026f6:	687b      	ldr	r3, [r7, #4]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <_close>:

int _close(int file)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002708:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002728:	605a      	str	r2, [r3, #4]
  return 0;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <_isatty>:

int _isatty(int file)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002740:	2301      	movs	r3, #1
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800274e:	b480      	push	{r7}
 8002750:	b085      	sub	sp, #20
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002770:	4a14      	ldr	r2, [pc, #80]	@ (80027c4 <_sbrk+0x5c>)
 8002772:	4b15      	ldr	r3, [pc, #84]	@ (80027c8 <_sbrk+0x60>)
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800277c:	4b13      	ldr	r3, [pc, #76]	@ (80027cc <_sbrk+0x64>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002784:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <_sbrk+0x64>)
 8002786:	4a12      	ldr	r2, [pc, #72]	@ (80027d0 <_sbrk+0x68>)
 8002788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800278a:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	429a      	cmp	r2, r3
 8002796:	d207      	bcs.n	80027a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002798:	f005 f9e0 	bl	8007b5c <__errno>
 800279c:	4603      	mov	r3, r0
 800279e:	220c      	movs	r2, #12
 80027a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027a6:	e009      	b.n	80027bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027a8:	4b08      	ldr	r3, [pc, #32]	@ (80027cc <_sbrk+0x64>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ae:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <_sbrk+0x64>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	4a05      	ldr	r2, [pc, #20]	@ (80027cc <_sbrk+0x64>)
 80027b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ba:	68fb      	ldr	r3, [r7, #12]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20020000 	.word	0x20020000
 80027c8:	00000400 	.word	0x00000400
 80027cc:	20000674 	.word	0x20000674
 80027d0:	200007c8 	.word	0x200007c8

080027d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027d8:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <SystemInit+0x20>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027de:	4a05      	ldr	r2, [pc, #20]	@ (80027f4 <SystemInit+0x20>)
 80027e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002830 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027fc:	f7ff ffea 	bl	80027d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002800:	480c      	ldr	r0, [pc, #48]	@ (8002834 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002802:	490d      	ldr	r1, [pc, #52]	@ (8002838 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002804:	4a0d      	ldr	r2, [pc, #52]	@ (800283c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a0a      	ldr	r2, [pc, #40]	@ (8002840 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002818:	4c0a      	ldr	r4, [pc, #40]	@ (8002844 <LoopFillZerobss+0x22>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002826:	f005 f99f 	bl	8007b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800282a:	f7fe fd03 	bl	8001234 <main>
  bx  lr    
 800282e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002830:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002838:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 800283c:	0800b3f0 	.word	0x0800b3f0
  ldr r2, =_sbss
 8002840:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002844:	200007c8 	.word	0x200007c8

08002848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002848:	e7fe      	b.n	8002848 <ADC_IRQHandler>
	...

0800284c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002850:	4b0e      	ldr	r3, [pc, #56]	@ (800288c <HAL_Init+0x40>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0d      	ldr	r2, [pc, #52]	@ (800288c <HAL_Init+0x40>)
 8002856:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800285a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800285c:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <HAL_Init+0x40>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0a      	ldr	r2, [pc, #40]	@ (800288c <HAL_Init+0x40>)
 8002862:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002866:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002868:	4b08      	ldr	r3, [pc, #32]	@ (800288c <HAL_Init+0x40>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a07      	ldr	r2, [pc, #28]	@ (800288c <HAL_Init+0x40>)
 800286e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002874:	2003      	movs	r0, #3
 8002876:	f000 fbc1 	bl	8002ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800287a:	2000      	movs	r0, #0
 800287c:	f000 f808 	bl	8002890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002880:	f7ff fcda 	bl	8002238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40023c00 	.word	0x40023c00

08002890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002898:	4b12      	ldr	r3, [pc, #72]	@ (80028e4 <HAL_InitTick+0x54>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <HAL_InitTick+0x58>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	4619      	mov	r1, r3
 80028a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fbd9 	bl	8003066 <HAL_SYSTICK_Config>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e00e      	b.n	80028dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b0f      	cmp	r3, #15
 80028c2:	d80a      	bhi.n	80028da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028c4:	2200      	movs	r2, #0
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028cc:	f000 fba1 	bl	8003012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d0:	4a06      	ldr	r2, [pc, #24]	@ (80028ec <HAL_InitTick+0x5c>)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e000      	b.n	80028dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000028 	.word	0x20000028
 80028e8:	20000030 	.word	0x20000030
 80028ec:	2000002c 	.word	0x2000002c

080028f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028f4:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <HAL_IncTick+0x20>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <HAL_IncTick+0x24>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4413      	add	r3, r2
 8002900:	4a04      	ldr	r2, [pc, #16]	@ (8002914 <HAL_IncTick+0x24>)
 8002902:	6013      	str	r3, [r2, #0]
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20000030 	.word	0x20000030
 8002914:	20000678 	.word	0x20000678

08002918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return uwTick;
 800291c:	4b03      	ldr	r3, [pc, #12]	@ (800292c <HAL_GetTick+0x14>)
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000678 	.word	0x20000678

08002930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002938:	f7ff ffee 	bl	8002918 <HAL_GetTick>
 800293c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002948:	d005      	beq.n	8002956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800294a:	4b0a      	ldr	r3, [pc, #40]	@ (8002974 <HAL_Delay+0x44>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002956:	bf00      	nop
 8002958:	f7ff ffde 	bl	8002918 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	429a      	cmp	r2, r3
 8002966:	d8f7      	bhi.n	8002958 <HAL_Delay+0x28>
  {
  }
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000030 	.word	0x20000030

08002978 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e033      	b.n	80029f6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff fc76 	bl	8002288 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d118      	bne.n	80029e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029be:	f023 0302 	bic.w	r3, r3, #2
 80029c2:	f043 0202 	orr.w	r2, r3, #2
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f94a 	bl	8002c64 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	f023 0303 	bic.w	r3, r3, #3
 80029de:	f043 0201 	orr.w	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80029e6:	e001      	b.n	80029ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x1c>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e113      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x244>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b09      	cmp	r3, #9
 8002a2a:	d925      	bls.n	8002a78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68d9      	ldr	r1, [r3, #12]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	3b1e      	subs	r3, #30
 8002a42:	2207      	movs	r2, #7
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43da      	mvns	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	400a      	ands	r2, r1
 8002a50:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68d9      	ldr	r1, [r3, #12]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	4618      	mov	r0, r3
 8002a64:	4603      	mov	r3, r0
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4403      	add	r3, r0
 8002a6a:	3b1e      	subs	r3, #30
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	e022      	b.n	8002abe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6919      	ldr	r1, [r3, #16]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	4613      	mov	r3, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4413      	add	r3, r2
 8002a8c:	2207      	movs	r2, #7
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43da      	mvns	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	400a      	ands	r2, r1
 8002a9a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6919      	ldr	r1, [r3, #16]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	4618      	mov	r0, r3
 8002aae:	4603      	mov	r3, r0
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	4403      	add	r3, r0
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b06      	cmp	r3, #6
 8002ac4:	d824      	bhi.n	8002b10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3b05      	subs	r3, #5
 8002ad8:	221f      	movs	r2, #31
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	4618      	mov	r0, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	3b05      	subs	r3, #5
 8002b02:	fa00 f203 	lsl.w	r2, r0, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b0e:	e04c      	b.n	8002baa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b0c      	cmp	r3, #12
 8002b16:	d824      	bhi.n	8002b62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	3b23      	subs	r3, #35	@ 0x23
 8002b2a:	221f      	movs	r2, #31
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43da      	mvns	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	400a      	ands	r2, r1
 8002b38:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	4618      	mov	r0, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	3b23      	subs	r3, #35	@ 0x23
 8002b54:	fa00 f203 	lsl.w	r2, r0, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b60:	e023      	b.n	8002baa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	3b41      	subs	r3, #65	@ 0x41
 8002b74:	221f      	movs	r2, #31
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	400a      	ands	r2, r1
 8002b82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	4618      	mov	r0, r3
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3b41      	subs	r3, #65	@ 0x41
 8002b9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002baa:	4b29      	ldr	r3, [pc, #164]	@ (8002c50 <HAL_ADC_ConfigChannel+0x250>)
 8002bac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a28      	ldr	r2, [pc, #160]	@ (8002c54 <HAL_ADC_ConfigChannel+0x254>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d10f      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x1d8>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b12      	cmp	r3, #18
 8002bbe:	d10b      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c54 <HAL_ADC_ConfigChannel+0x254>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d12b      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x23a>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c58 <HAL_ADC_ConfigChannel+0x258>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d003      	beq.n	8002bf4 <HAL_ADC_ConfigChannel+0x1f4>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b11      	cmp	r3, #17
 8002bf2:	d122      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a11      	ldr	r2, [pc, #68]	@ (8002c58 <HAL_ADC_ConfigChannel+0x258>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d111      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c16:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <HAL_ADC_ConfigChannel+0x25c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a11      	ldr	r2, [pc, #68]	@ (8002c60 <HAL_ADC_ConfigChannel+0x260>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	0c9a      	lsrs	r2, r3, #18
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c2c:	e002      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f9      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	40012300 	.word	0x40012300
 8002c54:	40012000 	.word	0x40012000
 8002c58:	10000012 	.word	0x10000012
 8002c5c:	20000028 	.word	0x20000028
 8002c60:	431bde83 	.word	0x431bde83

08002c64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c6c:	4b79      	ldr	r3, [pc, #484]	@ (8002e54 <ADC_Init+0x1f0>)
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	431a      	orrs	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	021a      	lsls	r2, r3, #8
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002cbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6859      	ldr	r1, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6899      	ldr	r1, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf6:	4a58      	ldr	r2, [pc, #352]	@ (8002e58 <ADC_Init+0x1f4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d022      	beq.n	8002d42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6899      	ldr	r1, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6899      	ldr	r1, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	e00f      	b.n	8002d62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d60:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0202 	bic.w	r2, r2, #2
 8002d70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6899      	ldr	r1, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	7e1b      	ldrb	r3, [r3, #24]
 8002d7c:	005a      	lsls	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01b      	beq.n	8002dc8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d9e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002dae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6859      	ldr	r1, [r3, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	035a      	lsls	r2, r3, #13
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	e007      	b.n	8002dd8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dd6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002de6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	051a      	lsls	r2, r3, #20
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6899      	ldr	r1, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e1a:	025a      	lsls	r2, r3, #9
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6899      	ldr	r1, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	029a      	lsls	r2, r3, #10
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	609a      	str	r2, [r3, #8]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	40012300 	.word	0x40012300
 8002e58:	0f000001 	.word	0x0f000001

08002e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e8e:	4a04      	ldr	r2, [pc, #16]	@ (8002ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	60d3      	str	r3, [r2, #12]
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea8:	4b04      	ldr	r3, [pc, #16]	@ (8002ebc <__NVIC_GetPriorityGrouping+0x18>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	0a1b      	lsrs	r3, r3, #8
 8002eae:	f003 0307 	and.w	r3, r3, #7
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	db0b      	blt.n	8002eea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	f003 021f 	and.w	r2, r3, #31
 8002ed8:	4907      	ldr	r1, [pc, #28]	@ (8002ef8 <__NVIC_EnableIRQ+0x38>)
 8002eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	e000e100 	.word	0xe000e100

08002efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	6039      	str	r1, [r7, #0]
 8002f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	db0a      	blt.n	8002f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	490c      	ldr	r1, [pc, #48]	@ (8002f48 <__NVIC_SetPriority+0x4c>)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	0112      	lsls	r2, r2, #4
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	440b      	add	r3, r1
 8002f20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f24:	e00a      	b.n	8002f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	4908      	ldr	r1, [pc, #32]	@ (8002f4c <__NVIC_SetPriority+0x50>)
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	3b04      	subs	r3, #4
 8002f34:	0112      	lsls	r2, r2, #4
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	440b      	add	r3, r1
 8002f3a:	761a      	strb	r2, [r3, #24]
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000e100 	.word	0xe000e100
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b089      	sub	sp, #36	@ 0x24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f1c3 0307 	rsb	r3, r3, #7
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	bf28      	it	cs
 8002f6e:	2304      	movcs	r3, #4
 8002f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3304      	adds	r3, #4
 8002f76:	2b06      	cmp	r3, #6
 8002f78:	d902      	bls.n	8002f80 <NVIC_EncodePriority+0x30>
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3b03      	subs	r3, #3
 8002f7e:	e000      	b.n	8002f82 <NVIC_EncodePriority+0x32>
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	401a      	ands	r2, r3
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa2:	43d9      	mvns	r1, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa8:	4313      	orrs	r3, r2
         );
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3724      	adds	r7, #36	@ 0x24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fc8:	d301      	bcc.n	8002fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e00f      	b.n	8002fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fce:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff8 <SysTick_Config+0x40>)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fd6:	210f      	movs	r1, #15
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fdc:	f7ff ff8e 	bl	8002efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe0:	4b05      	ldr	r3, [pc, #20]	@ (8002ff8 <SysTick_Config+0x40>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fe6:	4b04      	ldr	r3, [pc, #16]	@ (8002ff8 <SysTick_Config+0x40>)
 8002fe8:	2207      	movs	r2, #7
 8002fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	e000e010 	.word	0xe000e010

08002ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff ff29 	bl	8002e5c <__NVIC_SetPriorityGrouping>
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af00      	add	r7, sp, #0
 8003018:	4603      	mov	r3, r0
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003024:	f7ff ff3e 	bl	8002ea4 <__NVIC_GetPriorityGrouping>
 8003028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	6978      	ldr	r0, [r7, #20]
 8003030:	f7ff ff8e 	bl	8002f50 <NVIC_EncodePriority>
 8003034:	4602      	mov	r2, r0
 8003036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff ff5d 	bl	8002efc <__NVIC_SetPriority>
}
 8003042:	bf00      	nop
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	4603      	mov	r3, r0
 8003052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ff31 	bl	8002ec0 <__NVIC_EnableIRQ>
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff ffa2 	bl	8002fb8 <SysTick_Config>
 8003074:	4603      	mov	r3, r0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800308c:	f7ff fc44 	bl	8002918 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e099      	b.n	80031d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030bc:	e00f      	b.n	80030de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030be:	f7ff fc2b 	bl	8002918 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b05      	cmp	r3, #5
 80030ca:	d908      	bls.n	80030de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2203      	movs	r2, #3
 80030d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e078      	b.n	80031d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e8      	bne.n	80030be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4b38      	ldr	r3, [pc, #224]	@ (80031d8 <HAL_DMA_Init+0x158>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800310a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003116:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003122:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003134:	2b04      	cmp	r3, #4
 8003136:	d107      	bne.n	8003148 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003140:	4313      	orrs	r3, r2
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f023 0307 	bic.w	r3, r3, #7
 800315e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316e:	2b04      	cmp	r3, #4
 8003170:	d117      	bne.n	80031a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00e      	beq.n	80031a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fb01 	bl	800378c <DMA_CheckFifoParam>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2240      	movs	r2, #64	@ 0x40
 8003194:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800319e:	2301      	movs	r3, #1
 80031a0:	e016      	b.n	80031d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fab8 	bl	8003720 <DMA_CalcBaseAndBitshift>
 80031b0:	4603      	mov	r3, r0
 80031b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b8:	223f      	movs	r2, #63	@ 0x3f
 80031ba:	409a      	lsls	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	f010803f 	.word	0xf010803f

080031dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_DMA_Start_IT+0x26>
 80031fe:	2302      	movs	r3, #2
 8003200:	e040      	b.n	8003284 <HAL_DMA_Start_IT+0xa8>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b01      	cmp	r3, #1
 8003214:	d12f      	bne.n	8003276 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2202      	movs	r2, #2
 800321a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 fa4a 	bl	80036c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003234:	223f      	movs	r2, #63	@ 0x3f
 8003236:	409a      	lsls	r2, r3
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0216 	orr.w	r2, r2, #22
 800324a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003250:	2b00      	cmp	r3, #0
 8003252:	d007      	beq.n	8003264 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0208 	orr.w	r2, r2, #8
 8003262:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	e005      	b.n	8003282 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800327e:	2302      	movs	r3, #2
 8003280:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003282:	7dfb      	ldrb	r3, [r7, #23]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003298:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800329a:	f7ff fb3d 	bl	8002918 <HAL_GetTick>
 800329e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d008      	beq.n	80032be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2280      	movs	r2, #128	@ 0x80
 80032b0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e052      	b.n	8003364 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0216 	bic.w	r2, r2, #22
 80032cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695a      	ldr	r2, [r3, #20]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d103      	bne.n	80032ee <HAL_DMA_Abort+0x62>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0208 	bic.w	r2, r2, #8
 80032fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0201 	bic.w	r2, r2, #1
 800330c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800330e:	e013      	b.n	8003338 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003310:	f7ff fb02 	bl	8002918 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b05      	cmp	r3, #5
 800331c:	d90c      	bls.n	8003338 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2203      	movs	r2, #3
 8003328:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e015      	b.n	8003364 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e4      	bne.n	8003310 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334a:	223f      	movs	r2, #63	@ 0x3f
 800334c:	409a      	lsls	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d004      	beq.n	800338a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2280      	movs	r2, #128	@ 0x80
 8003384:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e00c      	b.n	80033a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2205      	movs	r2, #5
 800338e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0201 	bic.w	r2, r2, #1
 80033a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033bc:	4b8e      	ldr	r3, [pc, #568]	@ (80035f8 <HAL_DMA_IRQHandler+0x248>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a8e      	ldr	r2, [pc, #568]	@ (80035fc <HAL_DMA_IRQHandler+0x24c>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	0a9b      	lsrs	r3, r3, #10
 80033c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033da:	2208      	movs	r2, #8
 80033dc:	409a      	lsls	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d01a      	beq.n	800341c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d013      	beq.n	800341c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0204 	bic.w	r2, r2, #4
 8003402:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003408:	2208      	movs	r2, #8
 800340a:	409a      	lsls	r2, r3
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003414:	f043 0201 	orr.w	r2, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003420:	2201      	movs	r2, #1
 8003422:	409a      	lsls	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4013      	ands	r3, r2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d012      	beq.n	8003452 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00b      	beq.n	8003452 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343e:	2201      	movs	r2, #1
 8003440:	409a      	lsls	r2, r3
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344a:	f043 0202 	orr.w	r2, r3, #2
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003456:	2204      	movs	r2, #4
 8003458:	409a      	lsls	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d012      	beq.n	8003488 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00b      	beq.n	8003488 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003474:	2204      	movs	r2, #4
 8003476:	409a      	lsls	r2, r3
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003480:	f043 0204 	orr.w	r2, r3, #4
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348c:	2210      	movs	r2, #16
 800348e:	409a      	lsls	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4013      	ands	r3, r2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d043      	beq.n	8003520 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d03c      	beq.n	8003520 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034aa:	2210      	movs	r2, #16
 80034ac:	409a      	lsls	r2, r3
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d018      	beq.n	80034f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d108      	bne.n	80034e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d024      	beq.n	8003520 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
 80034de:	e01f      	b.n	8003520 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01b      	beq.n	8003520 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	4798      	blx	r3
 80034f0:	e016      	b.n	8003520 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d107      	bne.n	8003510 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0208 	bic.w	r2, r2, #8
 800350e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003524:	2220      	movs	r2, #32
 8003526:	409a      	lsls	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4013      	ands	r3, r2
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 808f 	beq.w	8003650 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 8087 	beq.w	8003650 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003546:	2220      	movs	r2, #32
 8003548:	409a      	lsls	r2, r3
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b05      	cmp	r3, #5
 8003558:	d136      	bne.n	80035c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0216 	bic.w	r2, r2, #22
 8003568:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003578:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d103      	bne.n	800358a <HAL_DMA_IRQHandler+0x1da>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0208 	bic.w	r2, r2, #8
 8003598:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359e:	223f      	movs	r2, #63	@ 0x3f
 80035a0:	409a      	lsls	r2, r3
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d07e      	beq.n	80036bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	4798      	blx	r3
        }
        return;
 80035c6:	e079      	b.n	80036bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01d      	beq.n	8003612 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10d      	bne.n	8003600 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d031      	beq.n	8003650 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
 80035f4:	e02c      	b.n	8003650 <HAL_DMA_IRQHandler+0x2a0>
 80035f6:	bf00      	nop
 80035f8:	20000028 	.word	0x20000028
 80035fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003604:	2b00      	cmp	r3, #0
 8003606:	d023      	beq.n	8003650 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
 8003610:	e01e      	b.n	8003650 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10f      	bne.n	8003640 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0210 	bic.w	r2, r2, #16
 800362e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003654:	2b00      	cmp	r3, #0
 8003656:	d032      	beq.n	80036be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d022      	beq.n	80036aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2205      	movs	r2, #5
 8003668:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	3301      	adds	r3, #1
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	429a      	cmp	r2, r3
 8003686:	d307      	bcc.n	8003698 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f2      	bne.n	800367c <HAL_DMA_IRQHandler+0x2cc>
 8003696:	e000      	b.n	800369a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003698:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	4798      	blx	r3
 80036ba:	e000      	b.n	80036be <HAL_DMA_IRQHandler+0x30e>
        return;
 80036bc:	bf00      	nop
    }
  }
}
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80036e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b40      	cmp	r3, #64	@ 0x40
 80036f0:	d108      	bne.n	8003704 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003702:	e007      	b.n	8003714 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	60da      	str	r2, [r3, #12]
}
 8003714:	bf00      	nop
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	3b10      	subs	r3, #16
 8003730:	4a14      	ldr	r2, [pc, #80]	@ (8003784 <DMA_CalcBaseAndBitshift+0x64>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	091b      	lsrs	r3, r3, #4
 8003738:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800373a:	4a13      	ldr	r2, [pc, #76]	@ (8003788 <DMA_CalcBaseAndBitshift+0x68>)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4413      	add	r3, r2
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d909      	bls.n	8003762 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003756:	f023 0303 	bic.w	r3, r3, #3
 800375a:	1d1a      	adds	r2, r3, #4
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003760:	e007      	b.n	8003772 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800376a:	f023 0303 	bic.w	r3, r3, #3
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	aaaaaaab 	.word	0xaaaaaaab
 8003788:	0800b068 	.word	0x0800b068

0800378c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d11f      	bne.n	80037e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d856      	bhi.n	800385a <DMA_CheckFifoParam+0xce>
 80037ac:	a201      	add	r2, pc, #4	@ (adr r2, 80037b4 <DMA_CheckFifoParam+0x28>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037c5 	.word	0x080037c5
 80037b8:	080037d7 	.word	0x080037d7
 80037bc:	080037c5 	.word	0x080037c5
 80037c0:	0800385b 	.word	0x0800385b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d046      	beq.n	800385e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d4:	e043      	b.n	800385e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037de:	d140      	bne.n	8003862 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e4:	e03d      	b.n	8003862 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ee:	d121      	bne.n	8003834 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	d837      	bhi.n	8003866 <DMA_CheckFifoParam+0xda>
 80037f6:	a201      	add	r2, pc, #4	@ (adr r2, 80037fc <DMA_CheckFifoParam+0x70>)
 80037f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fc:	0800380d 	.word	0x0800380d
 8003800:	08003813 	.word	0x08003813
 8003804:	0800380d 	.word	0x0800380d
 8003808:	08003825 	.word	0x08003825
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
      break;
 8003810:	e030      	b.n	8003874 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003816:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d025      	beq.n	800386a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003822:	e022      	b.n	800386a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003828:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800382c:	d11f      	bne.n	800386e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003832:	e01c      	b.n	800386e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d903      	bls.n	8003842 <DMA_CheckFifoParam+0xb6>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b03      	cmp	r3, #3
 800383e:	d003      	beq.n	8003848 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003840:	e018      	b.n	8003874 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
      break;
 8003846:	e015      	b.n	8003874 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00e      	beq.n	8003872 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      break;
 8003858:	e00b      	b.n	8003872 <DMA_CheckFifoParam+0xe6>
      break;
 800385a:	bf00      	nop
 800385c:	e00a      	b.n	8003874 <DMA_CheckFifoParam+0xe8>
      break;
 800385e:	bf00      	nop
 8003860:	e008      	b.n	8003874 <DMA_CheckFifoParam+0xe8>
      break;
 8003862:	bf00      	nop
 8003864:	e006      	b.n	8003874 <DMA_CheckFifoParam+0xe8>
      break;
 8003866:	bf00      	nop
 8003868:	e004      	b.n	8003874 <DMA_CheckFifoParam+0xe8>
      break;
 800386a:	bf00      	nop
 800386c:	e002      	b.n	8003874 <DMA_CheckFifoParam+0xe8>
      break;   
 800386e:	bf00      	nop
 8003870:	e000      	b.n	8003874 <DMA_CheckFifoParam+0xe8>
      break;
 8003872:	bf00      	nop
    }
  } 
  
  return status; 
 8003874:	7bfb      	ldrb	r3, [r7, #15]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop

08003884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003884:	b480      	push	{r7}
 8003886:	b089      	sub	sp, #36	@ 0x24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003896:	2300      	movs	r3, #0
 8003898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	e159      	b.n	8003b54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038a0:	2201      	movs	r2, #1
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	f040 8148 	bne.w	8003b4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d005      	beq.n	80038d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d130      	bne.n	8003938 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	2203      	movs	r2, #3
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43db      	mvns	r3, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4013      	ands	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800390c:	2201      	movs	r2, #1
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4013      	ands	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 0201 	and.w	r2, r3, #1
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	2b03      	cmp	r3, #3
 8003942:	d017      	beq.n	8003974 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	2203      	movs	r2, #3
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d123      	bne.n	80039c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	08da      	lsrs	r2, r3, #3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3208      	adds	r2, #8
 8003988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800398c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	220f      	movs	r2, #15
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	08da      	lsrs	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3208      	adds	r2, #8
 80039c2:	69b9      	ldr	r1, [r7, #24]
 80039c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	2203      	movs	r2, #3
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 0203 	and.w	r2, r3, #3
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80a2 	beq.w	8003b4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	4b57      	ldr	r3, [pc, #348]	@ (8003b6c <HAL_GPIO_Init+0x2e8>)
 8003a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a12:	4a56      	ldr	r2, [pc, #344]	@ (8003b6c <HAL_GPIO_Init+0x2e8>)
 8003a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a1a:	4b54      	ldr	r3, [pc, #336]	@ (8003b6c <HAL_GPIO_Init+0x2e8>)
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a26:	4a52      	ldr	r2, [pc, #328]	@ (8003b70 <HAL_GPIO_Init+0x2ec>)
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	089b      	lsrs	r3, r3, #2
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	220f      	movs	r2, #15
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43db      	mvns	r3, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4013      	ands	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a49      	ldr	r2, [pc, #292]	@ (8003b74 <HAL_GPIO_Init+0x2f0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d019      	beq.n	8003a86 <HAL_GPIO_Init+0x202>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a48      	ldr	r2, [pc, #288]	@ (8003b78 <HAL_GPIO_Init+0x2f4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d013      	beq.n	8003a82 <HAL_GPIO_Init+0x1fe>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a47      	ldr	r2, [pc, #284]	@ (8003b7c <HAL_GPIO_Init+0x2f8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00d      	beq.n	8003a7e <HAL_GPIO_Init+0x1fa>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a46      	ldr	r2, [pc, #280]	@ (8003b80 <HAL_GPIO_Init+0x2fc>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d007      	beq.n	8003a7a <HAL_GPIO_Init+0x1f6>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a45      	ldr	r2, [pc, #276]	@ (8003b84 <HAL_GPIO_Init+0x300>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d101      	bne.n	8003a76 <HAL_GPIO_Init+0x1f2>
 8003a72:	2304      	movs	r3, #4
 8003a74:	e008      	b.n	8003a88 <HAL_GPIO_Init+0x204>
 8003a76:	2307      	movs	r3, #7
 8003a78:	e006      	b.n	8003a88 <HAL_GPIO_Init+0x204>
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e004      	b.n	8003a88 <HAL_GPIO_Init+0x204>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e002      	b.n	8003a88 <HAL_GPIO_Init+0x204>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <HAL_GPIO_Init+0x204>
 8003a86:	2300      	movs	r3, #0
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	f002 0203 	and.w	r2, r2, #3
 8003a8e:	0092      	lsls	r2, r2, #2
 8003a90:	4093      	lsls	r3, r2
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a98:	4935      	ldr	r1, [pc, #212]	@ (8003b70 <HAL_GPIO_Init+0x2ec>)
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	089b      	lsrs	r3, r3, #2
 8003a9e:	3302      	adds	r3, #2
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aa6:	4b38      	ldr	r3, [pc, #224]	@ (8003b88 <HAL_GPIO_Init+0x304>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aca:	4a2f      	ldr	r2, [pc, #188]	@ (8003b88 <HAL_GPIO_Init+0x304>)
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8003b88 <HAL_GPIO_Init+0x304>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4013      	ands	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003af4:	4a24      	ldr	r2, [pc, #144]	@ (8003b88 <HAL_GPIO_Init+0x304>)
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003afa:	4b23      	ldr	r3, [pc, #140]	@ (8003b88 <HAL_GPIO_Init+0x304>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	43db      	mvns	r3, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4013      	ands	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8003b88 <HAL_GPIO_Init+0x304>)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b24:	4b18      	ldr	r3, [pc, #96]	@ (8003b88 <HAL_GPIO_Init+0x304>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b48:	4a0f      	ldr	r2, [pc, #60]	@ (8003b88 <HAL_GPIO_Init+0x304>)
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	3301      	adds	r3, #1
 8003b52:	61fb      	str	r3, [r7, #28]
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	2b0f      	cmp	r3, #15
 8003b58:	f67f aea2 	bls.w	80038a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	bf00      	nop
 8003b60:	3724      	adds	r7, #36	@ 0x24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	40013800 	.word	0x40013800
 8003b74:	40020000 	.word	0x40020000
 8003b78:	40020400 	.word	0x40020400
 8003b7c:	40020800 	.word	0x40020800
 8003b80:	40020c00 	.word	0x40020c00
 8003b84:	40021000 	.word	0x40021000
 8003b88:	40013c00 	.word	0x40013c00

08003b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	807b      	strh	r3, [r7, #2]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b9c:	787b      	ldrb	r3, [r7, #1]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ba2:	887a      	ldrh	r2, [r7, #2]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ba8:	e003      	b.n	8003bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003baa:	887b      	ldrh	r3, [r7, #2]
 8003bac:	041a      	lsls	r2, r3, #16
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	619a      	str	r2, [r3, #24]
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
	...

08003bc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e12b      	b.n	8003e2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d106      	bne.n	8003bec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7fe fb92 	bl	8002310 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2224      	movs	r2, #36	@ 0x24
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0201 	bic.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c24:	f001 fc60 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 8003c28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	4a81      	ldr	r2, [pc, #516]	@ (8003e34 <HAL_I2C_Init+0x274>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d807      	bhi.n	8003c44 <HAL_I2C_Init+0x84>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4a80      	ldr	r2, [pc, #512]	@ (8003e38 <HAL_I2C_Init+0x278>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	bf94      	ite	ls
 8003c3c:	2301      	movls	r3, #1
 8003c3e:	2300      	movhi	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	e006      	b.n	8003c52 <HAL_I2C_Init+0x92>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4a7d      	ldr	r2, [pc, #500]	@ (8003e3c <HAL_I2C_Init+0x27c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	bf94      	ite	ls
 8003c4c:	2301      	movls	r3, #1
 8003c4e:	2300      	movhi	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e0e7      	b.n	8003e2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4a78      	ldr	r2, [pc, #480]	@ (8003e40 <HAL_I2C_Init+0x280>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	0c9b      	lsrs	r3, r3, #18
 8003c64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	4a6a      	ldr	r2, [pc, #424]	@ (8003e34 <HAL_I2C_Init+0x274>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d802      	bhi.n	8003c94 <HAL_I2C_Init+0xd4>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	3301      	adds	r3, #1
 8003c92:	e009      	b.n	8003ca8 <HAL_I2C_Init+0xe8>
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c9a:	fb02 f303 	mul.w	r3, r2, r3
 8003c9e:	4a69      	ldr	r2, [pc, #420]	@ (8003e44 <HAL_I2C_Init+0x284>)
 8003ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca4:	099b      	lsrs	r3, r3, #6
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	430b      	orrs	r3, r1
 8003cae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003cba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	495c      	ldr	r1, [pc, #368]	@ (8003e34 <HAL_I2C_Init+0x274>)
 8003cc4:	428b      	cmp	r3, r1
 8003cc6:	d819      	bhi.n	8003cfc <HAL_I2C_Init+0x13c>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	1e59      	subs	r1, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cd6:	1c59      	adds	r1, r3, #1
 8003cd8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cdc:	400b      	ands	r3, r1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_I2C_Init+0x138>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1e59      	subs	r1, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf6:	e051      	b.n	8003d9c <HAL_I2C_Init+0x1dc>
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	e04f      	b.n	8003d9c <HAL_I2C_Init+0x1dc>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d111      	bne.n	8003d28 <HAL_I2C_Init+0x168>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1e58      	subs	r0, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6859      	ldr	r1, [r3, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	440b      	add	r3, r1
 8003d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d16:	3301      	adds	r3, #1
 8003d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	bf0c      	ite	eq
 8003d20:	2301      	moveq	r3, #1
 8003d22:	2300      	movne	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	e012      	b.n	8003d4e <HAL_I2C_Init+0x18e>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	1e58      	subs	r0, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	0099      	lsls	r1, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3e:	3301      	adds	r3, #1
 8003d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	bf0c      	ite	eq
 8003d48:	2301      	moveq	r3, #1
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_I2C_Init+0x196>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e022      	b.n	8003d9c <HAL_I2C_Init+0x1dc>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10e      	bne.n	8003d7c <HAL_I2C_Init+0x1bc>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	1e58      	subs	r0, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6859      	ldr	r1, [r3, #4]
 8003d66:	460b      	mov	r3, r1
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	440b      	add	r3, r1
 8003d6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d70:	3301      	adds	r3, #1
 8003d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d7a:	e00f      	b.n	8003d9c <HAL_I2C_Init+0x1dc>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1e58      	subs	r0, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6859      	ldr	r1, [r3, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	0099      	lsls	r1, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d92:	3301      	adds	r3, #1
 8003d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	6809      	ldr	r1, [r1, #0]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69da      	ldr	r2, [r3, #28]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003dca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6911      	ldr	r1, [r2, #16]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	68d2      	ldr	r2, [r2, #12]
 8003dd6:	4311      	orrs	r1, r2
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6812      	ldr	r2, [r2, #0]
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695a      	ldr	r2, [r3, #20]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	000186a0 	.word	0x000186a0
 8003e38:	001e847f 	.word	0x001e847f
 8003e3c:	003d08ff 	.word	0x003d08ff
 8003e40:	431bde83 	.word	0x431bde83
 8003e44:	10624dd3 	.word	0x10624dd3

08003e48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	4608      	mov	r0, r1
 8003e52:	4611      	mov	r1, r2
 8003e54:	461a      	mov	r2, r3
 8003e56:	4603      	mov	r3, r0
 8003e58:	817b      	strh	r3, [r7, #10]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	813b      	strh	r3, [r7, #8]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e62:	f7fe fd59 	bl	8002918 <HAL_GetTick>
 8003e66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	f040 80d9 	bne.w	8004028 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	2319      	movs	r3, #25
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	496d      	ldr	r1, [pc, #436]	@ (8004034 <HAL_I2C_Mem_Write+0x1ec>)
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 fc8b 	bl	800479c <I2C_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e0cc      	b.n	800402a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_I2C_Mem_Write+0x56>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e0c5      	b.n	800402a <HAL_I2C_Mem_Write+0x1e2>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d007      	beq.n	8003ec4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ed2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2221      	movs	r2, #33	@ 0x21
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2240      	movs	r2, #64	@ 0x40
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a3a      	ldr	r2, [r7, #32]
 8003eee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4a4d      	ldr	r2, [pc, #308]	@ (8004038 <HAL_I2C_Mem_Write+0x1f0>)
 8003f04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f06:	88f8      	ldrh	r0, [r7, #6]
 8003f08:	893a      	ldrh	r2, [r7, #8]
 8003f0a:	8979      	ldrh	r1, [r7, #10]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	9301      	str	r3, [sp, #4]
 8003f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	4603      	mov	r3, r0
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fac2 	bl	80044a0 <I2C_RequestMemoryWrite>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d052      	beq.n	8003fc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e081      	b.n	800402a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 fd50 	bl	80049d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d107      	bne.n	8003f4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e06b      	b.n	800402a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f56:	781a      	ldrb	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d11b      	bne.n	8003fc8 <HAL_I2C_Mem_Write+0x180>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d017      	beq.n	8003fc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	781a      	ldrb	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1aa      	bne.n	8003f26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 fd43 	bl	8004a60 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00d      	beq.n	8003ffc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d107      	bne.n	8003ff8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e016      	b.n	800402a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800400a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e000      	b.n	800402a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004028:	2302      	movs	r3, #2
  }
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	00100002 	.word	0x00100002
 8004038:	ffff0000 	.word	0xffff0000

0800403c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08c      	sub	sp, #48	@ 0x30
 8004040:	af02      	add	r7, sp, #8
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	4608      	mov	r0, r1
 8004046:	4611      	mov	r1, r2
 8004048:	461a      	mov	r2, r3
 800404a:	4603      	mov	r3, r0
 800404c:	817b      	strh	r3, [r7, #10]
 800404e:	460b      	mov	r3, r1
 8004050:	813b      	strh	r3, [r7, #8]
 8004052:	4613      	mov	r3, r2
 8004054:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004056:	f7fe fc5f 	bl	8002918 <HAL_GetTick>
 800405a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b20      	cmp	r3, #32
 8004066:	f040 8214 	bne.w	8004492 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	2319      	movs	r3, #25
 8004070:	2201      	movs	r2, #1
 8004072:	497b      	ldr	r1, [pc, #492]	@ (8004260 <HAL_I2C_Mem_Read+0x224>)
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 fb91 	bl	800479c <I2C_WaitOnFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004080:	2302      	movs	r3, #2
 8004082:	e207      	b.n	8004494 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_I2C_Mem_Read+0x56>
 800408e:	2302      	movs	r3, #2
 8004090:	e200      	b.n	8004494 <HAL_I2C_Mem_Read+0x458>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d007      	beq.n	80040b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2222      	movs	r2, #34	@ 0x22
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2240      	movs	r2, #64	@ 0x40
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80040e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4a5b      	ldr	r2, [pc, #364]	@ (8004264 <HAL_I2C_Mem_Read+0x228>)
 80040f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040fa:	88f8      	ldrh	r0, [r7, #6]
 80040fc:	893a      	ldrh	r2, [r7, #8]
 80040fe:	8979      	ldrh	r1, [r7, #10]
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	4603      	mov	r3, r0
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 fa5e 	bl	80045cc <I2C_RequestMemoryRead>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e1bc      	b.n	8004494 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411e:	2b00      	cmp	r3, #0
 8004120:	d113      	bne.n	800414a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004122:	2300      	movs	r3, #0
 8004124:	623b      	str	r3, [r7, #32]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	623b      	str	r3, [r7, #32]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	623b      	str	r3, [r7, #32]
 8004136:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	e190      	b.n	800446c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414e:	2b01      	cmp	r3, #1
 8004150:	d11b      	bne.n	800418a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004160:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	61fb      	str	r3, [r7, #28]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	61fb      	str	r3, [r7, #28]
 8004176:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	e170      	b.n	800446c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800418e:	2b02      	cmp	r3, #2
 8004190:	d11b      	bne.n	80041ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b2:	2300      	movs	r3, #0
 80041b4:	61bb      	str	r3, [r7, #24]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	61bb      	str	r3, [r7, #24]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	61bb      	str	r3, [r7, #24]
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	e150      	b.n	800446c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041e0:	e144      	b.n	800446c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	f200 80f1 	bhi.w	80043ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d123      	bne.n	800423c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fc79 	bl	8004af0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e145      	b.n	8004494 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800423a:	e117      	b.n	800446c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004240:	2b02      	cmp	r3, #2
 8004242:	d14e      	bne.n	80042e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424a:	2200      	movs	r2, #0
 800424c:	4906      	ldr	r1, [pc, #24]	@ (8004268 <HAL_I2C_Mem_Read+0x22c>)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 faa4 	bl	800479c <I2C_WaitOnFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d008      	beq.n	800426c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e11a      	b.n	8004494 <HAL_I2C_Mem_Read+0x458>
 800425e:	bf00      	nop
 8004260:	00100002 	.word	0x00100002
 8004264:	ffff0000 	.word	0xffff0000
 8004268:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800427a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042e0:	e0c4      	b.n	800446c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e8:	2200      	movs	r2, #0
 80042ea:	496c      	ldr	r1, [pc, #432]	@ (800449c <HAL_I2C_Mem_Read+0x460>)
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 fa55 	bl	800479c <I2C_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0cb      	b.n	8004494 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800430a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691a      	ldr	r2, [r3, #16]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004344:	2200      	movs	r2, #0
 8004346:	4955      	ldr	r1, [pc, #340]	@ (800449c <HAL_I2C_Mem_Read+0x460>)
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 fa27 	bl	800479c <I2C_WaitOnFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e09d      	b.n	8004494 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004366:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043cc:	e04e      	b.n	800446c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 fb8c 	bl	8004af0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e058      	b.n	8004494 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b04      	cmp	r3, #4
 8004420:	d124      	bne.n	800446c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004426:	2b03      	cmp	r3, #3
 8004428:	d107      	bne.n	800443a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004438:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004470:	2b00      	cmp	r3, #0
 8004472:	f47f aeb6 	bne.w	80041e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2220      	movs	r2, #32
 800447a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	e000      	b.n	8004494 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004492:	2302      	movs	r3, #2
  }
}
 8004494:	4618      	mov	r0, r3
 8004496:	3728      	adds	r7, #40	@ 0x28
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	00010004 	.word	0x00010004

080044a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	4608      	mov	r0, r1
 80044aa:	4611      	mov	r1, r2
 80044ac:	461a      	mov	r2, r3
 80044ae:	4603      	mov	r3, r0
 80044b0:	817b      	strh	r3, [r7, #10]
 80044b2:	460b      	mov	r3, r1
 80044b4:	813b      	strh	r3, [r7, #8]
 80044b6:	4613      	mov	r3, r2
 80044b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f960 	bl	800479c <I2C_WaitOnFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00d      	beq.n	80044fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044f0:	d103      	bne.n	80044fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e05f      	b.n	80045be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044fe:	897b      	ldrh	r3, [r7, #10]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	461a      	mov	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800450c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800450e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004510:	6a3a      	ldr	r2, [r7, #32]
 8004512:	492d      	ldr	r1, [pc, #180]	@ (80045c8 <I2C_RequestMemoryWrite+0x128>)
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 f9bb 	bl	8004890 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e04c      	b.n	80045be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800453a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800453c:	6a39      	ldr	r1, [r7, #32]
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 fa46 	bl	80049d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00d      	beq.n	8004566 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454e:	2b04      	cmp	r3, #4
 8004550:	d107      	bne.n	8004562 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004560:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e02b      	b.n	80045be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d105      	bne.n	8004578 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800456c:	893b      	ldrh	r3, [r7, #8]
 800456e:	b2da      	uxtb	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	611a      	str	r2, [r3, #16]
 8004576:	e021      	b.n	80045bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004578:	893b      	ldrh	r3, [r7, #8]
 800457a:	0a1b      	lsrs	r3, r3, #8
 800457c:	b29b      	uxth	r3, r3
 800457e:	b2da      	uxtb	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004588:	6a39      	ldr	r1, [r7, #32]
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 fa20 	bl	80049d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00d      	beq.n	80045b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	2b04      	cmp	r3, #4
 800459c:	d107      	bne.n	80045ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e005      	b.n	80045be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045b2:	893b      	ldrh	r3, [r7, #8]
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	00010002 	.word	0x00010002

080045cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	4608      	mov	r0, r1
 80045d6:	4611      	mov	r1, r2
 80045d8:	461a      	mov	r2, r3
 80045da:	4603      	mov	r3, r0
 80045dc:	817b      	strh	r3, [r7, #10]
 80045de:	460b      	mov	r3, r1
 80045e0:	813b      	strh	r3, [r7, #8]
 80045e2:	4613      	mov	r3, r2
 80045e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004604:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	2200      	movs	r2, #0
 800460e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f8c2 	bl	800479c <I2C_WaitOnFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00d      	beq.n	800463a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800462c:	d103      	bne.n	8004636 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004634:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e0aa      	b.n	8004790 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800463a:	897b      	ldrh	r3, [r7, #10]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	461a      	mov	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004648:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	6a3a      	ldr	r2, [r7, #32]
 800464e:	4952      	ldr	r1, [pc, #328]	@ (8004798 <I2C_RequestMemoryRead+0x1cc>)
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f91d 	bl	8004890 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e097      	b.n	8004790 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004678:	6a39      	ldr	r1, [r7, #32]
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f9a8 	bl	80049d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00d      	beq.n	80046a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468a:	2b04      	cmp	r3, #4
 800468c:	d107      	bne.n	800469e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800469c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e076      	b.n	8004790 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d105      	bne.n	80046b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046a8:	893b      	ldrh	r3, [r7, #8]
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	611a      	str	r2, [r3, #16]
 80046b2:	e021      	b.n	80046f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046b4:	893b      	ldrh	r3, [r7, #8]
 80046b6:	0a1b      	lsrs	r3, r3, #8
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046c4:	6a39      	ldr	r1, [r7, #32]
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 f982 	bl	80049d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00d      	beq.n	80046ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d107      	bne.n	80046ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e050      	b.n	8004790 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046ee:	893b      	ldrh	r3, [r7, #8]
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046fa:	6a39      	ldr	r1, [r7, #32]
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 f967 	bl	80049d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00d      	beq.n	8004724 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470c:	2b04      	cmp	r3, #4
 800470e:	d107      	bne.n	8004720 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800471e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e035      	b.n	8004790 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004732:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	2200      	movs	r2, #0
 800473c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 f82b 	bl	800479c <I2C_WaitOnFlagUntilTimeout>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00d      	beq.n	8004768 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004756:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800475a:	d103      	bne.n	8004764 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004762:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e013      	b.n	8004790 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004768:	897b      	ldrh	r3, [r7, #10]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f043 0301 	orr.w	r3, r3, #1
 8004770:	b2da      	uxtb	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477a:	6a3a      	ldr	r2, [r7, #32]
 800477c:	4906      	ldr	r1, [pc, #24]	@ (8004798 <I2C_RequestMemoryRead+0x1cc>)
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 f886 	bl	8004890 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	00010002 	.word	0x00010002

0800479c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	4613      	mov	r3, r2
 80047aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ac:	e048      	b.n	8004840 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047b4:	d044      	beq.n	8004840 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b6:	f7fe f8af 	bl	8002918 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d302      	bcc.n	80047cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d139      	bne.n	8004840 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d10d      	bne.n	80047f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	43da      	mvns	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4013      	ands	r3, r2
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bf0c      	ite	eq
 80047e8:	2301      	moveq	r3, #1
 80047ea:	2300      	movne	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	e00c      	b.n	800480c <I2C_WaitOnFlagUntilTimeout+0x70>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	43da      	mvns	r2, r3
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	4013      	ands	r3, r2
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	429a      	cmp	r2, r3
 8004810:	d116      	bne.n	8004840 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482c:	f043 0220 	orr.w	r2, r3, #32
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e023      	b.n	8004888 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	0c1b      	lsrs	r3, r3, #16
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b01      	cmp	r3, #1
 8004848:	d10d      	bne.n	8004866 <I2C_WaitOnFlagUntilTimeout+0xca>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	43da      	mvns	r2, r3
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	4013      	ands	r3, r2
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	bf0c      	ite	eq
 800485c:	2301      	moveq	r3, #1
 800485e:	2300      	movne	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	461a      	mov	r2, r3
 8004864:	e00c      	b.n	8004880 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	43da      	mvns	r2, r3
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4013      	ands	r3, r2
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	bf0c      	ite	eq
 8004878:	2301      	moveq	r3, #1
 800487a:	2300      	movne	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	461a      	mov	r2, r3
 8004880:	79fb      	ldrb	r3, [r7, #7]
 8004882:	429a      	cmp	r2, r3
 8004884:	d093      	beq.n	80047ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800489e:	e071      	b.n	8004984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ae:	d123      	bne.n	80048f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e4:	f043 0204 	orr.w	r2, r3, #4
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e067      	b.n	80049c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048fe:	d041      	beq.n	8004984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004900:	f7fe f80a 	bl	8002918 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	429a      	cmp	r2, r3
 800490e:	d302      	bcc.n	8004916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d136      	bne.n	8004984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	0c1b      	lsrs	r3, r3, #16
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b01      	cmp	r3, #1
 800491e:	d10c      	bne.n	800493a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	43da      	mvns	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	4013      	ands	r3, r2
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	bf14      	ite	ne
 8004932:	2301      	movne	r3, #1
 8004934:	2300      	moveq	r3, #0
 8004936:	b2db      	uxtb	r3, r3
 8004938:	e00b      	b.n	8004952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	43da      	mvns	r2, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	4013      	ands	r3, r2
 8004946:	b29b      	uxth	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	bf14      	ite	ne
 800494c:	2301      	movne	r3, #1
 800494e:	2300      	moveq	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d016      	beq.n	8004984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004970:	f043 0220 	orr.w	r2, r3, #32
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e021      	b.n	80049c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	0c1b      	lsrs	r3, r3, #16
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b01      	cmp	r3, #1
 800498c:	d10c      	bne.n	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	43da      	mvns	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	4013      	ands	r3, r2
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	bf14      	ite	ne
 80049a0:	2301      	movne	r3, #1
 80049a2:	2300      	moveq	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	e00b      	b.n	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	43da      	mvns	r2, r3
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4013      	ands	r3, r2
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bf14      	ite	ne
 80049ba:	2301      	movne	r3, #1
 80049bc:	2300      	moveq	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f47f af6d 	bne.w	80048a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049dc:	e034      	b.n	8004a48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f8e3 	bl	8004baa <I2C_IsAcknowledgeFailed>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e034      	b.n	8004a58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049f4:	d028      	beq.n	8004a48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f6:	f7fd ff8f 	bl	8002918 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d302      	bcc.n	8004a0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d11d      	bne.n	8004a48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a16:	2b80      	cmp	r3, #128	@ 0x80
 8004a18:	d016      	beq.n	8004a48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a34:	f043 0220 	orr.w	r2, r3, #32
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e007      	b.n	8004a58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a52:	2b80      	cmp	r3, #128	@ 0x80
 8004a54:	d1c3      	bne.n	80049de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a6c:	e034      	b.n	8004ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f89b 	bl	8004baa <I2C_IsAcknowledgeFailed>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e034      	b.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a84:	d028      	beq.n	8004ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a86:	f7fd ff47 	bl	8002918 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d302      	bcc.n	8004a9c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d11d      	bne.n	8004ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d016      	beq.n	8004ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac4:	f043 0220 	orr.w	r2, r3, #32
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e007      	b.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d1c3      	bne.n	8004a6e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004afc:	e049      	b.n	8004b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	f003 0310 	and.w	r3, r3, #16
 8004b08:	2b10      	cmp	r3, #16
 8004b0a:	d119      	bne.n	8004b40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0210 	mvn.w	r2, #16
 8004b14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e030      	b.n	8004ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b40:	f7fd feea 	bl	8002918 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d302      	bcc.n	8004b56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d11d      	bne.n	8004b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b60:	2b40      	cmp	r3, #64	@ 0x40
 8004b62:	d016      	beq.n	8004b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7e:	f043 0220 	orr.w	r2, r3, #32
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e007      	b.n	8004ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9c:	2b40      	cmp	r3, #64	@ 0x40
 8004b9e:	d1ae      	bne.n	8004afe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bc0:	d11b      	bne.n	8004bfa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	f043 0204 	orr.w	r2, r3, #4
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e267      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d075      	beq.n	8004d12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c26:	4b88      	ldr	r3, [pc, #544]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d00c      	beq.n	8004c4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c32:	4b85      	ldr	r3, [pc, #532]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d112      	bne.n	8004c64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c3e:	4b82      	ldr	r3, [pc, #520]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c4a:	d10b      	bne.n	8004c64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c4c:	4b7e      	ldr	r3, [pc, #504]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d05b      	beq.n	8004d10 <HAL_RCC_OscConfig+0x108>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d157      	bne.n	8004d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e242      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c6c:	d106      	bne.n	8004c7c <HAL_RCC_OscConfig+0x74>
 8004c6e:	4b76      	ldr	r3, [pc, #472]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a75      	ldr	r2, [pc, #468]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	e01d      	b.n	8004cb8 <HAL_RCC_OscConfig+0xb0>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c84:	d10c      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x98>
 8004c86:	4b70      	ldr	r3, [pc, #448]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a6f      	ldr	r2, [pc, #444]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	4b6d      	ldr	r3, [pc, #436]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a6c      	ldr	r2, [pc, #432]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	e00b      	b.n	8004cb8 <HAL_RCC_OscConfig+0xb0>
 8004ca0:	4b69      	ldr	r3, [pc, #420]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a68      	ldr	r2, [pc, #416]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	4b66      	ldr	r3, [pc, #408]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a65      	ldr	r2, [pc, #404]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d013      	beq.n	8004ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc0:	f7fd fe2a 	bl	8002918 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cc8:	f7fd fe26 	bl	8002918 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b64      	cmp	r3, #100	@ 0x64
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e207      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cda:	4b5b      	ldr	r3, [pc, #364]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0xc0>
 8004ce6:	e014      	b.n	8004d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce8:	f7fd fe16 	bl	8002918 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cf0:	f7fd fe12 	bl	8002918 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	@ 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e1f3      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d02:	4b51      	ldr	r3, [pc, #324]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <HAL_RCC_OscConfig+0xe8>
 8004d0e:	e000      	b.n	8004d12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d063      	beq.n	8004de6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 030c 	and.w	r3, r3, #12
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00b      	beq.n	8004d42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d2a:	4b47      	ldr	r3, [pc, #284]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d11c      	bne.n	8004d70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d36:	4b44      	ldr	r3, [pc, #272]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d116      	bne.n	8004d70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d42:	4b41      	ldr	r3, [pc, #260]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d005      	beq.n	8004d5a <HAL_RCC_OscConfig+0x152>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d001      	beq.n	8004d5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e1c7      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	4937      	ldr	r1, [pc, #220]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d6e:	e03a      	b.n	8004de6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d020      	beq.n	8004dba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d78:	4b34      	ldr	r3, [pc, #208]	@ (8004e4c <HAL_RCC_OscConfig+0x244>)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7e:	f7fd fdcb 	bl	8002918 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d86:	f7fd fdc7 	bl	8002918 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e1a8      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d98:	4b2b      	ldr	r3, [pc, #172]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0f0      	beq.n	8004d86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da4:	4b28      	ldr	r3, [pc, #160]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	4925      	ldr	r1, [pc, #148]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	600b      	str	r3, [r1, #0]
 8004db8:	e015      	b.n	8004de6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dba:	4b24      	ldr	r3, [pc, #144]	@ (8004e4c <HAL_RCC_OscConfig+0x244>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc0:	f7fd fdaa 	bl	8002918 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dc8:	f7fd fda6 	bl	8002918 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e187      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dda:	4b1b      	ldr	r3, [pc, #108]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d036      	beq.n	8004e60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d016      	beq.n	8004e28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dfa:	4b15      	ldr	r3, [pc, #84]	@ (8004e50 <HAL_RCC_OscConfig+0x248>)
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e00:	f7fd fd8a 	bl	8002918 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e08:	f7fd fd86 	bl	8002918 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e167      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e48 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0f0      	beq.n	8004e08 <HAL_RCC_OscConfig+0x200>
 8004e26:	e01b      	b.n	8004e60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e28:	4b09      	ldr	r3, [pc, #36]	@ (8004e50 <HAL_RCC_OscConfig+0x248>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e2e:	f7fd fd73 	bl	8002918 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e34:	e00e      	b.n	8004e54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e36:	f7fd fd6f 	bl	8002918 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d907      	bls.n	8004e54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e150      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	42470000 	.word	0x42470000
 8004e50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e54:	4b88      	ldr	r3, [pc, #544]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1ea      	bne.n	8004e36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 8097 	beq.w	8004f9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e72:	4b81      	ldr	r3, [pc, #516]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10f      	bne.n	8004e9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	4b7d      	ldr	r3, [pc, #500]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	4a7c      	ldr	r2, [pc, #496]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e8e:	4b7a      	ldr	r3, [pc, #488]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e96:	60bb      	str	r3, [r7, #8]
 8004e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9e:	4b77      	ldr	r3, [pc, #476]	@ (800507c <HAL_RCC_OscConfig+0x474>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d118      	bne.n	8004edc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eaa:	4b74      	ldr	r3, [pc, #464]	@ (800507c <HAL_RCC_OscConfig+0x474>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a73      	ldr	r2, [pc, #460]	@ (800507c <HAL_RCC_OscConfig+0x474>)
 8004eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eb6:	f7fd fd2f 	bl	8002918 <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ebe:	f7fd fd2b 	bl	8002918 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e10c      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed0:	4b6a      	ldr	r3, [pc, #424]	@ (800507c <HAL_RCC_OscConfig+0x474>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0f0      	beq.n	8004ebe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d106      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x2ea>
 8004ee4:	4b64      	ldr	r3, [pc, #400]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee8:	4a63      	ldr	r2, [pc, #396]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004eea:	f043 0301 	orr.w	r3, r3, #1
 8004eee:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ef0:	e01c      	b.n	8004f2c <HAL_RCC_OscConfig+0x324>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCC_OscConfig+0x30c>
 8004efa:	4b5f      	ldr	r3, [pc, #380]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efe:	4a5e      	ldr	r2, [pc, #376]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f00:	f043 0304 	orr.w	r3, r3, #4
 8004f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f06:	4b5c      	ldr	r3, [pc, #368]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0a:	4a5b      	ldr	r2, [pc, #364]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f12:	e00b      	b.n	8004f2c <HAL_RCC_OscConfig+0x324>
 8004f14:	4b58      	ldr	r3, [pc, #352]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f18:	4a57      	ldr	r2, [pc, #348]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f1a:	f023 0301 	bic.w	r3, r3, #1
 8004f1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f20:	4b55      	ldr	r3, [pc, #340]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f24:	4a54      	ldr	r2, [pc, #336]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f26:	f023 0304 	bic.w	r3, r3, #4
 8004f2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d015      	beq.n	8004f60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f34:	f7fd fcf0 	bl	8002918 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3a:	e00a      	b.n	8004f52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f3c:	f7fd fcec 	bl	8002918 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e0cb      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f52:	4b49      	ldr	r3, [pc, #292]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0ee      	beq.n	8004f3c <HAL_RCC_OscConfig+0x334>
 8004f5e:	e014      	b.n	8004f8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f60:	f7fd fcda 	bl	8002918 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f66:	e00a      	b.n	8004f7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f68:	f7fd fcd6 	bl	8002918 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e0b5      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1ee      	bne.n	8004f68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f8a:	7dfb      	ldrb	r3, [r7, #23]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d105      	bne.n	8004f9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f90:	4b39      	ldr	r3, [pc, #228]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f94:	4a38      	ldr	r2, [pc, #224]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004f96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 80a1 	beq.w	80050e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fa6:	4b34      	ldr	r3, [pc, #208]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d05c      	beq.n	800506c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d141      	bne.n	800503e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fba:	4b31      	ldr	r3, [pc, #196]	@ (8005080 <HAL_RCC_OscConfig+0x478>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc0:	f7fd fcaa 	bl	8002918 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc8:	f7fd fca6 	bl	8002918 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e087      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fda:	4b27      	ldr	r3, [pc, #156]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69da      	ldr	r2, [r3, #28]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff4:	019b      	lsls	r3, r3, #6
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffc:	085b      	lsrs	r3, r3, #1
 8004ffe:	3b01      	subs	r3, #1
 8005000:	041b      	lsls	r3, r3, #16
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005008:	061b      	lsls	r3, r3, #24
 800500a:	491b      	ldr	r1, [pc, #108]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 800500c:	4313      	orrs	r3, r2
 800500e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005010:	4b1b      	ldr	r3, [pc, #108]	@ (8005080 <HAL_RCC_OscConfig+0x478>)
 8005012:	2201      	movs	r2, #1
 8005014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005016:	f7fd fc7f 	bl	8002918 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800501e:	f7fd fc7b 	bl	8002918 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e05c      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005030:	4b11      	ldr	r3, [pc, #68]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f0      	beq.n	800501e <HAL_RCC_OscConfig+0x416>
 800503c:	e054      	b.n	80050e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503e:	4b10      	ldr	r3, [pc, #64]	@ (8005080 <HAL_RCC_OscConfig+0x478>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7fd fc68 	bl	8002918 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504c:	f7fd fc64 	bl	8002918 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e045      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505e:	4b06      	ldr	r3, [pc, #24]	@ (8005078 <HAL_RCC_OscConfig+0x470>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x444>
 800506a:	e03d      	b.n	80050e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d107      	bne.n	8005084 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e038      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
 8005078:	40023800 	.word	0x40023800
 800507c:	40007000 	.word	0x40007000
 8005080:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005084:	4b1b      	ldr	r3, [pc, #108]	@ (80050f4 <HAL_RCC_OscConfig+0x4ec>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d028      	beq.n	80050e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800509c:	429a      	cmp	r2, r3
 800509e:	d121      	bne.n	80050e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d11a      	bne.n	80050e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050b4:	4013      	ands	r3, r2
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050bc:	4293      	cmp	r3, r2
 80050be:	d111      	bne.n	80050e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ca:	085b      	lsrs	r3, r3, #1
 80050cc:	3b01      	subs	r3, #1
 80050ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d107      	bne.n	80050e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40023800 	.word	0x40023800

080050f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e0cc      	b.n	80052a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800510c:	4b68      	ldr	r3, [pc, #416]	@ (80052b0 <HAL_RCC_ClockConfig+0x1b8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d90c      	bls.n	8005134 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511a:	4b65      	ldr	r3, [pc, #404]	@ (80052b0 <HAL_RCC_ClockConfig+0x1b8>)
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005122:	4b63      	ldr	r3, [pc, #396]	@ (80052b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	429a      	cmp	r2, r3
 800512e:	d001      	beq.n	8005134 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e0b8      	b.n	80052a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d020      	beq.n	8005182 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	d005      	beq.n	8005158 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800514c:	4b59      	ldr	r3, [pc, #356]	@ (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	4a58      	ldr	r2, [pc, #352]	@ (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005156:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b00      	cmp	r3, #0
 8005162:	d005      	beq.n	8005170 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005164:	4b53      	ldr	r3, [pc, #332]	@ (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	4a52      	ldr	r2, [pc, #328]	@ (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800516e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005170:	4b50      	ldr	r3, [pc, #320]	@ (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	494d      	ldr	r1, [pc, #308]	@ (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	4313      	orrs	r3, r2
 8005180:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d044      	beq.n	8005218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d107      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005196:	4b47      	ldr	r3, [pc, #284]	@ (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d119      	bne.n	80051d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e07f      	b.n	80052a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d003      	beq.n	80051b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d107      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b6:	4b3f      	ldr	r3, [pc, #252]	@ (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d109      	bne.n	80051d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e06f      	b.n	80052a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c6:	4b3b      	ldr	r3, [pc, #236]	@ (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e067      	b.n	80052a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051d6:	4b37      	ldr	r3, [pc, #220]	@ (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f023 0203 	bic.w	r2, r3, #3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	4934      	ldr	r1, [pc, #208]	@ (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051e8:	f7fd fb96 	bl	8002918 <HAL_GetTick>
 80051ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ee:	e00a      	b.n	8005206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051f0:	f7fd fb92 	bl	8002918 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051fe:	4293      	cmp	r3, r2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e04f      	b.n	80052a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005206:	4b2b      	ldr	r3, [pc, #172]	@ (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 020c 	and.w	r2, r3, #12
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	429a      	cmp	r2, r3
 8005216:	d1eb      	bne.n	80051f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005218:	4b25      	ldr	r3, [pc, #148]	@ (80052b0 <HAL_RCC_ClockConfig+0x1b8>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d20c      	bcs.n	8005240 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005226:	4b22      	ldr	r3, [pc, #136]	@ (80052b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800522e:	4b20      	ldr	r3, [pc, #128]	@ (80052b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d001      	beq.n	8005240 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e032      	b.n	80052a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d008      	beq.n	800525e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800524c:	4b19      	ldr	r3, [pc, #100]	@ (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	4916      	ldr	r1, [pc, #88]	@ (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 800525a:	4313      	orrs	r3, r2
 800525c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0308 	and.w	r3, r3, #8
 8005266:	2b00      	cmp	r3, #0
 8005268:	d009      	beq.n	800527e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800526a:	4b12      	ldr	r3, [pc, #72]	@ (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	490e      	ldr	r1, [pc, #56]	@ (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 800527a:	4313      	orrs	r3, r2
 800527c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800527e:	f000 f821 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 8005282:	4602      	mov	r2, r0
 8005284:	4b0b      	ldr	r3, [pc, #44]	@ (80052b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	091b      	lsrs	r3, r3, #4
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	490a      	ldr	r1, [pc, #40]	@ (80052b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005290:	5ccb      	ldrb	r3, [r1, r3]
 8005292:	fa22 f303 	lsr.w	r3, r2, r3
 8005296:	4a09      	ldr	r2, [pc, #36]	@ (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 8005298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800529a:	4b09      	ldr	r3, [pc, #36]	@ (80052c0 <HAL_RCC_ClockConfig+0x1c8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fd faf6 	bl	8002890 <HAL_InitTick>

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40023c00 	.word	0x40023c00
 80052b4:	40023800 	.word	0x40023800
 80052b8:	0800b050 	.word	0x0800b050
 80052bc:	20000028 	.word	0x20000028
 80052c0:	2000002c 	.word	0x2000002c

080052c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052c8:	b094      	sub	sp, #80	@ 0x50
 80052ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80052d0:	2300      	movs	r3, #0
 80052d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052d4:	2300      	movs	r3, #0
 80052d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052dc:	4b79      	ldr	r3, [pc, #484]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f003 030c 	and.w	r3, r3, #12
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d00d      	beq.n	8005304 <HAL_RCC_GetSysClockFreq+0x40>
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	f200 80e1 	bhi.w	80054b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <HAL_RCC_GetSysClockFreq+0x34>
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d003      	beq.n	80052fe <HAL_RCC_GetSysClockFreq+0x3a>
 80052f6:	e0db      	b.n	80054b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052f8:	4b73      	ldr	r3, [pc, #460]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80052fa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80052fc:	e0db      	b.n	80054b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052fe:	4b73      	ldr	r3, [pc, #460]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x208>)
 8005300:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005302:	e0d8      	b.n	80054b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005304:	4b6f      	ldr	r3, [pc, #444]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800530c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800530e:	4b6d      	ldr	r3, [pc, #436]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d063      	beq.n	80053e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800531a:	4b6a      	ldr	r3, [pc, #424]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	099b      	lsrs	r3, r3, #6
 8005320:	2200      	movs	r2, #0
 8005322:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005324:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800532c:	633b      	str	r3, [r7, #48]	@ 0x30
 800532e:	2300      	movs	r3, #0
 8005330:	637b      	str	r3, [r7, #52]	@ 0x34
 8005332:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005336:	4622      	mov	r2, r4
 8005338:	462b      	mov	r3, r5
 800533a:	f04f 0000 	mov.w	r0, #0
 800533e:	f04f 0100 	mov.w	r1, #0
 8005342:	0159      	lsls	r1, r3, #5
 8005344:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005348:	0150      	lsls	r0, r2, #5
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4621      	mov	r1, r4
 8005350:	1a51      	subs	r1, r2, r1
 8005352:	6139      	str	r1, [r7, #16]
 8005354:	4629      	mov	r1, r5
 8005356:	eb63 0301 	sbc.w	r3, r3, r1
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005368:	4659      	mov	r1, fp
 800536a:	018b      	lsls	r3, r1, #6
 800536c:	4651      	mov	r1, sl
 800536e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005372:	4651      	mov	r1, sl
 8005374:	018a      	lsls	r2, r1, #6
 8005376:	4651      	mov	r1, sl
 8005378:	ebb2 0801 	subs.w	r8, r2, r1
 800537c:	4659      	mov	r1, fp
 800537e:	eb63 0901 	sbc.w	r9, r3, r1
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800538e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005392:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005396:	4690      	mov	r8, r2
 8005398:	4699      	mov	r9, r3
 800539a:	4623      	mov	r3, r4
 800539c:	eb18 0303 	adds.w	r3, r8, r3
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	462b      	mov	r3, r5
 80053a4:	eb49 0303 	adc.w	r3, r9, r3
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	f04f 0300 	mov.w	r3, #0
 80053b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053b6:	4629      	mov	r1, r5
 80053b8:	024b      	lsls	r3, r1, #9
 80053ba:	4621      	mov	r1, r4
 80053bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053c0:	4621      	mov	r1, r4
 80053c2:	024a      	lsls	r2, r1, #9
 80053c4:	4610      	mov	r0, r2
 80053c6:	4619      	mov	r1, r3
 80053c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ca:	2200      	movs	r2, #0
 80053cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053d4:	f7fb fbf0 	bl	8000bb8 <__aeabi_uldivmod>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4613      	mov	r3, r2
 80053de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053e0:	e058      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053e2:	4b38      	ldr	r3, [pc, #224]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	099b      	lsrs	r3, r3, #6
 80053e8:	2200      	movs	r2, #0
 80053ea:	4618      	mov	r0, r3
 80053ec:	4611      	mov	r1, r2
 80053ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053f2:	623b      	str	r3, [r7, #32]
 80053f4:	2300      	movs	r3, #0
 80053f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80053f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053fc:	4642      	mov	r2, r8
 80053fe:	464b      	mov	r3, r9
 8005400:	f04f 0000 	mov.w	r0, #0
 8005404:	f04f 0100 	mov.w	r1, #0
 8005408:	0159      	lsls	r1, r3, #5
 800540a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800540e:	0150      	lsls	r0, r2, #5
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4641      	mov	r1, r8
 8005416:	ebb2 0a01 	subs.w	sl, r2, r1
 800541a:	4649      	mov	r1, r9
 800541c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800542c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005430:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005434:	ebb2 040a 	subs.w	r4, r2, sl
 8005438:	eb63 050b 	sbc.w	r5, r3, fp
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	00eb      	lsls	r3, r5, #3
 8005446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800544a:	00e2      	lsls	r2, r4, #3
 800544c:	4614      	mov	r4, r2
 800544e:	461d      	mov	r5, r3
 8005450:	4643      	mov	r3, r8
 8005452:	18e3      	adds	r3, r4, r3
 8005454:	603b      	str	r3, [r7, #0]
 8005456:	464b      	mov	r3, r9
 8005458:	eb45 0303 	adc.w	r3, r5, r3
 800545c:	607b      	str	r3, [r7, #4]
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	e9d7 4500 	ldrd	r4, r5, [r7]
 800546a:	4629      	mov	r1, r5
 800546c:	028b      	lsls	r3, r1, #10
 800546e:	4621      	mov	r1, r4
 8005470:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005474:	4621      	mov	r1, r4
 8005476:	028a      	lsls	r2, r1, #10
 8005478:	4610      	mov	r0, r2
 800547a:	4619      	mov	r1, r3
 800547c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800547e:	2200      	movs	r2, #0
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	61fa      	str	r2, [r7, #28]
 8005484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005488:	f7fb fb96 	bl	8000bb8 <__aeabi_uldivmod>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	4613      	mov	r3, r2
 8005492:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005494:	4b0b      	ldr	r3, [pc, #44]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	0c1b      	lsrs	r3, r3, #16
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	3301      	adds	r3, #1
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80054a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054ae:	e002      	b.n	80054b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054b0:	4b05      	ldr	r3, [pc, #20]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80054b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3750      	adds	r7, #80	@ 0x50
 80054bc:	46bd      	mov	sp, r7
 80054be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054c2:	bf00      	nop
 80054c4:	40023800 	.word	0x40023800
 80054c8:	00f42400 	.word	0x00f42400
 80054cc:	007a1200 	.word	0x007a1200

080054d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054d4:	4b03      	ldr	r3, [pc, #12]	@ (80054e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80054d6:	681b      	ldr	r3, [r3, #0]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	20000028 	.word	0x20000028

080054e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054ec:	f7ff fff0 	bl	80054d0 <HAL_RCC_GetHCLKFreq>
 80054f0:	4602      	mov	r2, r0
 80054f2:	4b05      	ldr	r3, [pc, #20]	@ (8005508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	0a9b      	lsrs	r3, r3, #10
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	4903      	ldr	r1, [pc, #12]	@ (800550c <HAL_RCC_GetPCLK1Freq+0x24>)
 80054fe:	5ccb      	ldrb	r3, [r1, r3]
 8005500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005504:	4618      	mov	r0, r3
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40023800 	.word	0x40023800
 800550c:	0800b060 	.word	0x0800b060

08005510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005514:	f7ff ffdc 	bl	80054d0 <HAL_RCC_GetHCLKFreq>
 8005518:	4602      	mov	r2, r0
 800551a:	4b05      	ldr	r3, [pc, #20]	@ (8005530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	0b5b      	lsrs	r3, r3, #13
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	4903      	ldr	r1, [pc, #12]	@ (8005534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005526:	5ccb      	ldrb	r3, [r1, r3]
 8005528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800552c:	4618      	mov	r0, r3
 800552e:	bd80      	pop	{r7, pc}
 8005530:	40023800 	.word	0x40023800
 8005534:	0800b060 	.word	0x0800b060

08005538 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e07b      	b.n	8005642 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554e:	2b00      	cmp	r3, #0
 8005550:	d108      	bne.n	8005564 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800555a:	d009      	beq.n	8005570 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	61da      	str	r2, [r3, #28]
 8005562:	e005      	b.n	8005570 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fc ff08 	bl	80023a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f4:	ea42 0103 	orr.w	r1, r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	0c1b      	lsrs	r3, r3, #16
 800560e:	f003 0104 	and.w	r1, r3, #4
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005616:	f003 0210 	and.w	r2, r3, #16
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005630:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b088      	sub	sp, #32
 800564e:	af00      	add	r7, sp, #0
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	603b      	str	r3, [r7, #0]
 8005656:	4613      	mov	r3, r2
 8005658:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_SPI_Transmit+0x22>
 8005668:	2302      	movs	r3, #2
 800566a:	e12d      	b.n	80058c8 <HAL_SPI_Transmit+0x27e>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005674:	f7fd f950 	bl	8002918 <HAL_GetTick>
 8005678:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800567a:	88fb      	ldrh	r3, [r7, #6]
 800567c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b01      	cmp	r3, #1
 8005688:	d002      	beq.n	8005690 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800568a:	2302      	movs	r3, #2
 800568c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800568e:	e116      	b.n	80058be <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <HAL_SPI_Transmit+0x52>
 8005696:	88fb      	ldrh	r3, [r7, #6]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d102      	bne.n	80056a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056a0:	e10d      	b.n	80058be <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2203      	movs	r2, #3
 80056a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	88fa      	ldrh	r2, [r7, #6]
 80056ba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	88fa      	ldrh	r2, [r7, #6]
 80056c0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056e8:	d10f      	bne.n	800570a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005708:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005714:	2b40      	cmp	r3, #64	@ 0x40
 8005716:	d007      	beq.n	8005728 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005726:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005730:	d14f      	bne.n	80057d2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <HAL_SPI_Transmit+0xf6>
 800573a:	8afb      	ldrh	r3, [r7, #22]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d142      	bne.n	80057c6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005744:	881a      	ldrh	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005750:	1c9a      	adds	r2, r3, #2
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800575a:	b29b      	uxth	r3, r3
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005764:	e02f      	b.n	80057c6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b02      	cmp	r3, #2
 8005772:	d112      	bne.n	800579a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005778:	881a      	ldrh	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005784:	1c9a      	adds	r2, r3, #2
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b01      	subs	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005798:	e015      	b.n	80057c6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800579a:	f7fd f8bd 	bl	8002918 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d803      	bhi.n	80057b2 <HAL_SPI_Transmit+0x168>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057b0:	d102      	bne.n	80057b8 <HAL_SPI_Transmit+0x16e>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d106      	bne.n	80057c6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80057c4:	e07b      	b.n	80058be <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1ca      	bne.n	8005766 <HAL_SPI_Transmit+0x11c>
 80057d0:	e050      	b.n	8005874 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <HAL_SPI_Transmit+0x196>
 80057da:	8afb      	ldrh	r3, [r7, #22]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d144      	bne.n	800586a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	7812      	ldrb	r2, [r2, #0]
 80057ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005806:	e030      	b.n	800586a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b02      	cmp	r3, #2
 8005814:	d113      	bne.n	800583e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	330c      	adds	r3, #12
 8005820:	7812      	ldrb	r2, [r2, #0]
 8005822:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005832:	b29b      	uxth	r3, r3
 8005834:	3b01      	subs	r3, #1
 8005836:	b29a      	uxth	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800583c:	e015      	b.n	800586a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800583e:	f7fd f86b 	bl	8002918 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d803      	bhi.n	8005856 <HAL_SPI_Transmit+0x20c>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005854:	d102      	bne.n	800585c <HAL_SPI_Transmit+0x212>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d106      	bne.n	800586a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005868:	e029      	b.n	80058be <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800586e:	b29b      	uxth	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1c9      	bne.n	8005808 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	6839      	ldr	r1, [r7, #0]
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 fa03 	bl	8005c84 <SPI_EndRxTxTransaction>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2220      	movs	r2, #32
 8005888:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10a      	bne.n	80058a8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005892:	2300      	movs	r3, #0
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	613b      	str	r3, [r7, #16]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	613b      	str	r3, [r7, #16]
 80058a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	77fb      	strb	r3, [r7, #31]
 80058b4:	e003      	b.n	80058be <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80058c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3720      	adds	r7, #32
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	4613      	mov	r3, r2
 80058dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_SPI_Transmit_DMA+0x20>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e097      	b.n	8005a20 <HAL_SPI_Transmit_DMA+0x150>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b01      	cmp	r3, #1
 8005902:	d002      	beq.n	800590a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005904:	2302      	movs	r3, #2
 8005906:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005908:	e085      	b.n	8005a16 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <HAL_SPI_Transmit_DMA+0x46>
 8005910:	88fb      	ldrh	r3, [r7, #6]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d102      	bne.n	800591c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	75fb      	strb	r3, [r7, #23]
    goto error;
 800591a:	e07c      	b.n	8005a16 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2203      	movs	r2, #3
 8005920:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	88fa      	ldrh	r2, [r7, #6]
 8005934:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	88fa      	ldrh	r2, [r7, #6]
 800593a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005962:	d10f      	bne.n	8005984 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005972:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005982:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005988:	4a27      	ldr	r2, [pc, #156]	@ (8005a28 <HAL_SPI_Transmit_DMA+0x158>)
 800598a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005990:	4a26      	ldr	r2, [pc, #152]	@ (8005a2c <HAL_SPI_Transmit_DMA+0x15c>)
 8005992:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005998:	4a25      	ldr	r2, [pc, #148]	@ (8005a30 <HAL_SPI_Transmit_DMA+0x160>)
 800599a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059a0:	2200      	movs	r2, #0
 80059a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ac:	4619      	mov	r1, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	330c      	adds	r3, #12
 80059b4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059ba:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80059bc:	f7fd fc0e 	bl	80031dc <HAL_DMA_Start_IT>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d008      	beq.n	80059d8 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ca:	f043 0210 	orr.w	r2, r3, #16
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	75fb      	strb	r3, [r7, #23]

    goto error;
 80059d6:	e01e      	b.n	8005a16 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e2:	2b40      	cmp	r3, #64	@ 0x40
 80059e4:	d007      	beq.n	80059f6 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059f4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0220 	orr.w	r2, r2, #32
 8005a04:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f042 0202 	orr.w	r2, r2, #2
 8005a14:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	08005b19 	.word	0x08005b19
 8005a2c:	08005a71 	.word	0x08005a71
 8005a30:	08005b35 	.word	0x08005b35

08005a34 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a7e:	f7fc ff4b 	bl	8002918 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a92:	d03b      	beq.n	8005b0c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0220 	bic.w	r2, r2, #32
 8005aa2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0202 	bic.w	r2, r2, #2
 8005ab2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	2164      	movs	r1, #100	@ 0x64
 8005ab8:	6978      	ldr	r0, [r7, #20]
 8005aba:	f000 f8e3 	bl	8005c84 <SPI_EndRxTxTransaction>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d005      	beq.n	8005ad0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac8:	f043 0220 	orr.w	r2, r3, #32
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ad8:	2300      	movs	r3, #0
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2200      	movs	r2, #0
 8005af2:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005b04:	6978      	ldr	r0, [r7, #20]
 8005b06:	f7ff ffa9 	bl	8005a5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005b0a:	e002      	b.n	8005b12 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005b0c:	6978      	ldr	r0, [r7, #20]
 8005b0e:	f7ff ff91 	bl	8005a34 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f7ff ff8e 	bl	8005a48 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b2c:	bf00      	nop
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0203 	bic.w	r2, r2, #3
 8005b50:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b56:	f043 0210 	orr.w	r2, r3, #16
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f7ff ff78 	bl	8005a5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b6c:	bf00      	nop
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b088      	sub	sp, #32
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	603b      	str	r3, [r7, #0]
 8005b80:	4613      	mov	r3, r2
 8005b82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b84:	f7fc fec8 	bl	8002918 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8c:	1a9b      	subs	r3, r3, r2
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	4413      	add	r3, r2
 8005b92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b94:	f7fc fec0 	bl	8002918 <HAL_GetTick>
 8005b98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b9a:	4b39      	ldr	r3, [pc, #228]	@ (8005c80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	015b      	lsls	r3, r3, #5
 8005ba0:	0d1b      	lsrs	r3, r3, #20
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	fb02 f303 	mul.w	r3, r2, r3
 8005ba8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005baa:	e054      	b.n	8005c56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bb2:	d050      	beq.n	8005c56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bb4:	f7fc feb0 	bl	8002918 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d902      	bls.n	8005bca <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d13d      	bne.n	8005c46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005bd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005be2:	d111      	bne.n	8005c08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bec:	d004      	beq.n	8005bf8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bf6:	d107      	bne.n	8005c08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c10:	d10f      	bne.n	8005c32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e017      	b.n	8005c76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	bf0c      	ite	eq
 8005c66:	2301      	moveq	r3, #1
 8005c68:	2300      	movne	r3, #0
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d19b      	bne.n	8005bac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3720      	adds	r7, #32
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20000028 	.word	0x20000028

08005c84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af02      	add	r7, sp, #8
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2201      	movs	r2, #1
 8005c98:	2102      	movs	r1, #2
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f7ff ff6a 	bl	8005b74 <SPI_WaitFlagStateUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d007      	beq.n	8005cb6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005caa:	f043 0220 	orr.w	r2, r3, #32
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e032      	b.n	8005d1c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d24 <SPI_EndRxTxTransaction+0xa0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1b      	ldr	r2, [pc, #108]	@ (8005d28 <SPI_EndRxTxTransaction+0xa4>)
 8005cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc0:	0d5b      	lsrs	r3, r3, #21
 8005cc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005cc6:	fb02 f303 	mul.w	r3, r2, r3
 8005cca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cd4:	d112      	bne.n	8005cfc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2180      	movs	r1, #128	@ 0x80
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f7ff ff47 	bl	8005b74 <SPI_WaitFlagStateUntilTimeout>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d016      	beq.n	8005d1a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf0:	f043 0220 	orr.w	r2, r3, #32
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e00f      	b.n	8005d1c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	3b01      	subs	r3, #1
 8005d06:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d12:	2b80      	cmp	r3, #128	@ 0x80
 8005d14:	d0f2      	beq.n	8005cfc <SPI_EndRxTxTransaction+0x78>
 8005d16:	e000      	b.n	8005d1a <SPI_EndRxTxTransaction+0x96>
        break;
 8005d18:	bf00      	nop
  }

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	20000028 	.word	0x20000028
 8005d28:	165e9f81 	.word	0x165e9f81

08005d2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e042      	b.n	8005dc4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fc fb9e 	bl	8002494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2224      	movs	r2, #36	@ 0x24
 8005d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fde9 	bl	8006948 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	691a      	ldr	r2, [r3, #16]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	695a      	ldr	r2, [r3, #20]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005da4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08a      	sub	sp, #40	@ 0x28
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b20      	cmp	r3, #32
 8005dea:	d175      	bne.n	8005ed8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <HAL_UART_Transmit+0x2c>
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e06e      	b.n	8005eda <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2221      	movs	r2, #33	@ 0x21
 8005e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e0a:	f7fc fd85 	bl	8002918 <HAL_GetTick>
 8005e0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	88fa      	ldrh	r2, [r7, #6]
 8005e14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	88fa      	ldrh	r2, [r7, #6]
 8005e1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e24:	d108      	bne.n	8005e38 <HAL_UART_Transmit+0x6c>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d104      	bne.n	8005e38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	61bb      	str	r3, [r7, #24]
 8005e36:	e003      	b.n	8005e40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e40:	e02e      	b.n	8005ea0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2180      	movs	r1, #128	@ 0x80
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 fb4b 	bl	80064e8 <UART_WaitOnFlagUntilTimeout>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e03a      	b.n	8005eda <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10b      	bne.n	8005e82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	3302      	adds	r3, #2
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	e007      	b.n	8005e92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	781a      	ldrb	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1cb      	bne.n	8005e42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	2140      	movs	r1, #64	@ 0x40
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 fb17 	bl	80064e8 <UART_WaitOnFlagUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d005      	beq.n	8005ecc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e006      	b.n	8005eda <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	e000      	b.n	8005eda <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ed8:	2302      	movs	r3, #2
  }
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3720      	adds	r7, #32
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b085      	sub	sp, #20
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	4613      	mov	r3, r2
 8005eee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d121      	bne.n	8005f40 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d002      	beq.n	8005f08 <HAL_UART_Transmit_IT+0x26>
 8005f02:	88fb      	ldrh	r3, [r7, #6]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e01a      	b.n	8005f42 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	88fa      	ldrh	r2, [r7, #6]
 8005f16:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	88fa      	ldrh	r2, [r7, #6]
 8005f1c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2221      	movs	r2, #33	@ 0x21
 8005f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005f3a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	e000      	b.n	8005f42 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005f40:	2302      	movs	r3, #2
  }
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d112      	bne.n	8005f8e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_UART_Receive_IT+0x26>
 8005f6e:	88fb      	ldrh	r3, [r7, #6]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e00b      	b.n	8005f90 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f7e:	88fb      	ldrh	r3, [r7, #6]
 8005f80:	461a      	mov	r2, r3
 8005f82:	68b9      	ldr	r1, [r7, #8]
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 fb08 	bl	800659a <UART_Start_Receive_IT>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	e000      	b.n	8005f90 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005f8e:	2302      	movs	r3, #2
  }
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b0ba      	sub	sp, #232	@ 0xe8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005fd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10f      	bne.n	8005ffe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fe2:	f003 0320 	and.w	r3, r3, #32
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d009      	beq.n	8005ffe <HAL_UART_IRQHandler+0x66>
 8005fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fbe8 	bl	80067cc <UART_Receive_IT>
      return;
 8005ffc:	e25b      	b.n	80064b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 80de 	beq.w	80061c4 <HAL_UART_IRQHandler+0x22c>
 8006008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d106      	bne.n	8006022 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006018:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 80d1 	beq.w	80061c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <HAL_UART_IRQHandler+0xae>
 800602e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006036:	2b00      	cmp	r3, #0
 8006038:	d005      	beq.n	8006046 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800603e:	f043 0201 	orr.w	r2, r3, #1
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00b      	beq.n	800606a <HAL_UART_IRQHandler+0xd2>
 8006052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d005      	beq.n	800606a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006062:	f043 0202 	orr.w	r2, r3, #2
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800606a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00b      	beq.n	800608e <HAL_UART_IRQHandler+0xf6>
 8006076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d005      	beq.n	800608e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006086:	f043 0204 	orr.w	r2, r3, #4
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800608e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006092:	f003 0308 	and.w	r3, r3, #8
 8006096:	2b00      	cmp	r3, #0
 8006098:	d011      	beq.n	80060be <HAL_UART_IRQHandler+0x126>
 800609a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800609e:	f003 0320 	and.w	r3, r3, #32
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d105      	bne.n	80060b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80060a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d005      	beq.n	80060be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b6:	f043 0208 	orr.w	r2, r3, #8
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 81f2 	beq.w	80064ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060cc:	f003 0320 	and.w	r3, r3, #32
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d008      	beq.n	80060e6 <HAL_UART_IRQHandler+0x14e>
 80060d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060d8:	f003 0320 	and.w	r3, r3, #32
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fb73 	bl	80067cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f0:	2b40      	cmp	r3, #64	@ 0x40
 80060f2:	bf0c      	ite	eq
 80060f4:	2301      	moveq	r3, #1
 80060f6:	2300      	movne	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b00      	cmp	r3, #0
 8006108:	d103      	bne.n	8006112 <HAL_UART_IRQHandler+0x17a>
 800610a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800610e:	2b00      	cmp	r3, #0
 8006110:	d04f      	beq.n	80061b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fa7b 	bl	800660e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006122:	2b40      	cmp	r3, #64	@ 0x40
 8006124:	d141      	bne.n	80061aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3314      	adds	r3, #20
 800612c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800613c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006140:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006144:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3314      	adds	r3, #20
 800614e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006152:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006156:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800615e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800616a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1d9      	bne.n	8006126 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006176:	2b00      	cmp	r3, #0
 8006178:	d013      	beq.n	80061a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800617e:	4a7e      	ldr	r2, [pc, #504]	@ (8006378 <HAL_UART_IRQHandler+0x3e0>)
 8006180:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006186:	4618      	mov	r0, r3
 8006188:	f7fd f8f0 	bl	800336c <HAL_DMA_Abort_IT>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d016      	beq.n	80061c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800619c:	4610      	mov	r0, r2
 800619e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a0:	e00e      	b.n	80061c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f98a 	bl	80064bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a8:	e00a      	b.n	80061c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f986 	bl	80064bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b0:	e006      	b.n	80061c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f982 	bl	80064bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80061be:	e175      	b.n	80064ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c0:	bf00      	nop
    return;
 80061c2:	e173      	b.n	80064ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	f040 814f 	bne.w	800646c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80061ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061d2:	f003 0310 	and.w	r3, r3, #16
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 8148 	beq.w	800646c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80061dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061e0:	f003 0310 	and.w	r3, r3, #16
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 8141 	beq.w	800646c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061ea:	2300      	movs	r3, #0
 80061ec:	60bb      	str	r3, [r7, #8]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	60bb      	str	r3, [r7, #8]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	60bb      	str	r3, [r7, #8]
 80061fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800620a:	2b40      	cmp	r3, #64	@ 0x40
 800620c:	f040 80b6 	bne.w	800637c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800621c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 8145 	beq.w	80064b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800622a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800622e:	429a      	cmp	r2, r3
 8006230:	f080 813e 	bcs.w	80064b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800623a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006246:	f000 8088 	beq.w	800635a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	330c      	adds	r3, #12
 8006250:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006258:	e853 3f00 	ldrex	r3, [r3]
 800625c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006260:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006268:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	330c      	adds	r3, #12
 8006272:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006276:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800627a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006282:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800628e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1d9      	bne.n	800624a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3314      	adds	r3, #20
 800629c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80062a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062a8:	f023 0301 	bic.w	r3, r3, #1
 80062ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3314      	adds	r3, #20
 80062b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80062ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80062be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80062c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80062cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e1      	bne.n	8006296 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3314      	adds	r3, #20
 80062d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80062e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3314      	adds	r3, #20
 80062f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80062f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80062f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80062fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006304:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e3      	bne.n	80062d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2220      	movs	r2, #32
 800630e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	330c      	adds	r3, #12
 800631e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006322:	e853 3f00 	ldrex	r3, [r3]
 8006326:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006328:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800632a:	f023 0310 	bic.w	r3, r3, #16
 800632e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	330c      	adds	r3, #12
 8006338:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800633c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800633e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006342:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800634a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e3      	bne.n	8006318 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006354:	4618      	mov	r0, r3
 8006356:	f7fc ff99 	bl	800328c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2202      	movs	r2, #2
 800635e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006368:	b29b      	uxth	r3, r3
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	b29b      	uxth	r3, r3
 800636e:	4619      	mov	r1, r3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f8ad 	bl	80064d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006376:	e09b      	b.n	80064b0 <HAL_UART_IRQHandler+0x518>
 8006378:	080066d5 	.word	0x080066d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006384:	b29b      	uxth	r3, r3
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 808e 	beq.w	80064b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006398:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 8089 	beq.w	80064b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	330c      	adds	r3, #12
 80063a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	330c      	adds	r3, #12
 80063c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80063c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80063c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e3      	bne.n	80063a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3314      	adds	r3, #20
 80063e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	623b      	str	r3, [r7, #32]
   return(result);
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	f023 0301 	bic.w	r3, r3, #1
 80063f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3314      	adds	r3, #20
 80063fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80063fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8006400:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006402:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006404:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006406:	e841 2300 	strex	r3, r2, [r1]
 800640a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800640c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1e3      	bne.n	80063da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2220      	movs	r2, #32
 8006416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	330c      	adds	r3, #12
 8006426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 0310 	bic.w	r3, r3, #16
 8006436:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	330c      	adds	r3, #12
 8006440:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006444:	61fa      	str	r2, [r7, #28]
 8006446:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006448:	69b9      	ldr	r1, [r7, #24]
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	e841 2300 	strex	r3, r2, [r1]
 8006450:	617b      	str	r3, [r7, #20]
   return(result);
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1e3      	bne.n	8006420 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800645e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006462:	4619      	mov	r1, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f833 	bl	80064d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800646a:	e023      	b.n	80064b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800646c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006474:	2b00      	cmp	r3, #0
 8006476:	d009      	beq.n	800648c <HAL_UART_IRQHandler+0x4f4>
 8006478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800647c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f939 	bl	80066fc <UART_Transmit_IT>
    return;
 800648a:	e014      	b.n	80064b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800648c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00e      	beq.n	80064b6 <HAL_UART_IRQHandler+0x51e>
 8006498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800649c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d008      	beq.n	80064b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f979 	bl	800679c <UART_EndTransmit_IT>
    return;
 80064aa:	e004      	b.n	80064b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80064ac:	bf00      	nop
 80064ae:	e002      	b.n	80064b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80064b0:	bf00      	nop
 80064b2:	e000      	b.n	80064b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80064b4:	bf00      	nop
  }
}
 80064b6:	37e8      	adds	r7, #232	@ 0xe8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	460b      	mov	r3, r1
 80064da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	603b      	str	r3, [r7, #0]
 80064f4:	4613      	mov	r3, r2
 80064f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064f8:	e03b      	b.n	8006572 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006500:	d037      	beq.n	8006572 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006502:	f7fc fa09 	bl	8002918 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	6a3a      	ldr	r2, [r7, #32]
 800650e:	429a      	cmp	r2, r3
 8006510:	d302      	bcc.n	8006518 <UART_WaitOnFlagUntilTimeout+0x30>
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e03a      	b.n	8006592 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b00      	cmp	r3, #0
 8006528:	d023      	beq.n	8006572 <UART_WaitOnFlagUntilTimeout+0x8a>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b80      	cmp	r3, #128	@ 0x80
 800652e:	d020      	beq.n	8006572 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2b40      	cmp	r3, #64	@ 0x40
 8006534:	d01d      	beq.n	8006572 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b08      	cmp	r3, #8
 8006542:	d116      	bne.n	8006572 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006544:	2300      	movs	r3, #0
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 f857 	bl	800660e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2208      	movs	r2, #8
 8006564:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e00f      	b.n	8006592 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	4013      	ands	r3, r2
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	429a      	cmp	r2, r3
 8006580:	bf0c      	ite	eq
 8006582:	2301      	moveq	r3, #1
 8006584:	2300      	movne	r3, #0
 8006586:	b2db      	uxtb	r3, r3
 8006588:	461a      	mov	r2, r3
 800658a:	79fb      	ldrb	r3, [r7, #7]
 800658c:	429a      	cmp	r2, r3
 800658e:	d0b4      	beq.n	80064fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3718      	adds	r7, #24
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800659a:	b480      	push	{r7}
 800659c:	b085      	sub	sp, #20
 800659e:	af00      	add	r7, sp, #0
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	4613      	mov	r3, r2
 80065a6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	88fa      	ldrh	r2, [r7, #6]
 80065b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	88fa      	ldrh	r2, [r7, #6]
 80065b8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2222      	movs	r2, #34	@ 0x22
 80065c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d007      	beq.n	80065e0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065de:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695a      	ldr	r2, [r3, #20]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0201 	orr.w	r2, r2, #1
 80065ee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0220 	orr.w	r2, r2, #32
 80065fe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800660e:	b480      	push	{r7}
 8006610:	b095      	sub	sp, #84	@ 0x54
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	330c      	adds	r3, #12
 800661c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006628:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800662c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	330c      	adds	r3, #12
 8006634:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006636:	643a      	str	r2, [r7, #64]	@ 0x40
 8006638:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800663c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e5      	bne.n	8006616 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3314      	adds	r3, #20
 8006650:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	61fb      	str	r3, [r7, #28]
   return(result);
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	f023 0301 	bic.w	r3, r3, #1
 8006660:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3314      	adds	r3, #20
 8006668:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800666a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800666c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006670:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e5      	bne.n	800664a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006682:	2b01      	cmp	r3, #1
 8006684:	d119      	bne.n	80066ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	330c      	adds	r3, #12
 800668c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	e853 3f00 	ldrex	r3, [r3]
 8006694:	60bb      	str	r3, [r7, #8]
   return(result);
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	f023 0310 	bic.w	r3, r3, #16
 800669c:	647b      	str	r3, [r7, #68]	@ 0x44
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	330c      	adds	r3, #12
 80066a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066a6:	61ba      	str	r2, [r7, #24]
 80066a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066aa:	6979      	ldr	r1, [r7, #20]
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	e841 2300 	strex	r3, r2, [r1]
 80066b2:	613b      	str	r3, [r7, #16]
   return(result);
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1e5      	bne.n	8006686 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2220      	movs	r2, #32
 80066be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80066c8:	bf00      	nop
 80066ca:	3754      	adds	r7, #84	@ 0x54
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f7ff fee4 	bl	80064bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066f4:	bf00      	nop
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b21      	cmp	r3, #33	@ 0x21
 800670e:	d13e      	bne.n	800678e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006718:	d114      	bne.n	8006744 <UART_Transmit_IT+0x48>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d110      	bne.n	8006744 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	461a      	mov	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006736:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	1c9a      	adds	r2, r3, #2
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	621a      	str	r2, [r3, #32]
 8006742:	e008      	b.n	8006756 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	1c59      	adds	r1, r3, #1
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	6211      	str	r1, [r2, #32]
 800674e:	781a      	ldrb	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800675a:	b29b      	uxth	r3, r3
 800675c:	3b01      	subs	r3, #1
 800675e:	b29b      	uxth	r3, r3
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	4619      	mov	r1, r3
 8006764:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10f      	bne.n	800678a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006778:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006788:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	e000      	b.n	8006790 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800678e:	2302      	movs	r3, #2
  }
}
 8006790:	4618      	mov	r0, r3
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7fb f98f 	bl	8001ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08c      	sub	sp, #48	@ 0x30
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b22      	cmp	r3, #34	@ 0x22
 80067de:	f040 80ae 	bne.w	800693e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ea:	d117      	bne.n	800681c <UART_Receive_IT+0x50>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d113      	bne.n	800681c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80067f4:	2300      	movs	r3, #0
 80067f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	b29b      	uxth	r3, r3
 8006806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800680a:	b29a      	uxth	r2, r3
 800680c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006814:	1c9a      	adds	r2, r3, #2
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	629a      	str	r2, [r3, #40]	@ 0x28
 800681a:	e026      	b.n	800686a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006820:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800682e:	d007      	beq.n	8006840 <UART_Receive_IT+0x74>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <UART_Receive_IT+0x82>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d106      	bne.n	800684e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	b2da      	uxtb	r2, r3
 8006848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	e008      	b.n	8006860 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800685a:	b2da      	uxtb	r2, r3
 800685c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800685e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800686e:	b29b      	uxth	r3, r3
 8006870:	3b01      	subs	r3, #1
 8006872:	b29b      	uxth	r3, r3
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	4619      	mov	r1, r3
 8006878:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800687a:	2b00      	cmp	r3, #0
 800687c:	d15d      	bne.n	800693a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0220 	bic.w	r2, r2, #32
 800688c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800689c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	695a      	ldr	r2, [r3, #20]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0201 	bic.w	r2, r2, #1
 80068ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d135      	bne.n	8006930 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	330c      	adds	r3, #12
 80068d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	613b      	str	r3, [r7, #16]
   return(result);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f023 0310 	bic.w	r3, r3, #16
 80068e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	330c      	adds	r3, #12
 80068e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068ea:	623a      	str	r2, [r7, #32]
 80068ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	69f9      	ldr	r1, [r7, #28]
 80068f0:	6a3a      	ldr	r2, [r7, #32]
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e5      	bne.n	80068ca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0310 	and.w	r3, r3, #16
 8006908:	2b10      	cmp	r3, #16
 800690a:	d10a      	bne.n	8006922 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff fdd1 	bl	80064d0 <HAL_UARTEx_RxEventCallback>
 800692e:	e002      	b.n	8006936 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7fb f87d 	bl	8001a30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	e002      	b.n	8006940 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	e000      	b.n	8006940 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800693e:	2302      	movs	r3, #2
  }
}
 8006940:	4618      	mov	r0, r3
 8006942:	3730      	adds	r7, #48	@ 0x30
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800694c:	b0c0      	sub	sp, #256	@ 0x100
 800694e:	af00      	add	r7, sp, #0
 8006950:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006964:	68d9      	ldr	r1, [r3, #12]
 8006966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	ea40 0301 	orr.w	r3, r0, r1
 8006970:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	431a      	orrs	r2, r3
 8006980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	431a      	orrs	r2, r3
 8006988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800698c:	69db      	ldr	r3, [r3, #28]
 800698e:	4313      	orrs	r3, r2
 8006990:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80069a0:	f021 010c 	bic.w	r1, r1, #12
 80069a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80069ae:	430b      	orrs	r3, r1
 80069b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80069be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c2:	6999      	ldr	r1, [r3, #24]
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	ea40 0301 	orr.w	r3, r0, r1
 80069ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	4b8f      	ldr	r3, [pc, #572]	@ (8006c14 <UART_SetConfig+0x2cc>)
 80069d8:	429a      	cmp	r2, r3
 80069da:	d005      	beq.n	80069e8 <UART_SetConfig+0xa0>
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	4b8d      	ldr	r3, [pc, #564]	@ (8006c18 <UART_SetConfig+0x2d0>)
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d104      	bne.n	80069f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069e8:	f7fe fd92 	bl	8005510 <HAL_RCC_GetPCLK2Freq>
 80069ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80069f0:	e003      	b.n	80069fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069f2:	f7fe fd79 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 80069f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a04:	f040 810c 	bne.w	8006c20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a1a:	4622      	mov	r2, r4
 8006a1c:	462b      	mov	r3, r5
 8006a1e:	1891      	adds	r1, r2, r2
 8006a20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a22:	415b      	adcs	r3, r3
 8006a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	eb12 0801 	adds.w	r8, r2, r1
 8006a30:	4629      	mov	r1, r5
 8006a32:	eb43 0901 	adc.w	r9, r3, r1
 8006a36:	f04f 0200 	mov.w	r2, #0
 8006a3a:	f04f 0300 	mov.w	r3, #0
 8006a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a4a:	4690      	mov	r8, r2
 8006a4c:	4699      	mov	r9, r3
 8006a4e:	4623      	mov	r3, r4
 8006a50:	eb18 0303 	adds.w	r3, r8, r3
 8006a54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a58:	462b      	mov	r3, r5
 8006a5a:	eb49 0303 	adc.w	r3, r9, r3
 8006a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006a72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006a76:	460b      	mov	r3, r1
 8006a78:	18db      	adds	r3, r3, r3
 8006a7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	eb42 0303 	adc.w	r3, r2, r3
 8006a82:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006a88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006a8c:	f7fa f894 	bl	8000bb8 <__aeabi_uldivmod>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4b61      	ldr	r3, [pc, #388]	@ (8006c1c <UART_SetConfig+0x2d4>)
 8006a96:	fba3 2302 	umull	r2, r3, r3, r2
 8006a9a:	095b      	lsrs	r3, r3, #5
 8006a9c:	011c      	lsls	r4, r3, #4
 8006a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006aa8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006aac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ab0:	4642      	mov	r2, r8
 8006ab2:	464b      	mov	r3, r9
 8006ab4:	1891      	adds	r1, r2, r2
 8006ab6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ab8:	415b      	adcs	r3, r3
 8006aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006abc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006ac0:	4641      	mov	r1, r8
 8006ac2:	eb12 0a01 	adds.w	sl, r2, r1
 8006ac6:	4649      	mov	r1, r9
 8006ac8:	eb43 0b01 	adc.w	fp, r3, r1
 8006acc:	f04f 0200 	mov.w	r2, #0
 8006ad0:	f04f 0300 	mov.w	r3, #0
 8006ad4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ad8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006adc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ae0:	4692      	mov	sl, r2
 8006ae2:	469b      	mov	fp, r3
 8006ae4:	4643      	mov	r3, r8
 8006ae6:	eb1a 0303 	adds.w	r3, sl, r3
 8006aea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006aee:	464b      	mov	r3, r9
 8006af0:	eb4b 0303 	adc.w	r3, fp, r3
 8006af4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b04:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	18db      	adds	r3, r3, r3
 8006b10:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b12:	4613      	mov	r3, r2
 8006b14:	eb42 0303 	adc.w	r3, r2, r3
 8006b18:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b22:	f7fa f849 	bl	8000bb8 <__aeabi_uldivmod>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8006c1c <UART_SetConfig+0x2d4>)
 8006b2e:	fba3 2301 	umull	r2, r3, r3, r1
 8006b32:	095b      	lsrs	r3, r3, #5
 8006b34:	2264      	movs	r2, #100	@ 0x64
 8006b36:	fb02 f303 	mul.w	r3, r2, r3
 8006b3a:	1acb      	subs	r3, r1, r3
 8006b3c:	00db      	lsls	r3, r3, #3
 8006b3e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006b42:	4b36      	ldr	r3, [pc, #216]	@ (8006c1c <UART_SetConfig+0x2d4>)
 8006b44:	fba3 2302 	umull	r2, r3, r3, r2
 8006b48:	095b      	lsrs	r3, r3, #5
 8006b4a:	005b      	lsls	r3, r3, #1
 8006b4c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006b50:	441c      	add	r4, r3
 8006b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006b60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006b64:	4642      	mov	r2, r8
 8006b66:	464b      	mov	r3, r9
 8006b68:	1891      	adds	r1, r2, r2
 8006b6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006b6c:	415b      	adcs	r3, r3
 8006b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006b74:	4641      	mov	r1, r8
 8006b76:	1851      	adds	r1, r2, r1
 8006b78:	6339      	str	r1, [r7, #48]	@ 0x30
 8006b7a:	4649      	mov	r1, r9
 8006b7c:	414b      	adcs	r3, r1
 8006b7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b80:	f04f 0200 	mov.w	r2, #0
 8006b84:	f04f 0300 	mov.w	r3, #0
 8006b88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006b8c:	4659      	mov	r1, fp
 8006b8e:	00cb      	lsls	r3, r1, #3
 8006b90:	4651      	mov	r1, sl
 8006b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b96:	4651      	mov	r1, sl
 8006b98:	00ca      	lsls	r2, r1, #3
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	4642      	mov	r2, r8
 8006ba2:	189b      	adds	r3, r3, r2
 8006ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ba8:	464b      	mov	r3, r9
 8006baa:	460a      	mov	r2, r1
 8006bac:	eb42 0303 	adc.w	r3, r2, r3
 8006bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006bc0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006bc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006bc8:	460b      	mov	r3, r1
 8006bca:	18db      	adds	r3, r3, r3
 8006bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bce:	4613      	mov	r3, r2
 8006bd0:	eb42 0303 	adc.w	r3, r2, r3
 8006bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006bda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006bde:	f7f9 ffeb 	bl	8000bb8 <__aeabi_uldivmod>
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c1c <UART_SetConfig+0x2d4>)
 8006be8:	fba3 1302 	umull	r1, r3, r3, r2
 8006bec:	095b      	lsrs	r3, r3, #5
 8006bee:	2164      	movs	r1, #100	@ 0x64
 8006bf0:	fb01 f303 	mul.w	r3, r1, r3
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	3332      	adds	r3, #50	@ 0x32
 8006bfa:	4a08      	ldr	r2, [pc, #32]	@ (8006c1c <UART_SetConfig+0x2d4>)
 8006bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8006c00:	095b      	lsrs	r3, r3, #5
 8006c02:	f003 0207 	and.w	r2, r3, #7
 8006c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4422      	add	r2, r4
 8006c0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c10:	e106      	b.n	8006e20 <UART_SetConfig+0x4d8>
 8006c12:	bf00      	nop
 8006c14:	40011000 	.word	0x40011000
 8006c18:	40011400 	.word	0x40011400
 8006c1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006c2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006c32:	4642      	mov	r2, r8
 8006c34:	464b      	mov	r3, r9
 8006c36:	1891      	adds	r1, r2, r2
 8006c38:	6239      	str	r1, [r7, #32]
 8006c3a:	415b      	adcs	r3, r3
 8006c3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c42:	4641      	mov	r1, r8
 8006c44:	1854      	adds	r4, r2, r1
 8006c46:	4649      	mov	r1, r9
 8006c48:	eb43 0501 	adc.w	r5, r3, r1
 8006c4c:	f04f 0200 	mov.w	r2, #0
 8006c50:	f04f 0300 	mov.w	r3, #0
 8006c54:	00eb      	lsls	r3, r5, #3
 8006c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c5a:	00e2      	lsls	r2, r4, #3
 8006c5c:	4614      	mov	r4, r2
 8006c5e:	461d      	mov	r5, r3
 8006c60:	4643      	mov	r3, r8
 8006c62:	18e3      	adds	r3, r4, r3
 8006c64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c68:	464b      	mov	r3, r9
 8006c6a:	eb45 0303 	adc.w	r3, r5, r3
 8006c6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c82:	f04f 0200 	mov.w	r2, #0
 8006c86:	f04f 0300 	mov.w	r3, #0
 8006c8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006c8e:	4629      	mov	r1, r5
 8006c90:	008b      	lsls	r3, r1, #2
 8006c92:	4621      	mov	r1, r4
 8006c94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c98:	4621      	mov	r1, r4
 8006c9a:	008a      	lsls	r2, r1, #2
 8006c9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006ca0:	f7f9 ff8a 	bl	8000bb8 <__aeabi_uldivmod>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4b60      	ldr	r3, [pc, #384]	@ (8006e2c <UART_SetConfig+0x4e4>)
 8006caa:	fba3 2302 	umull	r2, r3, r3, r2
 8006cae:	095b      	lsrs	r3, r3, #5
 8006cb0:	011c      	lsls	r4, r3, #4
 8006cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006cbc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006cc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	464b      	mov	r3, r9
 8006cc8:	1891      	adds	r1, r2, r2
 8006cca:	61b9      	str	r1, [r7, #24]
 8006ccc:	415b      	adcs	r3, r3
 8006cce:	61fb      	str	r3, [r7, #28]
 8006cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cd4:	4641      	mov	r1, r8
 8006cd6:	1851      	adds	r1, r2, r1
 8006cd8:	6139      	str	r1, [r7, #16]
 8006cda:	4649      	mov	r1, r9
 8006cdc:	414b      	adcs	r3, r1
 8006cde:	617b      	str	r3, [r7, #20]
 8006ce0:	f04f 0200 	mov.w	r2, #0
 8006ce4:	f04f 0300 	mov.w	r3, #0
 8006ce8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cec:	4659      	mov	r1, fp
 8006cee:	00cb      	lsls	r3, r1, #3
 8006cf0:	4651      	mov	r1, sl
 8006cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cf6:	4651      	mov	r1, sl
 8006cf8:	00ca      	lsls	r2, r1, #3
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	4603      	mov	r3, r0
 8006d00:	4642      	mov	r2, r8
 8006d02:	189b      	adds	r3, r3, r2
 8006d04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d08:	464b      	mov	r3, r9
 8006d0a:	460a      	mov	r2, r1
 8006d0c:	eb42 0303 	adc.w	r3, r2, r3
 8006d10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	f04f 0300 	mov.w	r3, #0
 8006d28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	008b      	lsls	r3, r1, #2
 8006d30:	4641      	mov	r1, r8
 8006d32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d36:	4641      	mov	r1, r8
 8006d38:	008a      	lsls	r2, r1, #2
 8006d3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006d3e:	f7f9 ff3b 	bl	8000bb8 <__aeabi_uldivmod>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4611      	mov	r1, r2
 8006d48:	4b38      	ldr	r3, [pc, #224]	@ (8006e2c <UART_SetConfig+0x4e4>)
 8006d4a:	fba3 2301 	umull	r2, r3, r3, r1
 8006d4e:	095b      	lsrs	r3, r3, #5
 8006d50:	2264      	movs	r2, #100	@ 0x64
 8006d52:	fb02 f303 	mul.w	r3, r2, r3
 8006d56:	1acb      	subs	r3, r1, r3
 8006d58:	011b      	lsls	r3, r3, #4
 8006d5a:	3332      	adds	r3, #50	@ 0x32
 8006d5c:	4a33      	ldr	r2, [pc, #204]	@ (8006e2c <UART_SetConfig+0x4e4>)
 8006d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d62:	095b      	lsrs	r3, r3, #5
 8006d64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d68:	441c      	add	r4, r3
 8006d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d6e:	2200      	movs	r2, #0
 8006d70:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d72:	677a      	str	r2, [r7, #116]	@ 0x74
 8006d74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006d78:	4642      	mov	r2, r8
 8006d7a:	464b      	mov	r3, r9
 8006d7c:	1891      	adds	r1, r2, r2
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	415b      	adcs	r3, r3
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d88:	4641      	mov	r1, r8
 8006d8a:	1851      	adds	r1, r2, r1
 8006d8c:	6039      	str	r1, [r7, #0]
 8006d8e:	4649      	mov	r1, r9
 8006d90:	414b      	adcs	r3, r1
 8006d92:	607b      	str	r3, [r7, #4]
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	f04f 0300 	mov.w	r3, #0
 8006d9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006da0:	4659      	mov	r1, fp
 8006da2:	00cb      	lsls	r3, r1, #3
 8006da4:	4651      	mov	r1, sl
 8006da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006daa:	4651      	mov	r1, sl
 8006dac:	00ca      	lsls	r2, r1, #3
 8006dae:	4610      	mov	r0, r2
 8006db0:	4619      	mov	r1, r3
 8006db2:	4603      	mov	r3, r0
 8006db4:	4642      	mov	r2, r8
 8006db6:	189b      	adds	r3, r3, r2
 8006db8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006dba:	464b      	mov	r3, r9
 8006dbc:	460a      	mov	r2, r1
 8006dbe:	eb42 0303 	adc.w	r3, r2, r3
 8006dc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dce:	667a      	str	r2, [r7, #100]	@ 0x64
 8006dd0:	f04f 0200 	mov.w	r2, #0
 8006dd4:	f04f 0300 	mov.w	r3, #0
 8006dd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006ddc:	4649      	mov	r1, r9
 8006dde:	008b      	lsls	r3, r1, #2
 8006de0:	4641      	mov	r1, r8
 8006de2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006de6:	4641      	mov	r1, r8
 8006de8:	008a      	lsls	r2, r1, #2
 8006dea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006dee:	f7f9 fee3 	bl	8000bb8 <__aeabi_uldivmod>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4b0d      	ldr	r3, [pc, #52]	@ (8006e2c <UART_SetConfig+0x4e4>)
 8006df8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dfc:	095b      	lsrs	r3, r3, #5
 8006dfe:	2164      	movs	r1, #100	@ 0x64
 8006e00:	fb01 f303 	mul.w	r3, r1, r3
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	3332      	adds	r3, #50	@ 0x32
 8006e0a:	4a08      	ldr	r2, [pc, #32]	@ (8006e2c <UART_SetConfig+0x4e4>)
 8006e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e10:	095b      	lsrs	r3, r3, #5
 8006e12:	f003 020f 	and.w	r2, r3, #15
 8006e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4422      	add	r2, r4
 8006e1e:	609a      	str	r2, [r3, #8]
}
 8006e20:	bf00      	nop
 8006e22:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e26:	46bd      	mov	sp, r7
 8006e28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e2c:	51eb851f 	.word	0x51eb851f

08006e30 <malloc>:
 8006e30:	4b02      	ldr	r3, [pc, #8]	@ (8006e3c <malloc+0xc>)
 8006e32:	4601      	mov	r1, r0
 8006e34:	6818      	ldr	r0, [r3, #0]
 8006e36:	f000 b825 	b.w	8006e84 <_malloc_r>
 8006e3a:	bf00      	nop
 8006e3c:	20000040 	.word	0x20000040

08006e40 <sbrk_aligned>:
 8006e40:	b570      	push	{r4, r5, r6, lr}
 8006e42:	4e0f      	ldr	r6, [pc, #60]	@ (8006e80 <sbrk_aligned+0x40>)
 8006e44:	460c      	mov	r4, r1
 8006e46:	6831      	ldr	r1, [r6, #0]
 8006e48:	4605      	mov	r5, r0
 8006e4a:	b911      	cbnz	r1, 8006e52 <sbrk_aligned+0x12>
 8006e4c:	f000 fe64 	bl	8007b18 <_sbrk_r>
 8006e50:	6030      	str	r0, [r6, #0]
 8006e52:	4621      	mov	r1, r4
 8006e54:	4628      	mov	r0, r5
 8006e56:	f000 fe5f 	bl	8007b18 <_sbrk_r>
 8006e5a:	1c43      	adds	r3, r0, #1
 8006e5c:	d103      	bne.n	8006e66 <sbrk_aligned+0x26>
 8006e5e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006e62:	4620      	mov	r0, r4
 8006e64:	bd70      	pop	{r4, r5, r6, pc}
 8006e66:	1cc4      	adds	r4, r0, #3
 8006e68:	f024 0403 	bic.w	r4, r4, #3
 8006e6c:	42a0      	cmp	r0, r4
 8006e6e:	d0f8      	beq.n	8006e62 <sbrk_aligned+0x22>
 8006e70:	1a21      	subs	r1, r4, r0
 8006e72:	4628      	mov	r0, r5
 8006e74:	f000 fe50 	bl	8007b18 <_sbrk_r>
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d1f2      	bne.n	8006e62 <sbrk_aligned+0x22>
 8006e7c:	e7ef      	b.n	8006e5e <sbrk_aligned+0x1e>
 8006e7e:	bf00      	nop
 8006e80:	2000067c 	.word	0x2000067c

08006e84 <_malloc_r>:
 8006e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e88:	1ccd      	adds	r5, r1, #3
 8006e8a:	f025 0503 	bic.w	r5, r5, #3
 8006e8e:	3508      	adds	r5, #8
 8006e90:	2d0c      	cmp	r5, #12
 8006e92:	bf38      	it	cc
 8006e94:	250c      	movcc	r5, #12
 8006e96:	2d00      	cmp	r5, #0
 8006e98:	4606      	mov	r6, r0
 8006e9a:	db01      	blt.n	8006ea0 <_malloc_r+0x1c>
 8006e9c:	42a9      	cmp	r1, r5
 8006e9e:	d904      	bls.n	8006eaa <_malloc_r+0x26>
 8006ea0:	230c      	movs	r3, #12
 8006ea2:	6033      	str	r3, [r6, #0]
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f80 <_malloc_r+0xfc>
 8006eae:	f000 f869 	bl	8006f84 <__malloc_lock>
 8006eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8006eb6:	461c      	mov	r4, r3
 8006eb8:	bb44      	cbnz	r4, 8006f0c <_malloc_r+0x88>
 8006eba:	4629      	mov	r1, r5
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	f7ff ffbf 	bl	8006e40 <sbrk_aligned>
 8006ec2:	1c43      	adds	r3, r0, #1
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	d158      	bne.n	8006f7a <_malloc_r+0xf6>
 8006ec8:	f8d8 4000 	ldr.w	r4, [r8]
 8006ecc:	4627      	mov	r7, r4
 8006ece:	2f00      	cmp	r7, #0
 8006ed0:	d143      	bne.n	8006f5a <_malloc_r+0xd6>
 8006ed2:	2c00      	cmp	r4, #0
 8006ed4:	d04b      	beq.n	8006f6e <_malloc_r+0xea>
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	4639      	mov	r1, r7
 8006eda:	4630      	mov	r0, r6
 8006edc:	eb04 0903 	add.w	r9, r4, r3
 8006ee0:	f000 fe1a 	bl	8007b18 <_sbrk_r>
 8006ee4:	4581      	cmp	r9, r0
 8006ee6:	d142      	bne.n	8006f6e <_malloc_r+0xea>
 8006ee8:	6821      	ldr	r1, [r4, #0]
 8006eea:	1a6d      	subs	r5, r5, r1
 8006eec:	4629      	mov	r1, r5
 8006eee:	4630      	mov	r0, r6
 8006ef0:	f7ff ffa6 	bl	8006e40 <sbrk_aligned>
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d03a      	beq.n	8006f6e <_malloc_r+0xea>
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	442b      	add	r3, r5
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	f8d8 3000 	ldr.w	r3, [r8]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	bb62      	cbnz	r2, 8006f60 <_malloc_r+0xdc>
 8006f06:	f8c8 7000 	str.w	r7, [r8]
 8006f0a:	e00f      	b.n	8006f2c <_malloc_r+0xa8>
 8006f0c:	6822      	ldr	r2, [r4, #0]
 8006f0e:	1b52      	subs	r2, r2, r5
 8006f10:	d420      	bmi.n	8006f54 <_malloc_r+0xd0>
 8006f12:	2a0b      	cmp	r2, #11
 8006f14:	d917      	bls.n	8006f46 <_malloc_r+0xc2>
 8006f16:	1961      	adds	r1, r4, r5
 8006f18:	42a3      	cmp	r3, r4
 8006f1a:	6025      	str	r5, [r4, #0]
 8006f1c:	bf18      	it	ne
 8006f1e:	6059      	strne	r1, [r3, #4]
 8006f20:	6863      	ldr	r3, [r4, #4]
 8006f22:	bf08      	it	eq
 8006f24:	f8c8 1000 	streq.w	r1, [r8]
 8006f28:	5162      	str	r2, [r4, r5]
 8006f2a:	604b      	str	r3, [r1, #4]
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f000 f82f 	bl	8006f90 <__malloc_unlock>
 8006f32:	f104 000b 	add.w	r0, r4, #11
 8006f36:	1d23      	adds	r3, r4, #4
 8006f38:	f020 0007 	bic.w	r0, r0, #7
 8006f3c:	1ac2      	subs	r2, r0, r3
 8006f3e:	bf1c      	itt	ne
 8006f40:	1a1b      	subne	r3, r3, r0
 8006f42:	50a3      	strne	r3, [r4, r2]
 8006f44:	e7af      	b.n	8006ea6 <_malloc_r+0x22>
 8006f46:	6862      	ldr	r2, [r4, #4]
 8006f48:	42a3      	cmp	r3, r4
 8006f4a:	bf0c      	ite	eq
 8006f4c:	f8c8 2000 	streq.w	r2, [r8]
 8006f50:	605a      	strne	r2, [r3, #4]
 8006f52:	e7eb      	b.n	8006f2c <_malloc_r+0xa8>
 8006f54:	4623      	mov	r3, r4
 8006f56:	6864      	ldr	r4, [r4, #4]
 8006f58:	e7ae      	b.n	8006eb8 <_malloc_r+0x34>
 8006f5a:	463c      	mov	r4, r7
 8006f5c:	687f      	ldr	r7, [r7, #4]
 8006f5e:	e7b6      	b.n	8006ece <_malloc_r+0x4a>
 8006f60:	461a      	mov	r2, r3
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	d1fb      	bne.n	8006f60 <_malloc_r+0xdc>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	6053      	str	r3, [r2, #4]
 8006f6c:	e7de      	b.n	8006f2c <_malloc_r+0xa8>
 8006f6e:	230c      	movs	r3, #12
 8006f70:	6033      	str	r3, [r6, #0]
 8006f72:	4630      	mov	r0, r6
 8006f74:	f000 f80c 	bl	8006f90 <__malloc_unlock>
 8006f78:	e794      	b.n	8006ea4 <_malloc_r+0x20>
 8006f7a:	6005      	str	r5, [r0, #0]
 8006f7c:	e7d6      	b.n	8006f2c <_malloc_r+0xa8>
 8006f7e:	bf00      	nop
 8006f80:	20000680 	.word	0x20000680

08006f84 <__malloc_lock>:
 8006f84:	4801      	ldr	r0, [pc, #4]	@ (8006f8c <__malloc_lock+0x8>)
 8006f86:	f000 be14 	b.w	8007bb2 <__retarget_lock_acquire_recursive>
 8006f8a:	bf00      	nop
 8006f8c:	200007c4 	.word	0x200007c4

08006f90 <__malloc_unlock>:
 8006f90:	4801      	ldr	r0, [pc, #4]	@ (8006f98 <__malloc_unlock+0x8>)
 8006f92:	f000 be0f 	b.w	8007bb4 <__retarget_lock_release_recursive>
 8006f96:	bf00      	nop
 8006f98:	200007c4 	.word	0x200007c4

08006f9c <__cvt>:
 8006f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa0:	ec57 6b10 	vmov	r6, r7, d0
 8006fa4:	2f00      	cmp	r7, #0
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	4619      	mov	r1, r3
 8006faa:	463b      	mov	r3, r7
 8006fac:	bfbb      	ittet	lt
 8006fae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006fb2:	461f      	movlt	r7, r3
 8006fb4:	2300      	movge	r3, #0
 8006fb6:	232d      	movlt	r3, #45	@ 0x2d
 8006fb8:	700b      	strb	r3, [r1, #0]
 8006fba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fbc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006fc0:	4691      	mov	r9, r2
 8006fc2:	f023 0820 	bic.w	r8, r3, #32
 8006fc6:	bfbc      	itt	lt
 8006fc8:	4632      	movlt	r2, r6
 8006fca:	4616      	movlt	r6, r2
 8006fcc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006fd0:	d005      	beq.n	8006fde <__cvt+0x42>
 8006fd2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006fd6:	d100      	bne.n	8006fda <__cvt+0x3e>
 8006fd8:	3401      	adds	r4, #1
 8006fda:	2102      	movs	r1, #2
 8006fdc:	e000      	b.n	8006fe0 <__cvt+0x44>
 8006fde:	2103      	movs	r1, #3
 8006fe0:	ab03      	add	r3, sp, #12
 8006fe2:	9301      	str	r3, [sp, #4]
 8006fe4:	ab02      	add	r3, sp, #8
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	ec47 6b10 	vmov	d0, r6, r7
 8006fec:	4653      	mov	r3, sl
 8006fee:	4622      	mov	r2, r4
 8006ff0:	f000 fe72 	bl	8007cd8 <_dtoa_r>
 8006ff4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006ff8:	4605      	mov	r5, r0
 8006ffa:	d119      	bne.n	8007030 <__cvt+0x94>
 8006ffc:	f019 0f01 	tst.w	r9, #1
 8007000:	d00e      	beq.n	8007020 <__cvt+0x84>
 8007002:	eb00 0904 	add.w	r9, r0, r4
 8007006:	2200      	movs	r2, #0
 8007008:	2300      	movs	r3, #0
 800700a:	4630      	mov	r0, r6
 800700c:	4639      	mov	r1, r7
 800700e:	f7f9 fd63 	bl	8000ad8 <__aeabi_dcmpeq>
 8007012:	b108      	cbz	r0, 8007018 <__cvt+0x7c>
 8007014:	f8cd 900c 	str.w	r9, [sp, #12]
 8007018:	2230      	movs	r2, #48	@ 0x30
 800701a:	9b03      	ldr	r3, [sp, #12]
 800701c:	454b      	cmp	r3, r9
 800701e:	d31e      	bcc.n	800705e <__cvt+0xc2>
 8007020:	9b03      	ldr	r3, [sp, #12]
 8007022:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007024:	1b5b      	subs	r3, r3, r5
 8007026:	4628      	mov	r0, r5
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	b004      	add	sp, #16
 800702c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007030:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007034:	eb00 0904 	add.w	r9, r0, r4
 8007038:	d1e5      	bne.n	8007006 <__cvt+0x6a>
 800703a:	7803      	ldrb	r3, [r0, #0]
 800703c:	2b30      	cmp	r3, #48	@ 0x30
 800703e:	d10a      	bne.n	8007056 <__cvt+0xba>
 8007040:	2200      	movs	r2, #0
 8007042:	2300      	movs	r3, #0
 8007044:	4630      	mov	r0, r6
 8007046:	4639      	mov	r1, r7
 8007048:	f7f9 fd46 	bl	8000ad8 <__aeabi_dcmpeq>
 800704c:	b918      	cbnz	r0, 8007056 <__cvt+0xba>
 800704e:	f1c4 0401 	rsb	r4, r4, #1
 8007052:	f8ca 4000 	str.w	r4, [sl]
 8007056:	f8da 3000 	ldr.w	r3, [sl]
 800705a:	4499      	add	r9, r3
 800705c:	e7d3      	b.n	8007006 <__cvt+0x6a>
 800705e:	1c59      	adds	r1, r3, #1
 8007060:	9103      	str	r1, [sp, #12]
 8007062:	701a      	strb	r2, [r3, #0]
 8007064:	e7d9      	b.n	800701a <__cvt+0x7e>

08007066 <__exponent>:
 8007066:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007068:	2900      	cmp	r1, #0
 800706a:	bfba      	itte	lt
 800706c:	4249      	neglt	r1, r1
 800706e:	232d      	movlt	r3, #45	@ 0x2d
 8007070:	232b      	movge	r3, #43	@ 0x2b
 8007072:	2909      	cmp	r1, #9
 8007074:	7002      	strb	r2, [r0, #0]
 8007076:	7043      	strb	r3, [r0, #1]
 8007078:	dd29      	ble.n	80070ce <__exponent+0x68>
 800707a:	f10d 0307 	add.w	r3, sp, #7
 800707e:	461d      	mov	r5, r3
 8007080:	270a      	movs	r7, #10
 8007082:	461a      	mov	r2, r3
 8007084:	fbb1 f6f7 	udiv	r6, r1, r7
 8007088:	fb07 1416 	mls	r4, r7, r6, r1
 800708c:	3430      	adds	r4, #48	@ 0x30
 800708e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007092:	460c      	mov	r4, r1
 8007094:	2c63      	cmp	r4, #99	@ 0x63
 8007096:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800709a:	4631      	mov	r1, r6
 800709c:	dcf1      	bgt.n	8007082 <__exponent+0x1c>
 800709e:	3130      	adds	r1, #48	@ 0x30
 80070a0:	1e94      	subs	r4, r2, #2
 80070a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80070a6:	1c41      	adds	r1, r0, #1
 80070a8:	4623      	mov	r3, r4
 80070aa:	42ab      	cmp	r3, r5
 80070ac:	d30a      	bcc.n	80070c4 <__exponent+0x5e>
 80070ae:	f10d 0309 	add.w	r3, sp, #9
 80070b2:	1a9b      	subs	r3, r3, r2
 80070b4:	42ac      	cmp	r4, r5
 80070b6:	bf88      	it	hi
 80070b8:	2300      	movhi	r3, #0
 80070ba:	3302      	adds	r3, #2
 80070bc:	4403      	add	r3, r0
 80070be:	1a18      	subs	r0, r3, r0
 80070c0:	b003      	add	sp, #12
 80070c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80070c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80070cc:	e7ed      	b.n	80070aa <__exponent+0x44>
 80070ce:	2330      	movs	r3, #48	@ 0x30
 80070d0:	3130      	adds	r1, #48	@ 0x30
 80070d2:	7083      	strb	r3, [r0, #2]
 80070d4:	70c1      	strb	r1, [r0, #3]
 80070d6:	1d03      	adds	r3, r0, #4
 80070d8:	e7f1      	b.n	80070be <__exponent+0x58>
	...

080070dc <_printf_float>:
 80070dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e0:	b08d      	sub	sp, #52	@ 0x34
 80070e2:	460c      	mov	r4, r1
 80070e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80070e8:	4616      	mov	r6, r2
 80070ea:	461f      	mov	r7, r3
 80070ec:	4605      	mov	r5, r0
 80070ee:	f000 fcdb 	bl	8007aa8 <_localeconv_r>
 80070f2:	6803      	ldr	r3, [r0, #0]
 80070f4:	9304      	str	r3, [sp, #16]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7f9 f8c2 	bl	8000280 <strlen>
 80070fc:	2300      	movs	r3, #0
 80070fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007100:	f8d8 3000 	ldr.w	r3, [r8]
 8007104:	9005      	str	r0, [sp, #20]
 8007106:	3307      	adds	r3, #7
 8007108:	f023 0307 	bic.w	r3, r3, #7
 800710c:	f103 0208 	add.w	r2, r3, #8
 8007110:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007114:	f8d4 b000 	ldr.w	fp, [r4]
 8007118:	f8c8 2000 	str.w	r2, [r8]
 800711c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007120:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007124:	9307      	str	r3, [sp, #28]
 8007126:	f8cd 8018 	str.w	r8, [sp, #24]
 800712a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800712e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007132:	4b9c      	ldr	r3, [pc, #624]	@ (80073a4 <_printf_float+0x2c8>)
 8007134:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007138:	f7f9 fd00 	bl	8000b3c <__aeabi_dcmpun>
 800713c:	bb70      	cbnz	r0, 800719c <_printf_float+0xc0>
 800713e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007142:	4b98      	ldr	r3, [pc, #608]	@ (80073a4 <_printf_float+0x2c8>)
 8007144:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007148:	f7f9 fcda 	bl	8000b00 <__aeabi_dcmple>
 800714c:	bb30      	cbnz	r0, 800719c <_printf_float+0xc0>
 800714e:	2200      	movs	r2, #0
 8007150:	2300      	movs	r3, #0
 8007152:	4640      	mov	r0, r8
 8007154:	4649      	mov	r1, r9
 8007156:	f7f9 fcc9 	bl	8000aec <__aeabi_dcmplt>
 800715a:	b110      	cbz	r0, 8007162 <_printf_float+0x86>
 800715c:	232d      	movs	r3, #45	@ 0x2d
 800715e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007162:	4a91      	ldr	r2, [pc, #580]	@ (80073a8 <_printf_float+0x2cc>)
 8007164:	4b91      	ldr	r3, [pc, #580]	@ (80073ac <_printf_float+0x2d0>)
 8007166:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800716a:	bf94      	ite	ls
 800716c:	4690      	movls	r8, r2
 800716e:	4698      	movhi	r8, r3
 8007170:	2303      	movs	r3, #3
 8007172:	6123      	str	r3, [r4, #16]
 8007174:	f02b 0304 	bic.w	r3, fp, #4
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	f04f 0900 	mov.w	r9, #0
 800717e:	9700      	str	r7, [sp, #0]
 8007180:	4633      	mov	r3, r6
 8007182:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007184:	4621      	mov	r1, r4
 8007186:	4628      	mov	r0, r5
 8007188:	f000 f9d2 	bl	8007530 <_printf_common>
 800718c:	3001      	adds	r0, #1
 800718e:	f040 808d 	bne.w	80072ac <_printf_float+0x1d0>
 8007192:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007196:	b00d      	add	sp, #52	@ 0x34
 8007198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719c:	4642      	mov	r2, r8
 800719e:	464b      	mov	r3, r9
 80071a0:	4640      	mov	r0, r8
 80071a2:	4649      	mov	r1, r9
 80071a4:	f7f9 fcca 	bl	8000b3c <__aeabi_dcmpun>
 80071a8:	b140      	cbz	r0, 80071bc <_printf_float+0xe0>
 80071aa:	464b      	mov	r3, r9
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bfbc      	itt	lt
 80071b0:	232d      	movlt	r3, #45	@ 0x2d
 80071b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80071b6:	4a7e      	ldr	r2, [pc, #504]	@ (80073b0 <_printf_float+0x2d4>)
 80071b8:	4b7e      	ldr	r3, [pc, #504]	@ (80073b4 <_printf_float+0x2d8>)
 80071ba:	e7d4      	b.n	8007166 <_printf_float+0x8a>
 80071bc:	6863      	ldr	r3, [r4, #4]
 80071be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80071c2:	9206      	str	r2, [sp, #24]
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	d13b      	bne.n	8007240 <_printf_float+0x164>
 80071c8:	2306      	movs	r3, #6
 80071ca:	6063      	str	r3, [r4, #4]
 80071cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80071d0:	2300      	movs	r3, #0
 80071d2:	6022      	str	r2, [r4, #0]
 80071d4:	9303      	str	r3, [sp, #12]
 80071d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80071d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80071dc:	ab09      	add	r3, sp, #36	@ 0x24
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	6861      	ldr	r1, [r4, #4]
 80071e2:	ec49 8b10 	vmov	d0, r8, r9
 80071e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80071ea:	4628      	mov	r0, r5
 80071ec:	f7ff fed6 	bl	8006f9c <__cvt>
 80071f0:	9b06      	ldr	r3, [sp, #24]
 80071f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071f4:	2b47      	cmp	r3, #71	@ 0x47
 80071f6:	4680      	mov	r8, r0
 80071f8:	d129      	bne.n	800724e <_printf_float+0x172>
 80071fa:	1cc8      	adds	r0, r1, #3
 80071fc:	db02      	blt.n	8007204 <_printf_float+0x128>
 80071fe:	6863      	ldr	r3, [r4, #4]
 8007200:	4299      	cmp	r1, r3
 8007202:	dd41      	ble.n	8007288 <_printf_float+0x1ac>
 8007204:	f1aa 0a02 	sub.w	sl, sl, #2
 8007208:	fa5f fa8a 	uxtb.w	sl, sl
 800720c:	3901      	subs	r1, #1
 800720e:	4652      	mov	r2, sl
 8007210:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007214:	9109      	str	r1, [sp, #36]	@ 0x24
 8007216:	f7ff ff26 	bl	8007066 <__exponent>
 800721a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800721c:	1813      	adds	r3, r2, r0
 800721e:	2a01      	cmp	r2, #1
 8007220:	4681      	mov	r9, r0
 8007222:	6123      	str	r3, [r4, #16]
 8007224:	dc02      	bgt.n	800722c <_printf_float+0x150>
 8007226:	6822      	ldr	r2, [r4, #0]
 8007228:	07d2      	lsls	r2, r2, #31
 800722a:	d501      	bpl.n	8007230 <_printf_float+0x154>
 800722c:	3301      	adds	r3, #1
 800722e:	6123      	str	r3, [r4, #16]
 8007230:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0a2      	beq.n	800717e <_printf_float+0xa2>
 8007238:	232d      	movs	r3, #45	@ 0x2d
 800723a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800723e:	e79e      	b.n	800717e <_printf_float+0xa2>
 8007240:	9a06      	ldr	r2, [sp, #24]
 8007242:	2a47      	cmp	r2, #71	@ 0x47
 8007244:	d1c2      	bne.n	80071cc <_printf_float+0xf0>
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1c0      	bne.n	80071cc <_printf_float+0xf0>
 800724a:	2301      	movs	r3, #1
 800724c:	e7bd      	b.n	80071ca <_printf_float+0xee>
 800724e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007252:	d9db      	bls.n	800720c <_printf_float+0x130>
 8007254:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007258:	d118      	bne.n	800728c <_printf_float+0x1b0>
 800725a:	2900      	cmp	r1, #0
 800725c:	6863      	ldr	r3, [r4, #4]
 800725e:	dd0b      	ble.n	8007278 <_printf_float+0x19c>
 8007260:	6121      	str	r1, [r4, #16]
 8007262:	b913      	cbnz	r3, 800726a <_printf_float+0x18e>
 8007264:	6822      	ldr	r2, [r4, #0]
 8007266:	07d0      	lsls	r0, r2, #31
 8007268:	d502      	bpl.n	8007270 <_printf_float+0x194>
 800726a:	3301      	adds	r3, #1
 800726c:	440b      	add	r3, r1
 800726e:	6123      	str	r3, [r4, #16]
 8007270:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007272:	f04f 0900 	mov.w	r9, #0
 8007276:	e7db      	b.n	8007230 <_printf_float+0x154>
 8007278:	b913      	cbnz	r3, 8007280 <_printf_float+0x1a4>
 800727a:	6822      	ldr	r2, [r4, #0]
 800727c:	07d2      	lsls	r2, r2, #31
 800727e:	d501      	bpl.n	8007284 <_printf_float+0x1a8>
 8007280:	3302      	adds	r3, #2
 8007282:	e7f4      	b.n	800726e <_printf_float+0x192>
 8007284:	2301      	movs	r3, #1
 8007286:	e7f2      	b.n	800726e <_printf_float+0x192>
 8007288:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800728c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800728e:	4299      	cmp	r1, r3
 8007290:	db05      	blt.n	800729e <_printf_float+0x1c2>
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	6121      	str	r1, [r4, #16]
 8007296:	07d8      	lsls	r0, r3, #31
 8007298:	d5ea      	bpl.n	8007270 <_printf_float+0x194>
 800729a:	1c4b      	adds	r3, r1, #1
 800729c:	e7e7      	b.n	800726e <_printf_float+0x192>
 800729e:	2900      	cmp	r1, #0
 80072a0:	bfd4      	ite	le
 80072a2:	f1c1 0202 	rsble	r2, r1, #2
 80072a6:	2201      	movgt	r2, #1
 80072a8:	4413      	add	r3, r2
 80072aa:	e7e0      	b.n	800726e <_printf_float+0x192>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	055a      	lsls	r2, r3, #21
 80072b0:	d407      	bmi.n	80072c2 <_printf_float+0x1e6>
 80072b2:	6923      	ldr	r3, [r4, #16]
 80072b4:	4642      	mov	r2, r8
 80072b6:	4631      	mov	r1, r6
 80072b8:	4628      	mov	r0, r5
 80072ba:	47b8      	blx	r7
 80072bc:	3001      	adds	r0, #1
 80072be:	d12b      	bne.n	8007318 <_printf_float+0x23c>
 80072c0:	e767      	b.n	8007192 <_printf_float+0xb6>
 80072c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80072c6:	f240 80dd 	bls.w	8007484 <_printf_float+0x3a8>
 80072ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80072ce:	2200      	movs	r2, #0
 80072d0:	2300      	movs	r3, #0
 80072d2:	f7f9 fc01 	bl	8000ad8 <__aeabi_dcmpeq>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	d033      	beq.n	8007342 <_printf_float+0x266>
 80072da:	4a37      	ldr	r2, [pc, #220]	@ (80073b8 <_printf_float+0x2dc>)
 80072dc:	2301      	movs	r3, #1
 80072de:	4631      	mov	r1, r6
 80072e0:	4628      	mov	r0, r5
 80072e2:	47b8      	blx	r7
 80072e4:	3001      	adds	r0, #1
 80072e6:	f43f af54 	beq.w	8007192 <_printf_float+0xb6>
 80072ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80072ee:	4543      	cmp	r3, r8
 80072f0:	db02      	blt.n	80072f8 <_printf_float+0x21c>
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	07d8      	lsls	r0, r3, #31
 80072f6:	d50f      	bpl.n	8007318 <_printf_float+0x23c>
 80072f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072fc:	4631      	mov	r1, r6
 80072fe:	4628      	mov	r0, r5
 8007300:	47b8      	blx	r7
 8007302:	3001      	adds	r0, #1
 8007304:	f43f af45 	beq.w	8007192 <_printf_float+0xb6>
 8007308:	f04f 0900 	mov.w	r9, #0
 800730c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007310:	f104 0a1a 	add.w	sl, r4, #26
 8007314:	45c8      	cmp	r8, r9
 8007316:	dc09      	bgt.n	800732c <_printf_float+0x250>
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	079b      	lsls	r3, r3, #30
 800731c:	f100 8103 	bmi.w	8007526 <_printf_float+0x44a>
 8007320:	68e0      	ldr	r0, [r4, #12]
 8007322:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007324:	4298      	cmp	r0, r3
 8007326:	bfb8      	it	lt
 8007328:	4618      	movlt	r0, r3
 800732a:	e734      	b.n	8007196 <_printf_float+0xba>
 800732c:	2301      	movs	r3, #1
 800732e:	4652      	mov	r2, sl
 8007330:	4631      	mov	r1, r6
 8007332:	4628      	mov	r0, r5
 8007334:	47b8      	blx	r7
 8007336:	3001      	adds	r0, #1
 8007338:	f43f af2b 	beq.w	8007192 <_printf_float+0xb6>
 800733c:	f109 0901 	add.w	r9, r9, #1
 8007340:	e7e8      	b.n	8007314 <_printf_float+0x238>
 8007342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007344:	2b00      	cmp	r3, #0
 8007346:	dc39      	bgt.n	80073bc <_printf_float+0x2e0>
 8007348:	4a1b      	ldr	r2, [pc, #108]	@ (80073b8 <_printf_float+0x2dc>)
 800734a:	2301      	movs	r3, #1
 800734c:	4631      	mov	r1, r6
 800734e:	4628      	mov	r0, r5
 8007350:	47b8      	blx	r7
 8007352:	3001      	adds	r0, #1
 8007354:	f43f af1d 	beq.w	8007192 <_printf_float+0xb6>
 8007358:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800735c:	ea59 0303 	orrs.w	r3, r9, r3
 8007360:	d102      	bne.n	8007368 <_printf_float+0x28c>
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	07d9      	lsls	r1, r3, #31
 8007366:	d5d7      	bpl.n	8007318 <_printf_float+0x23c>
 8007368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800736c:	4631      	mov	r1, r6
 800736e:	4628      	mov	r0, r5
 8007370:	47b8      	blx	r7
 8007372:	3001      	adds	r0, #1
 8007374:	f43f af0d 	beq.w	8007192 <_printf_float+0xb6>
 8007378:	f04f 0a00 	mov.w	sl, #0
 800737c:	f104 0b1a 	add.w	fp, r4, #26
 8007380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007382:	425b      	negs	r3, r3
 8007384:	4553      	cmp	r3, sl
 8007386:	dc01      	bgt.n	800738c <_printf_float+0x2b0>
 8007388:	464b      	mov	r3, r9
 800738a:	e793      	b.n	80072b4 <_printf_float+0x1d8>
 800738c:	2301      	movs	r3, #1
 800738e:	465a      	mov	r2, fp
 8007390:	4631      	mov	r1, r6
 8007392:	4628      	mov	r0, r5
 8007394:	47b8      	blx	r7
 8007396:	3001      	adds	r0, #1
 8007398:	f43f aefb 	beq.w	8007192 <_printf_float+0xb6>
 800739c:	f10a 0a01 	add.w	sl, sl, #1
 80073a0:	e7ee      	b.n	8007380 <_printf_float+0x2a4>
 80073a2:	bf00      	nop
 80073a4:	7fefffff 	.word	0x7fefffff
 80073a8:	0800b070 	.word	0x0800b070
 80073ac:	0800b074 	.word	0x0800b074
 80073b0:	0800b078 	.word	0x0800b078
 80073b4:	0800b07c 	.word	0x0800b07c
 80073b8:	0800b080 	.word	0x0800b080
 80073bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80073be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80073c2:	4553      	cmp	r3, sl
 80073c4:	bfa8      	it	ge
 80073c6:	4653      	movge	r3, sl
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	4699      	mov	r9, r3
 80073cc:	dc36      	bgt.n	800743c <_printf_float+0x360>
 80073ce:	f04f 0b00 	mov.w	fp, #0
 80073d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073d6:	f104 021a 	add.w	r2, r4, #26
 80073da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80073dc:	9306      	str	r3, [sp, #24]
 80073de:	eba3 0309 	sub.w	r3, r3, r9
 80073e2:	455b      	cmp	r3, fp
 80073e4:	dc31      	bgt.n	800744a <_printf_float+0x36e>
 80073e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e8:	459a      	cmp	sl, r3
 80073ea:	dc3a      	bgt.n	8007462 <_printf_float+0x386>
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	07da      	lsls	r2, r3, #31
 80073f0:	d437      	bmi.n	8007462 <_printf_float+0x386>
 80073f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f4:	ebaa 0903 	sub.w	r9, sl, r3
 80073f8:	9b06      	ldr	r3, [sp, #24]
 80073fa:	ebaa 0303 	sub.w	r3, sl, r3
 80073fe:	4599      	cmp	r9, r3
 8007400:	bfa8      	it	ge
 8007402:	4699      	movge	r9, r3
 8007404:	f1b9 0f00 	cmp.w	r9, #0
 8007408:	dc33      	bgt.n	8007472 <_printf_float+0x396>
 800740a:	f04f 0800 	mov.w	r8, #0
 800740e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007412:	f104 0b1a 	add.w	fp, r4, #26
 8007416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007418:	ebaa 0303 	sub.w	r3, sl, r3
 800741c:	eba3 0309 	sub.w	r3, r3, r9
 8007420:	4543      	cmp	r3, r8
 8007422:	f77f af79 	ble.w	8007318 <_printf_float+0x23c>
 8007426:	2301      	movs	r3, #1
 8007428:	465a      	mov	r2, fp
 800742a:	4631      	mov	r1, r6
 800742c:	4628      	mov	r0, r5
 800742e:	47b8      	blx	r7
 8007430:	3001      	adds	r0, #1
 8007432:	f43f aeae 	beq.w	8007192 <_printf_float+0xb6>
 8007436:	f108 0801 	add.w	r8, r8, #1
 800743a:	e7ec      	b.n	8007416 <_printf_float+0x33a>
 800743c:	4642      	mov	r2, r8
 800743e:	4631      	mov	r1, r6
 8007440:	4628      	mov	r0, r5
 8007442:	47b8      	blx	r7
 8007444:	3001      	adds	r0, #1
 8007446:	d1c2      	bne.n	80073ce <_printf_float+0x2f2>
 8007448:	e6a3      	b.n	8007192 <_printf_float+0xb6>
 800744a:	2301      	movs	r3, #1
 800744c:	4631      	mov	r1, r6
 800744e:	4628      	mov	r0, r5
 8007450:	9206      	str	r2, [sp, #24]
 8007452:	47b8      	blx	r7
 8007454:	3001      	adds	r0, #1
 8007456:	f43f ae9c 	beq.w	8007192 <_printf_float+0xb6>
 800745a:	9a06      	ldr	r2, [sp, #24]
 800745c:	f10b 0b01 	add.w	fp, fp, #1
 8007460:	e7bb      	b.n	80073da <_printf_float+0x2fe>
 8007462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007466:	4631      	mov	r1, r6
 8007468:	4628      	mov	r0, r5
 800746a:	47b8      	blx	r7
 800746c:	3001      	adds	r0, #1
 800746e:	d1c0      	bne.n	80073f2 <_printf_float+0x316>
 8007470:	e68f      	b.n	8007192 <_printf_float+0xb6>
 8007472:	9a06      	ldr	r2, [sp, #24]
 8007474:	464b      	mov	r3, r9
 8007476:	4442      	add	r2, r8
 8007478:	4631      	mov	r1, r6
 800747a:	4628      	mov	r0, r5
 800747c:	47b8      	blx	r7
 800747e:	3001      	adds	r0, #1
 8007480:	d1c3      	bne.n	800740a <_printf_float+0x32e>
 8007482:	e686      	b.n	8007192 <_printf_float+0xb6>
 8007484:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007488:	f1ba 0f01 	cmp.w	sl, #1
 800748c:	dc01      	bgt.n	8007492 <_printf_float+0x3b6>
 800748e:	07db      	lsls	r3, r3, #31
 8007490:	d536      	bpl.n	8007500 <_printf_float+0x424>
 8007492:	2301      	movs	r3, #1
 8007494:	4642      	mov	r2, r8
 8007496:	4631      	mov	r1, r6
 8007498:	4628      	mov	r0, r5
 800749a:	47b8      	blx	r7
 800749c:	3001      	adds	r0, #1
 800749e:	f43f ae78 	beq.w	8007192 <_printf_float+0xb6>
 80074a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074a6:	4631      	mov	r1, r6
 80074a8:	4628      	mov	r0, r5
 80074aa:	47b8      	blx	r7
 80074ac:	3001      	adds	r0, #1
 80074ae:	f43f ae70 	beq.w	8007192 <_printf_float+0xb6>
 80074b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80074b6:	2200      	movs	r2, #0
 80074b8:	2300      	movs	r3, #0
 80074ba:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80074be:	f7f9 fb0b 	bl	8000ad8 <__aeabi_dcmpeq>
 80074c2:	b9c0      	cbnz	r0, 80074f6 <_printf_float+0x41a>
 80074c4:	4653      	mov	r3, sl
 80074c6:	f108 0201 	add.w	r2, r8, #1
 80074ca:	4631      	mov	r1, r6
 80074cc:	4628      	mov	r0, r5
 80074ce:	47b8      	blx	r7
 80074d0:	3001      	adds	r0, #1
 80074d2:	d10c      	bne.n	80074ee <_printf_float+0x412>
 80074d4:	e65d      	b.n	8007192 <_printf_float+0xb6>
 80074d6:	2301      	movs	r3, #1
 80074d8:	465a      	mov	r2, fp
 80074da:	4631      	mov	r1, r6
 80074dc:	4628      	mov	r0, r5
 80074de:	47b8      	blx	r7
 80074e0:	3001      	adds	r0, #1
 80074e2:	f43f ae56 	beq.w	8007192 <_printf_float+0xb6>
 80074e6:	f108 0801 	add.w	r8, r8, #1
 80074ea:	45d0      	cmp	r8, sl
 80074ec:	dbf3      	blt.n	80074d6 <_printf_float+0x3fa>
 80074ee:	464b      	mov	r3, r9
 80074f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80074f4:	e6df      	b.n	80072b6 <_printf_float+0x1da>
 80074f6:	f04f 0800 	mov.w	r8, #0
 80074fa:	f104 0b1a 	add.w	fp, r4, #26
 80074fe:	e7f4      	b.n	80074ea <_printf_float+0x40e>
 8007500:	2301      	movs	r3, #1
 8007502:	4642      	mov	r2, r8
 8007504:	e7e1      	b.n	80074ca <_printf_float+0x3ee>
 8007506:	2301      	movs	r3, #1
 8007508:	464a      	mov	r2, r9
 800750a:	4631      	mov	r1, r6
 800750c:	4628      	mov	r0, r5
 800750e:	47b8      	blx	r7
 8007510:	3001      	adds	r0, #1
 8007512:	f43f ae3e 	beq.w	8007192 <_printf_float+0xb6>
 8007516:	f108 0801 	add.w	r8, r8, #1
 800751a:	68e3      	ldr	r3, [r4, #12]
 800751c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800751e:	1a5b      	subs	r3, r3, r1
 8007520:	4543      	cmp	r3, r8
 8007522:	dcf0      	bgt.n	8007506 <_printf_float+0x42a>
 8007524:	e6fc      	b.n	8007320 <_printf_float+0x244>
 8007526:	f04f 0800 	mov.w	r8, #0
 800752a:	f104 0919 	add.w	r9, r4, #25
 800752e:	e7f4      	b.n	800751a <_printf_float+0x43e>

08007530 <_printf_common>:
 8007530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007534:	4616      	mov	r6, r2
 8007536:	4698      	mov	r8, r3
 8007538:	688a      	ldr	r2, [r1, #8]
 800753a:	690b      	ldr	r3, [r1, #16]
 800753c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007540:	4293      	cmp	r3, r2
 8007542:	bfb8      	it	lt
 8007544:	4613      	movlt	r3, r2
 8007546:	6033      	str	r3, [r6, #0]
 8007548:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800754c:	4607      	mov	r7, r0
 800754e:	460c      	mov	r4, r1
 8007550:	b10a      	cbz	r2, 8007556 <_printf_common+0x26>
 8007552:	3301      	adds	r3, #1
 8007554:	6033      	str	r3, [r6, #0]
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	0699      	lsls	r1, r3, #26
 800755a:	bf42      	ittt	mi
 800755c:	6833      	ldrmi	r3, [r6, #0]
 800755e:	3302      	addmi	r3, #2
 8007560:	6033      	strmi	r3, [r6, #0]
 8007562:	6825      	ldr	r5, [r4, #0]
 8007564:	f015 0506 	ands.w	r5, r5, #6
 8007568:	d106      	bne.n	8007578 <_printf_common+0x48>
 800756a:	f104 0a19 	add.w	sl, r4, #25
 800756e:	68e3      	ldr	r3, [r4, #12]
 8007570:	6832      	ldr	r2, [r6, #0]
 8007572:	1a9b      	subs	r3, r3, r2
 8007574:	42ab      	cmp	r3, r5
 8007576:	dc26      	bgt.n	80075c6 <_printf_common+0x96>
 8007578:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800757c:	6822      	ldr	r2, [r4, #0]
 800757e:	3b00      	subs	r3, #0
 8007580:	bf18      	it	ne
 8007582:	2301      	movne	r3, #1
 8007584:	0692      	lsls	r2, r2, #26
 8007586:	d42b      	bmi.n	80075e0 <_printf_common+0xb0>
 8007588:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800758c:	4641      	mov	r1, r8
 800758e:	4638      	mov	r0, r7
 8007590:	47c8      	blx	r9
 8007592:	3001      	adds	r0, #1
 8007594:	d01e      	beq.n	80075d4 <_printf_common+0xa4>
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	6922      	ldr	r2, [r4, #16]
 800759a:	f003 0306 	and.w	r3, r3, #6
 800759e:	2b04      	cmp	r3, #4
 80075a0:	bf02      	ittt	eq
 80075a2:	68e5      	ldreq	r5, [r4, #12]
 80075a4:	6833      	ldreq	r3, [r6, #0]
 80075a6:	1aed      	subeq	r5, r5, r3
 80075a8:	68a3      	ldr	r3, [r4, #8]
 80075aa:	bf0c      	ite	eq
 80075ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075b0:	2500      	movne	r5, #0
 80075b2:	4293      	cmp	r3, r2
 80075b4:	bfc4      	itt	gt
 80075b6:	1a9b      	subgt	r3, r3, r2
 80075b8:	18ed      	addgt	r5, r5, r3
 80075ba:	2600      	movs	r6, #0
 80075bc:	341a      	adds	r4, #26
 80075be:	42b5      	cmp	r5, r6
 80075c0:	d11a      	bne.n	80075f8 <_printf_common+0xc8>
 80075c2:	2000      	movs	r0, #0
 80075c4:	e008      	b.n	80075d8 <_printf_common+0xa8>
 80075c6:	2301      	movs	r3, #1
 80075c8:	4652      	mov	r2, sl
 80075ca:	4641      	mov	r1, r8
 80075cc:	4638      	mov	r0, r7
 80075ce:	47c8      	blx	r9
 80075d0:	3001      	adds	r0, #1
 80075d2:	d103      	bne.n	80075dc <_printf_common+0xac>
 80075d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075dc:	3501      	adds	r5, #1
 80075de:	e7c6      	b.n	800756e <_printf_common+0x3e>
 80075e0:	18e1      	adds	r1, r4, r3
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	2030      	movs	r0, #48	@ 0x30
 80075e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075ea:	4422      	add	r2, r4
 80075ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075f4:	3302      	adds	r3, #2
 80075f6:	e7c7      	b.n	8007588 <_printf_common+0x58>
 80075f8:	2301      	movs	r3, #1
 80075fa:	4622      	mov	r2, r4
 80075fc:	4641      	mov	r1, r8
 80075fe:	4638      	mov	r0, r7
 8007600:	47c8      	blx	r9
 8007602:	3001      	adds	r0, #1
 8007604:	d0e6      	beq.n	80075d4 <_printf_common+0xa4>
 8007606:	3601      	adds	r6, #1
 8007608:	e7d9      	b.n	80075be <_printf_common+0x8e>
	...

0800760c <_printf_i>:
 800760c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007610:	7e0f      	ldrb	r7, [r1, #24]
 8007612:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007614:	2f78      	cmp	r7, #120	@ 0x78
 8007616:	4691      	mov	r9, r2
 8007618:	4680      	mov	r8, r0
 800761a:	460c      	mov	r4, r1
 800761c:	469a      	mov	sl, r3
 800761e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007622:	d807      	bhi.n	8007634 <_printf_i+0x28>
 8007624:	2f62      	cmp	r7, #98	@ 0x62
 8007626:	d80a      	bhi.n	800763e <_printf_i+0x32>
 8007628:	2f00      	cmp	r7, #0
 800762a:	f000 80d2 	beq.w	80077d2 <_printf_i+0x1c6>
 800762e:	2f58      	cmp	r7, #88	@ 0x58
 8007630:	f000 80b9 	beq.w	80077a6 <_printf_i+0x19a>
 8007634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007638:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800763c:	e03a      	b.n	80076b4 <_printf_i+0xa8>
 800763e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007642:	2b15      	cmp	r3, #21
 8007644:	d8f6      	bhi.n	8007634 <_printf_i+0x28>
 8007646:	a101      	add	r1, pc, #4	@ (adr r1, 800764c <_printf_i+0x40>)
 8007648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800764c:	080076a5 	.word	0x080076a5
 8007650:	080076b9 	.word	0x080076b9
 8007654:	08007635 	.word	0x08007635
 8007658:	08007635 	.word	0x08007635
 800765c:	08007635 	.word	0x08007635
 8007660:	08007635 	.word	0x08007635
 8007664:	080076b9 	.word	0x080076b9
 8007668:	08007635 	.word	0x08007635
 800766c:	08007635 	.word	0x08007635
 8007670:	08007635 	.word	0x08007635
 8007674:	08007635 	.word	0x08007635
 8007678:	080077b9 	.word	0x080077b9
 800767c:	080076e3 	.word	0x080076e3
 8007680:	08007773 	.word	0x08007773
 8007684:	08007635 	.word	0x08007635
 8007688:	08007635 	.word	0x08007635
 800768c:	080077db 	.word	0x080077db
 8007690:	08007635 	.word	0x08007635
 8007694:	080076e3 	.word	0x080076e3
 8007698:	08007635 	.word	0x08007635
 800769c:	08007635 	.word	0x08007635
 80076a0:	0800777b 	.word	0x0800777b
 80076a4:	6833      	ldr	r3, [r6, #0]
 80076a6:	1d1a      	adds	r2, r3, #4
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6032      	str	r2, [r6, #0]
 80076ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076b4:	2301      	movs	r3, #1
 80076b6:	e09d      	b.n	80077f4 <_printf_i+0x1e8>
 80076b8:	6833      	ldr	r3, [r6, #0]
 80076ba:	6820      	ldr	r0, [r4, #0]
 80076bc:	1d19      	adds	r1, r3, #4
 80076be:	6031      	str	r1, [r6, #0]
 80076c0:	0606      	lsls	r6, r0, #24
 80076c2:	d501      	bpl.n	80076c8 <_printf_i+0xbc>
 80076c4:	681d      	ldr	r5, [r3, #0]
 80076c6:	e003      	b.n	80076d0 <_printf_i+0xc4>
 80076c8:	0645      	lsls	r5, r0, #25
 80076ca:	d5fb      	bpl.n	80076c4 <_printf_i+0xb8>
 80076cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076d0:	2d00      	cmp	r5, #0
 80076d2:	da03      	bge.n	80076dc <_printf_i+0xd0>
 80076d4:	232d      	movs	r3, #45	@ 0x2d
 80076d6:	426d      	negs	r5, r5
 80076d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076dc:	4859      	ldr	r0, [pc, #356]	@ (8007844 <_printf_i+0x238>)
 80076de:	230a      	movs	r3, #10
 80076e0:	e011      	b.n	8007706 <_printf_i+0xfa>
 80076e2:	6821      	ldr	r1, [r4, #0]
 80076e4:	6833      	ldr	r3, [r6, #0]
 80076e6:	0608      	lsls	r0, r1, #24
 80076e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80076ec:	d402      	bmi.n	80076f4 <_printf_i+0xe8>
 80076ee:	0649      	lsls	r1, r1, #25
 80076f0:	bf48      	it	mi
 80076f2:	b2ad      	uxthmi	r5, r5
 80076f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80076f6:	4853      	ldr	r0, [pc, #332]	@ (8007844 <_printf_i+0x238>)
 80076f8:	6033      	str	r3, [r6, #0]
 80076fa:	bf14      	ite	ne
 80076fc:	230a      	movne	r3, #10
 80076fe:	2308      	moveq	r3, #8
 8007700:	2100      	movs	r1, #0
 8007702:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007706:	6866      	ldr	r6, [r4, #4]
 8007708:	60a6      	str	r6, [r4, #8]
 800770a:	2e00      	cmp	r6, #0
 800770c:	bfa2      	ittt	ge
 800770e:	6821      	ldrge	r1, [r4, #0]
 8007710:	f021 0104 	bicge.w	r1, r1, #4
 8007714:	6021      	strge	r1, [r4, #0]
 8007716:	b90d      	cbnz	r5, 800771c <_printf_i+0x110>
 8007718:	2e00      	cmp	r6, #0
 800771a:	d04b      	beq.n	80077b4 <_printf_i+0x1a8>
 800771c:	4616      	mov	r6, r2
 800771e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007722:	fb03 5711 	mls	r7, r3, r1, r5
 8007726:	5dc7      	ldrb	r7, [r0, r7]
 8007728:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800772c:	462f      	mov	r7, r5
 800772e:	42bb      	cmp	r3, r7
 8007730:	460d      	mov	r5, r1
 8007732:	d9f4      	bls.n	800771e <_printf_i+0x112>
 8007734:	2b08      	cmp	r3, #8
 8007736:	d10b      	bne.n	8007750 <_printf_i+0x144>
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	07df      	lsls	r7, r3, #31
 800773c:	d508      	bpl.n	8007750 <_printf_i+0x144>
 800773e:	6923      	ldr	r3, [r4, #16]
 8007740:	6861      	ldr	r1, [r4, #4]
 8007742:	4299      	cmp	r1, r3
 8007744:	bfde      	ittt	le
 8007746:	2330      	movle	r3, #48	@ 0x30
 8007748:	f806 3c01 	strble.w	r3, [r6, #-1]
 800774c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007750:	1b92      	subs	r2, r2, r6
 8007752:	6122      	str	r2, [r4, #16]
 8007754:	f8cd a000 	str.w	sl, [sp]
 8007758:	464b      	mov	r3, r9
 800775a:	aa03      	add	r2, sp, #12
 800775c:	4621      	mov	r1, r4
 800775e:	4640      	mov	r0, r8
 8007760:	f7ff fee6 	bl	8007530 <_printf_common>
 8007764:	3001      	adds	r0, #1
 8007766:	d14a      	bne.n	80077fe <_printf_i+0x1f2>
 8007768:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800776c:	b004      	add	sp, #16
 800776e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	f043 0320 	orr.w	r3, r3, #32
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	4833      	ldr	r0, [pc, #204]	@ (8007848 <_printf_i+0x23c>)
 800777c:	2778      	movs	r7, #120	@ 0x78
 800777e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	6831      	ldr	r1, [r6, #0]
 8007786:	061f      	lsls	r7, r3, #24
 8007788:	f851 5b04 	ldr.w	r5, [r1], #4
 800778c:	d402      	bmi.n	8007794 <_printf_i+0x188>
 800778e:	065f      	lsls	r7, r3, #25
 8007790:	bf48      	it	mi
 8007792:	b2ad      	uxthmi	r5, r5
 8007794:	6031      	str	r1, [r6, #0]
 8007796:	07d9      	lsls	r1, r3, #31
 8007798:	bf44      	itt	mi
 800779a:	f043 0320 	orrmi.w	r3, r3, #32
 800779e:	6023      	strmi	r3, [r4, #0]
 80077a0:	b11d      	cbz	r5, 80077aa <_printf_i+0x19e>
 80077a2:	2310      	movs	r3, #16
 80077a4:	e7ac      	b.n	8007700 <_printf_i+0xf4>
 80077a6:	4827      	ldr	r0, [pc, #156]	@ (8007844 <_printf_i+0x238>)
 80077a8:	e7e9      	b.n	800777e <_printf_i+0x172>
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	f023 0320 	bic.w	r3, r3, #32
 80077b0:	6023      	str	r3, [r4, #0]
 80077b2:	e7f6      	b.n	80077a2 <_printf_i+0x196>
 80077b4:	4616      	mov	r6, r2
 80077b6:	e7bd      	b.n	8007734 <_printf_i+0x128>
 80077b8:	6833      	ldr	r3, [r6, #0]
 80077ba:	6825      	ldr	r5, [r4, #0]
 80077bc:	6961      	ldr	r1, [r4, #20]
 80077be:	1d18      	adds	r0, r3, #4
 80077c0:	6030      	str	r0, [r6, #0]
 80077c2:	062e      	lsls	r6, r5, #24
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	d501      	bpl.n	80077cc <_printf_i+0x1c0>
 80077c8:	6019      	str	r1, [r3, #0]
 80077ca:	e002      	b.n	80077d2 <_printf_i+0x1c6>
 80077cc:	0668      	lsls	r0, r5, #25
 80077ce:	d5fb      	bpl.n	80077c8 <_printf_i+0x1bc>
 80077d0:	8019      	strh	r1, [r3, #0]
 80077d2:	2300      	movs	r3, #0
 80077d4:	6123      	str	r3, [r4, #16]
 80077d6:	4616      	mov	r6, r2
 80077d8:	e7bc      	b.n	8007754 <_printf_i+0x148>
 80077da:	6833      	ldr	r3, [r6, #0]
 80077dc:	1d1a      	adds	r2, r3, #4
 80077de:	6032      	str	r2, [r6, #0]
 80077e0:	681e      	ldr	r6, [r3, #0]
 80077e2:	6862      	ldr	r2, [r4, #4]
 80077e4:	2100      	movs	r1, #0
 80077e6:	4630      	mov	r0, r6
 80077e8:	f7f8 fcfa 	bl	80001e0 <memchr>
 80077ec:	b108      	cbz	r0, 80077f2 <_printf_i+0x1e6>
 80077ee:	1b80      	subs	r0, r0, r6
 80077f0:	6060      	str	r0, [r4, #4]
 80077f2:	6863      	ldr	r3, [r4, #4]
 80077f4:	6123      	str	r3, [r4, #16]
 80077f6:	2300      	movs	r3, #0
 80077f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077fc:	e7aa      	b.n	8007754 <_printf_i+0x148>
 80077fe:	6923      	ldr	r3, [r4, #16]
 8007800:	4632      	mov	r2, r6
 8007802:	4649      	mov	r1, r9
 8007804:	4640      	mov	r0, r8
 8007806:	47d0      	blx	sl
 8007808:	3001      	adds	r0, #1
 800780a:	d0ad      	beq.n	8007768 <_printf_i+0x15c>
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	079b      	lsls	r3, r3, #30
 8007810:	d413      	bmi.n	800783a <_printf_i+0x22e>
 8007812:	68e0      	ldr	r0, [r4, #12]
 8007814:	9b03      	ldr	r3, [sp, #12]
 8007816:	4298      	cmp	r0, r3
 8007818:	bfb8      	it	lt
 800781a:	4618      	movlt	r0, r3
 800781c:	e7a6      	b.n	800776c <_printf_i+0x160>
 800781e:	2301      	movs	r3, #1
 8007820:	4632      	mov	r2, r6
 8007822:	4649      	mov	r1, r9
 8007824:	4640      	mov	r0, r8
 8007826:	47d0      	blx	sl
 8007828:	3001      	adds	r0, #1
 800782a:	d09d      	beq.n	8007768 <_printf_i+0x15c>
 800782c:	3501      	adds	r5, #1
 800782e:	68e3      	ldr	r3, [r4, #12]
 8007830:	9903      	ldr	r1, [sp, #12]
 8007832:	1a5b      	subs	r3, r3, r1
 8007834:	42ab      	cmp	r3, r5
 8007836:	dcf2      	bgt.n	800781e <_printf_i+0x212>
 8007838:	e7eb      	b.n	8007812 <_printf_i+0x206>
 800783a:	2500      	movs	r5, #0
 800783c:	f104 0619 	add.w	r6, r4, #25
 8007840:	e7f5      	b.n	800782e <_printf_i+0x222>
 8007842:	bf00      	nop
 8007844:	0800b082 	.word	0x0800b082
 8007848:	0800b093 	.word	0x0800b093

0800784c <std>:
 800784c:	2300      	movs	r3, #0
 800784e:	b510      	push	{r4, lr}
 8007850:	4604      	mov	r4, r0
 8007852:	e9c0 3300 	strd	r3, r3, [r0]
 8007856:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800785a:	6083      	str	r3, [r0, #8]
 800785c:	8181      	strh	r1, [r0, #12]
 800785e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007860:	81c2      	strh	r2, [r0, #14]
 8007862:	6183      	str	r3, [r0, #24]
 8007864:	4619      	mov	r1, r3
 8007866:	2208      	movs	r2, #8
 8007868:	305c      	adds	r0, #92	@ 0x5c
 800786a:	f000 f914 	bl	8007a96 <memset>
 800786e:	4b0d      	ldr	r3, [pc, #52]	@ (80078a4 <std+0x58>)
 8007870:	6263      	str	r3, [r4, #36]	@ 0x24
 8007872:	4b0d      	ldr	r3, [pc, #52]	@ (80078a8 <std+0x5c>)
 8007874:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007876:	4b0d      	ldr	r3, [pc, #52]	@ (80078ac <std+0x60>)
 8007878:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800787a:	4b0d      	ldr	r3, [pc, #52]	@ (80078b0 <std+0x64>)
 800787c:	6323      	str	r3, [r4, #48]	@ 0x30
 800787e:	4b0d      	ldr	r3, [pc, #52]	@ (80078b4 <std+0x68>)
 8007880:	6224      	str	r4, [r4, #32]
 8007882:	429c      	cmp	r4, r3
 8007884:	d006      	beq.n	8007894 <std+0x48>
 8007886:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800788a:	4294      	cmp	r4, r2
 800788c:	d002      	beq.n	8007894 <std+0x48>
 800788e:	33d0      	adds	r3, #208	@ 0xd0
 8007890:	429c      	cmp	r4, r3
 8007892:	d105      	bne.n	80078a0 <std+0x54>
 8007894:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800789c:	f000 b988 	b.w	8007bb0 <__retarget_lock_init_recursive>
 80078a0:	bd10      	pop	{r4, pc}
 80078a2:	bf00      	nop
 80078a4:	08007a11 	.word	0x08007a11
 80078a8:	08007a33 	.word	0x08007a33
 80078ac:	08007a6b 	.word	0x08007a6b
 80078b0:	08007a8f 	.word	0x08007a8f
 80078b4:	20000684 	.word	0x20000684

080078b8 <stdio_exit_handler>:
 80078b8:	4a02      	ldr	r2, [pc, #8]	@ (80078c4 <stdio_exit_handler+0xc>)
 80078ba:	4903      	ldr	r1, [pc, #12]	@ (80078c8 <stdio_exit_handler+0x10>)
 80078bc:	4803      	ldr	r0, [pc, #12]	@ (80078cc <stdio_exit_handler+0x14>)
 80078be:	f000 b869 	b.w	8007994 <_fwalk_sglue>
 80078c2:	bf00      	nop
 80078c4:	20000034 	.word	0x20000034
 80078c8:	080093b1 	.word	0x080093b1
 80078cc:	20000044 	.word	0x20000044

080078d0 <cleanup_stdio>:
 80078d0:	6841      	ldr	r1, [r0, #4]
 80078d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007904 <cleanup_stdio+0x34>)
 80078d4:	4299      	cmp	r1, r3
 80078d6:	b510      	push	{r4, lr}
 80078d8:	4604      	mov	r4, r0
 80078da:	d001      	beq.n	80078e0 <cleanup_stdio+0x10>
 80078dc:	f001 fd68 	bl	80093b0 <_fflush_r>
 80078e0:	68a1      	ldr	r1, [r4, #8]
 80078e2:	4b09      	ldr	r3, [pc, #36]	@ (8007908 <cleanup_stdio+0x38>)
 80078e4:	4299      	cmp	r1, r3
 80078e6:	d002      	beq.n	80078ee <cleanup_stdio+0x1e>
 80078e8:	4620      	mov	r0, r4
 80078ea:	f001 fd61 	bl	80093b0 <_fflush_r>
 80078ee:	68e1      	ldr	r1, [r4, #12]
 80078f0:	4b06      	ldr	r3, [pc, #24]	@ (800790c <cleanup_stdio+0x3c>)
 80078f2:	4299      	cmp	r1, r3
 80078f4:	d004      	beq.n	8007900 <cleanup_stdio+0x30>
 80078f6:	4620      	mov	r0, r4
 80078f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078fc:	f001 bd58 	b.w	80093b0 <_fflush_r>
 8007900:	bd10      	pop	{r4, pc}
 8007902:	bf00      	nop
 8007904:	20000684 	.word	0x20000684
 8007908:	200006ec 	.word	0x200006ec
 800790c:	20000754 	.word	0x20000754

08007910 <global_stdio_init.part.0>:
 8007910:	b510      	push	{r4, lr}
 8007912:	4b0b      	ldr	r3, [pc, #44]	@ (8007940 <global_stdio_init.part.0+0x30>)
 8007914:	4c0b      	ldr	r4, [pc, #44]	@ (8007944 <global_stdio_init.part.0+0x34>)
 8007916:	4a0c      	ldr	r2, [pc, #48]	@ (8007948 <global_stdio_init.part.0+0x38>)
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	4620      	mov	r0, r4
 800791c:	2200      	movs	r2, #0
 800791e:	2104      	movs	r1, #4
 8007920:	f7ff ff94 	bl	800784c <std>
 8007924:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007928:	2201      	movs	r2, #1
 800792a:	2109      	movs	r1, #9
 800792c:	f7ff ff8e 	bl	800784c <std>
 8007930:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007934:	2202      	movs	r2, #2
 8007936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800793a:	2112      	movs	r1, #18
 800793c:	f7ff bf86 	b.w	800784c <std>
 8007940:	200007bc 	.word	0x200007bc
 8007944:	20000684 	.word	0x20000684
 8007948:	080078b9 	.word	0x080078b9

0800794c <__sfp_lock_acquire>:
 800794c:	4801      	ldr	r0, [pc, #4]	@ (8007954 <__sfp_lock_acquire+0x8>)
 800794e:	f000 b930 	b.w	8007bb2 <__retarget_lock_acquire_recursive>
 8007952:	bf00      	nop
 8007954:	200007c5 	.word	0x200007c5

08007958 <__sfp_lock_release>:
 8007958:	4801      	ldr	r0, [pc, #4]	@ (8007960 <__sfp_lock_release+0x8>)
 800795a:	f000 b92b 	b.w	8007bb4 <__retarget_lock_release_recursive>
 800795e:	bf00      	nop
 8007960:	200007c5 	.word	0x200007c5

08007964 <__sinit>:
 8007964:	b510      	push	{r4, lr}
 8007966:	4604      	mov	r4, r0
 8007968:	f7ff fff0 	bl	800794c <__sfp_lock_acquire>
 800796c:	6a23      	ldr	r3, [r4, #32]
 800796e:	b11b      	cbz	r3, 8007978 <__sinit+0x14>
 8007970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007974:	f7ff bff0 	b.w	8007958 <__sfp_lock_release>
 8007978:	4b04      	ldr	r3, [pc, #16]	@ (800798c <__sinit+0x28>)
 800797a:	6223      	str	r3, [r4, #32]
 800797c:	4b04      	ldr	r3, [pc, #16]	@ (8007990 <__sinit+0x2c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1f5      	bne.n	8007970 <__sinit+0xc>
 8007984:	f7ff ffc4 	bl	8007910 <global_stdio_init.part.0>
 8007988:	e7f2      	b.n	8007970 <__sinit+0xc>
 800798a:	bf00      	nop
 800798c:	080078d1 	.word	0x080078d1
 8007990:	200007bc 	.word	0x200007bc

08007994 <_fwalk_sglue>:
 8007994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007998:	4607      	mov	r7, r0
 800799a:	4688      	mov	r8, r1
 800799c:	4614      	mov	r4, r2
 800799e:	2600      	movs	r6, #0
 80079a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079a4:	f1b9 0901 	subs.w	r9, r9, #1
 80079a8:	d505      	bpl.n	80079b6 <_fwalk_sglue+0x22>
 80079aa:	6824      	ldr	r4, [r4, #0]
 80079ac:	2c00      	cmp	r4, #0
 80079ae:	d1f7      	bne.n	80079a0 <_fwalk_sglue+0xc>
 80079b0:	4630      	mov	r0, r6
 80079b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079b6:	89ab      	ldrh	r3, [r5, #12]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d907      	bls.n	80079cc <_fwalk_sglue+0x38>
 80079bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079c0:	3301      	adds	r3, #1
 80079c2:	d003      	beq.n	80079cc <_fwalk_sglue+0x38>
 80079c4:	4629      	mov	r1, r5
 80079c6:	4638      	mov	r0, r7
 80079c8:	47c0      	blx	r8
 80079ca:	4306      	orrs	r6, r0
 80079cc:	3568      	adds	r5, #104	@ 0x68
 80079ce:	e7e9      	b.n	80079a4 <_fwalk_sglue+0x10>

080079d0 <siprintf>:
 80079d0:	b40e      	push	{r1, r2, r3}
 80079d2:	b500      	push	{lr}
 80079d4:	b09c      	sub	sp, #112	@ 0x70
 80079d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80079d8:	9002      	str	r0, [sp, #8]
 80079da:	9006      	str	r0, [sp, #24]
 80079dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80079e0:	4809      	ldr	r0, [pc, #36]	@ (8007a08 <siprintf+0x38>)
 80079e2:	9107      	str	r1, [sp, #28]
 80079e4:	9104      	str	r1, [sp, #16]
 80079e6:	4909      	ldr	r1, [pc, #36]	@ (8007a0c <siprintf+0x3c>)
 80079e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ec:	9105      	str	r1, [sp, #20]
 80079ee:	6800      	ldr	r0, [r0, #0]
 80079f0:	9301      	str	r3, [sp, #4]
 80079f2:	a902      	add	r1, sp, #8
 80079f4:	f001 fb5c 	bl	80090b0 <_svfiprintf_r>
 80079f8:	9b02      	ldr	r3, [sp, #8]
 80079fa:	2200      	movs	r2, #0
 80079fc:	701a      	strb	r2, [r3, #0]
 80079fe:	b01c      	add	sp, #112	@ 0x70
 8007a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a04:	b003      	add	sp, #12
 8007a06:	4770      	bx	lr
 8007a08:	20000040 	.word	0x20000040
 8007a0c:	ffff0208 	.word	0xffff0208

08007a10 <__sread>:
 8007a10:	b510      	push	{r4, lr}
 8007a12:	460c      	mov	r4, r1
 8007a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a18:	f000 f86c 	bl	8007af4 <_read_r>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	bfab      	itete	ge
 8007a20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a22:	89a3      	ldrhlt	r3, [r4, #12]
 8007a24:	181b      	addge	r3, r3, r0
 8007a26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a2a:	bfac      	ite	ge
 8007a2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a2e:	81a3      	strhlt	r3, [r4, #12]
 8007a30:	bd10      	pop	{r4, pc}

08007a32 <__swrite>:
 8007a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a36:	461f      	mov	r7, r3
 8007a38:	898b      	ldrh	r3, [r1, #12]
 8007a3a:	05db      	lsls	r3, r3, #23
 8007a3c:	4605      	mov	r5, r0
 8007a3e:	460c      	mov	r4, r1
 8007a40:	4616      	mov	r6, r2
 8007a42:	d505      	bpl.n	8007a50 <__swrite+0x1e>
 8007a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a48:	2302      	movs	r3, #2
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f000 f840 	bl	8007ad0 <_lseek_r>
 8007a50:	89a3      	ldrh	r3, [r4, #12]
 8007a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a5a:	81a3      	strh	r3, [r4, #12]
 8007a5c:	4632      	mov	r2, r6
 8007a5e:	463b      	mov	r3, r7
 8007a60:	4628      	mov	r0, r5
 8007a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a66:	f000 b867 	b.w	8007b38 <_write_r>

08007a6a <__sseek>:
 8007a6a:	b510      	push	{r4, lr}
 8007a6c:	460c      	mov	r4, r1
 8007a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a72:	f000 f82d 	bl	8007ad0 <_lseek_r>
 8007a76:	1c43      	adds	r3, r0, #1
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	bf15      	itete	ne
 8007a7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a86:	81a3      	strheq	r3, [r4, #12]
 8007a88:	bf18      	it	ne
 8007a8a:	81a3      	strhne	r3, [r4, #12]
 8007a8c:	bd10      	pop	{r4, pc}

08007a8e <__sclose>:
 8007a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a92:	f000 b80d 	b.w	8007ab0 <_close_r>

08007a96 <memset>:
 8007a96:	4402      	add	r2, r0
 8007a98:	4603      	mov	r3, r0
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d100      	bne.n	8007aa0 <memset+0xa>
 8007a9e:	4770      	bx	lr
 8007aa0:	f803 1b01 	strb.w	r1, [r3], #1
 8007aa4:	e7f9      	b.n	8007a9a <memset+0x4>
	...

08007aa8 <_localeconv_r>:
 8007aa8:	4800      	ldr	r0, [pc, #0]	@ (8007aac <_localeconv_r+0x4>)
 8007aaa:	4770      	bx	lr
 8007aac:	20000180 	.word	0x20000180

08007ab0 <_close_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4d06      	ldr	r5, [pc, #24]	@ (8007acc <_close_r+0x1c>)
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	4608      	mov	r0, r1
 8007aba:	602b      	str	r3, [r5, #0]
 8007abc:	f7fa fe20 	bl	8002700 <_close>
 8007ac0:	1c43      	adds	r3, r0, #1
 8007ac2:	d102      	bne.n	8007aca <_close_r+0x1a>
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	b103      	cbz	r3, 8007aca <_close_r+0x1a>
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	bd38      	pop	{r3, r4, r5, pc}
 8007acc:	200007c0 	.word	0x200007c0

08007ad0 <_lseek_r>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	4d07      	ldr	r5, [pc, #28]	@ (8007af0 <_lseek_r+0x20>)
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	4608      	mov	r0, r1
 8007ad8:	4611      	mov	r1, r2
 8007ada:	2200      	movs	r2, #0
 8007adc:	602a      	str	r2, [r5, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f7fa fe35 	bl	800274e <_lseek>
 8007ae4:	1c43      	adds	r3, r0, #1
 8007ae6:	d102      	bne.n	8007aee <_lseek_r+0x1e>
 8007ae8:	682b      	ldr	r3, [r5, #0]
 8007aea:	b103      	cbz	r3, 8007aee <_lseek_r+0x1e>
 8007aec:	6023      	str	r3, [r4, #0]
 8007aee:	bd38      	pop	{r3, r4, r5, pc}
 8007af0:	200007c0 	.word	0x200007c0

08007af4 <_read_r>:
 8007af4:	b538      	push	{r3, r4, r5, lr}
 8007af6:	4d07      	ldr	r5, [pc, #28]	@ (8007b14 <_read_r+0x20>)
 8007af8:	4604      	mov	r4, r0
 8007afa:	4608      	mov	r0, r1
 8007afc:	4611      	mov	r1, r2
 8007afe:	2200      	movs	r2, #0
 8007b00:	602a      	str	r2, [r5, #0]
 8007b02:	461a      	mov	r2, r3
 8007b04:	f7fa fdc3 	bl	800268e <_read>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	d102      	bne.n	8007b12 <_read_r+0x1e>
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	b103      	cbz	r3, 8007b12 <_read_r+0x1e>
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	bd38      	pop	{r3, r4, r5, pc}
 8007b14:	200007c0 	.word	0x200007c0

08007b18 <_sbrk_r>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4d06      	ldr	r5, [pc, #24]	@ (8007b34 <_sbrk_r+0x1c>)
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	4604      	mov	r4, r0
 8007b20:	4608      	mov	r0, r1
 8007b22:	602b      	str	r3, [r5, #0]
 8007b24:	f7fa fe20 	bl	8002768 <_sbrk>
 8007b28:	1c43      	adds	r3, r0, #1
 8007b2a:	d102      	bne.n	8007b32 <_sbrk_r+0x1a>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	b103      	cbz	r3, 8007b32 <_sbrk_r+0x1a>
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	bd38      	pop	{r3, r4, r5, pc}
 8007b34:	200007c0 	.word	0x200007c0

08007b38 <_write_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	4d07      	ldr	r5, [pc, #28]	@ (8007b58 <_write_r+0x20>)
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	4608      	mov	r0, r1
 8007b40:	4611      	mov	r1, r2
 8007b42:	2200      	movs	r2, #0
 8007b44:	602a      	str	r2, [r5, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	f7fa fdbe 	bl	80026c8 <_write>
 8007b4c:	1c43      	adds	r3, r0, #1
 8007b4e:	d102      	bne.n	8007b56 <_write_r+0x1e>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	b103      	cbz	r3, 8007b56 <_write_r+0x1e>
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	bd38      	pop	{r3, r4, r5, pc}
 8007b58:	200007c0 	.word	0x200007c0

08007b5c <__errno>:
 8007b5c:	4b01      	ldr	r3, [pc, #4]	@ (8007b64 <__errno+0x8>)
 8007b5e:	6818      	ldr	r0, [r3, #0]
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	20000040 	.word	0x20000040

08007b68 <__libc_init_array>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	4d0d      	ldr	r5, [pc, #52]	@ (8007ba0 <__libc_init_array+0x38>)
 8007b6c:	4c0d      	ldr	r4, [pc, #52]	@ (8007ba4 <__libc_init_array+0x3c>)
 8007b6e:	1b64      	subs	r4, r4, r5
 8007b70:	10a4      	asrs	r4, r4, #2
 8007b72:	2600      	movs	r6, #0
 8007b74:	42a6      	cmp	r6, r4
 8007b76:	d109      	bne.n	8007b8c <__libc_init_array+0x24>
 8007b78:	4d0b      	ldr	r5, [pc, #44]	@ (8007ba8 <__libc_init_array+0x40>)
 8007b7a:	4c0c      	ldr	r4, [pc, #48]	@ (8007bac <__libc_init_array+0x44>)
 8007b7c:	f001 ffa6 	bl	8009acc <_init>
 8007b80:	1b64      	subs	r4, r4, r5
 8007b82:	10a4      	asrs	r4, r4, #2
 8007b84:	2600      	movs	r6, #0
 8007b86:	42a6      	cmp	r6, r4
 8007b88:	d105      	bne.n	8007b96 <__libc_init_array+0x2e>
 8007b8a:	bd70      	pop	{r4, r5, r6, pc}
 8007b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b90:	4798      	blx	r3
 8007b92:	3601      	adds	r6, #1
 8007b94:	e7ee      	b.n	8007b74 <__libc_init_array+0xc>
 8007b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b9a:	4798      	blx	r3
 8007b9c:	3601      	adds	r6, #1
 8007b9e:	e7f2      	b.n	8007b86 <__libc_init_array+0x1e>
 8007ba0:	0800b3e8 	.word	0x0800b3e8
 8007ba4:	0800b3e8 	.word	0x0800b3e8
 8007ba8:	0800b3e8 	.word	0x0800b3e8
 8007bac:	0800b3ec 	.word	0x0800b3ec

08007bb0 <__retarget_lock_init_recursive>:
 8007bb0:	4770      	bx	lr

08007bb2 <__retarget_lock_acquire_recursive>:
 8007bb2:	4770      	bx	lr

08007bb4 <__retarget_lock_release_recursive>:
 8007bb4:	4770      	bx	lr

08007bb6 <strcpy>:
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bbc:	f803 2b01 	strb.w	r2, [r3], #1
 8007bc0:	2a00      	cmp	r2, #0
 8007bc2:	d1f9      	bne.n	8007bb8 <strcpy+0x2>
 8007bc4:	4770      	bx	lr

08007bc6 <quorem>:
 8007bc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bca:	6903      	ldr	r3, [r0, #16]
 8007bcc:	690c      	ldr	r4, [r1, #16]
 8007bce:	42a3      	cmp	r3, r4
 8007bd0:	4607      	mov	r7, r0
 8007bd2:	db7e      	blt.n	8007cd2 <quorem+0x10c>
 8007bd4:	3c01      	subs	r4, #1
 8007bd6:	f101 0814 	add.w	r8, r1, #20
 8007bda:	00a3      	lsls	r3, r4, #2
 8007bdc:	f100 0514 	add.w	r5, r0, #20
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007be6:	9301      	str	r3, [sp, #4]
 8007be8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bf8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bfc:	d32e      	bcc.n	8007c5c <quorem+0x96>
 8007bfe:	f04f 0a00 	mov.w	sl, #0
 8007c02:	46c4      	mov	ip, r8
 8007c04:	46ae      	mov	lr, r5
 8007c06:	46d3      	mov	fp, sl
 8007c08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007c0c:	b298      	uxth	r0, r3
 8007c0e:	fb06 a000 	mla	r0, r6, r0, sl
 8007c12:	0c02      	lsrs	r2, r0, #16
 8007c14:	0c1b      	lsrs	r3, r3, #16
 8007c16:	fb06 2303 	mla	r3, r6, r3, r2
 8007c1a:	f8de 2000 	ldr.w	r2, [lr]
 8007c1e:	b280      	uxth	r0, r0
 8007c20:	b292      	uxth	r2, r2
 8007c22:	1a12      	subs	r2, r2, r0
 8007c24:	445a      	add	r2, fp
 8007c26:	f8de 0000 	ldr.w	r0, [lr]
 8007c2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007c34:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007c38:	b292      	uxth	r2, r2
 8007c3a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c3e:	45e1      	cmp	r9, ip
 8007c40:	f84e 2b04 	str.w	r2, [lr], #4
 8007c44:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007c48:	d2de      	bcs.n	8007c08 <quorem+0x42>
 8007c4a:	9b00      	ldr	r3, [sp, #0]
 8007c4c:	58eb      	ldr	r3, [r5, r3]
 8007c4e:	b92b      	cbnz	r3, 8007c5c <quorem+0x96>
 8007c50:	9b01      	ldr	r3, [sp, #4]
 8007c52:	3b04      	subs	r3, #4
 8007c54:	429d      	cmp	r5, r3
 8007c56:	461a      	mov	r2, r3
 8007c58:	d32f      	bcc.n	8007cba <quorem+0xf4>
 8007c5a:	613c      	str	r4, [r7, #16]
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	f001 f8c3 	bl	8008de8 <__mcmp>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	db25      	blt.n	8007cb2 <quorem+0xec>
 8007c66:	4629      	mov	r1, r5
 8007c68:	2000      	movs	r0, #0
 8007c6a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c6e:	f8d1 c000 	ldr.w	ip, [r1]
 8007c72:	fa1f fe82 	uxth.w	lr, r2
 8007c76:	fa1f f38c 	uxth.w	r3, ip
 8007c7a:	eba3 030e 	sub.w	r3, r3, lr
 8007c7e:	4403      	add	r3, r0
 8007c80:	0c12      	lsrs	r2, r2, #16
 8007c82:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c86:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c90:	45c1      	cmp	r9, r8
 8007c92:	f841 3b04 	str.w	r3, [r1], #4
 8007c96:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c9a:	d2e6      	bcs.n	8007c6a <quorem+0xa4>
 8007c9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ca0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ca4:	b922      	cbnz	r2, 8007cb0 <quorem+0xea>
 8007ca6:	3b04      	subs	r3, #4
 8007ca8:	429d      	cmp	r5, r3
 8007caa:	461a      	mov	r2, r3
 8007cac:	d30b      	bcc.n	8007cc6 <quorem+0x100>
 8007cae:	613c      	str	r4, [r7, #16]
 8007cb0:	3601      	adds	r6, #1
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	b003      	add	sp, #12
 8007cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cba:	6812      	ldr	r2, [r2, #0]
 8007cbc:	3b04      	subs	r3, #4
 8007cbe:	2a00      	cmp	r2, #0
 8007cc0:	d1cb      	bne.n	8007c5a <quorem+0x94>
 8007cc2:	3c01      	subs	r4, #1
 8007cc4:	e7c6      	b.n	8007c54 <quorem+0x8e>
 8007cc6:	6812      	ldr	r2, [r2, #0]
 8007cc8:	3b04      	subs	r3, #4
 8007cca:	2a00      	cmp	r2, #0
 8007ccc:	d1ef      	bne.n	8007cae <quorem+0xe8>
 8007cce:	3c01      	subs	r4, #1
 8007cd0:	e7ea      	b.n	8007ca8 <quorem+0xe2>
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	e7ee      	b.n	8007cb4 <quorem+0xee>
	...

08007cd8 <_dtoa_r>:
 8007cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cdc:	69c7      	ldr	r7, [r0, #28]
 8007cde:	b099      	sub	sp, #100	@ 0x64
 8007ce0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007ce4:	ec55 4b10 	vmov	r4, r5, d0
 8007ce8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007cea:	9109      	str	r1, [sp, #36]	@ 0x24
 8007cec:	4683      	mov	fp, r0
 8007cee:	920e      	str	r2, [sp, #56]	@ 0x38
 8007cf0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007cf2:	b97f      	cbnz	r7, 8007d14 <_dtoa_r+0x3c>
 8007cf4:	2010      	movs	r0, #16
 8007cf6:	f7ff f89b 	bl	8006e30 <malloc>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	f8cb 001c 	str.w	r0, [fp, #28]
 8007d00:	b920      	cbnz	r0, 8007d0c <_dtoa_r+0x34>
 8007d02:	4ba7      	ldr	r3, [pc, #668]	@ (8007fa0 <_dtoa_r+0x2c8>)
 8007d04:	21ef      	movs	r1, #239	@ 0xef
 8007d06:	48a7      	ldr	r0, [pc, #668]	@ (8007fa4 <_dtoa_r+0x2cc>)
 8007d08:	f001 fba2 	bl	8009450 <__assert_func>
 8007d0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007d10:	6007      	str	r7, [r0, #0]
 8007d12:	60c7      	str	r7, [r0, #12]
 8007d14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d18:	6819      	ldr	r1, [r3, #0]
 8007d1a:	b159      	cbz	r1, 8007d34 <_dtoa_r+0x5c>
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	604a      	str	r2, [r1, #4]
 8007d20:	2301      	movs	r3, #1
 8007d22:	4093      	lsls	r3, r2
 8007d24:	608b      	str	r3, [r1, #8]
 8007d26:	4658      	mov	r0, fp
 8007d28:	f000 fe24 	bl	8008974 <_Bfree>
 8007d2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d30:	2200      	movs	r2, #0
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	1e2b      	subs	r3, r5, #0
 8007d36:	bfb9      	ittee	lt
 8007d38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007d3c:	9303      	strlt	r3, [sp, #12]
 8007d3e:	2300      	movge	r3, #0
 8007d40:	6033      	strge	r3, [r6, #0]
 8007d42:	9f03      	ldr	r7, [sp, #12]
 8007d44:	4b98      	ldr	r3, [pc, #608]	@ (8007fa8 <_dtoa_r+0x2d0>)
 8007d46:	bfbc      	itt	lt
 8007d48:	2201      	movlt	r2, #1
 8007d4a:	6032      	strlt	r2, [r6, #0]
 8007d4c:	43bb      	bics	r3, r7
 8007d4e:	d112      	bne.n	8007d76 <_dtoa_r+0x9e>
 8007d50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d52:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d5c:	4323      	orrs	r3, r4
 8007d5e:	f000 854d 	beq.w	80087fc <_dtoa_r+0xb24>
 8007d62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007fbc <_dtoa_r+0x2e4>
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 854f 	beq.w	800880c <_dtoa_r+0xb34>
 8007d6e:	f10a 0303 	add.w	r3, sl, #3
 8007d72:	f000 bd49 	b.w	8008808 <_dtoa_r+0xb30>
 8007d76:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	ec51 0b17 	vmov	r0, r1, d7
 8007d80:	2300      	movs	r3, #0
 8007d82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007d86:	f7f8 fea7 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d8a:	4680      	mov	r8, r0
 8007d8c:	b158      	cbz	r0, 8007da6 <_dtoa_r+0xce>
 8007d8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d90:	2301      	movs	r3, #1
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d96:	b113      	cbz	r3, 8007d9e <_dtoa_r+0xc6>
 8007d98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d9a:	4b84      	ldr	r3, [pc, #528]	@ (8007fac <_dtoa_r+0x2d4>)
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007fc0 <_dtoa_r+0x2e8>
 8007da2:	f000 bd33 	b.w	800880c <_dtoa_r+0xb34>
 8007da6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007daa:	aa16      	add	r2, sp, #88	@ 0x58
 8007dac:	a917      	add	r1, sp, #92	@ 0x5c
 8007dae:	4658      	mov	r0, fp
 8007db0:	f001 f8ca 	bl	8008f48 <__d2b>
 8007db4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007db8:	4681      	mov	r9, r0
 8007dba:	2e00      	cmp	r6, #0
 8007dbc:	d077      	beq.n	8007eae <_dtoa_r+0x1d6>
 8007dbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007dc0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dcc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007dd0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007dd4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007dd8:	4619      	mov	r1, r3
 8007dda:	2200      	movs	r2, #0
 8007ddc:	4b74      	ldr	r3, [pc, #464]	@ (8007fb0 <_dtoa_r+0x2d8>)
 8007dde:	f7f8 fa5b 	bl	8000298 <__aeabi_dsub>
 8007de2:	a369      	add	r3, pc, #420	@ (adr r3, 8007f88 <_dtoa_r+0x2b0>)
 8007de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de8:	f7f8 fc0e 	bl	8000608 <__aeabi_dmul>
 8007dec:	a368      	add	r3, pc, #416	@ (adr r3, 8007f90 <_dtoa_r+0x2b8>)
 8007dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df2:	f7f8 fa53 	bl	800029c <__adddf3>
 8007df6:	4604      	mov	r4, r0
 8007df8:	4630      	mov	r0, r6
 8007dfa:	460d      	mov	r5, r1
 8007dfc:	f7f8 fb9a 	bl	8000534 <__aeabi_i2d>
 8007e00:	a365      	add	r3, pc, #404	@ (adr r3, 8007f98 <_dtoa_r+0x2c0>)
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	f7f8 fbff 	bl	8000608 <__aeabi_dmul>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4620      	mov	r0, r4
 8007e10:	4629      	mov	r1, r5
 8007e12:	f7f8 fa43 	bl	800029c <__adddf3>
 8007e16:	4604      	mov	r4, r0
 8007e18:	460d      	mov	r5, r1
 8007e1a:	f7f8 fea5 	bl	8000b68 <__aeabi_d2iz>
 8007e1e:	2200      	movs	r2, #0
 8007e20:	4607      	mov	r7, r0
 8007e22:	2300      	movs	r3, #0
 8007e24:	4620      	mov	r0, r4
 8007e26:	4629      	mov	r1, r5
 8007e28:	f7f8 fe60 	bl	8000aec <__aeabi_dcmplt>
 8007e2c:	b140      	cbz	r0, 8007e40 <_dtoa_r+0x168>
 8007e2e:	4638      	mov	r0, r7
 8007e30:	f7f8 fb80 	bl	8000534 <__aeabi_i2d>
 8007e34:	4622      	mov	r2, r4
 8007e36:	462b      	mov	r3, r5
 8007e38:	f7f8 fe4e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e3c:	b900      	cbnz	r0, 8007e40 <_dtoa_r+0x168>
 8007e3e:	3f01      	subs	r7, #1
 8007e40:	2f16      	cmp	r7, #22
 8007e42:	d851      	bhi.n	8007ee8 <_dtoa_r+0x210>
 8007e44:	4b5b      	ldr	r3, [pc, #364]	@ (8007fb4 <_dtoa_r+0x2dc>)
 8007e46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e52:	f7f8 fe4b 	bl	8000aec <__aeabi_dcmplt>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d048      	beq.n	8007eec <_dtoa_r+0x214>
 8007e5a:	3f01      	subs	r7, #1
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007e60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007e62:	1b9b      	subs	r3, r3, r6
 8007e64:	1e5a      	subs	r2, r3, #1
 8007e66:	bf44      	itt	mi
 8007e68:	f1c3 0801 	rsbmi	r8, r3, #1
 8007e6c:	2300      	movmi	r3, #0
 8007e6e:	9208      	str	r2, [sp, #32]
 8007e70:	bf54      	ite	pl
 8007e72:	f04f 0800 	movpl.w	r8, #0
 8007e76:	9308      	strmi	r3, [sp, #32]
 8007e78:	2f00      	cmp	r7, #0
 8007e7a:	db39      	blt.n	8007ef0 <_dtoa_r+0x218>
 8007e7c:	9b08      	ldr	r3, [sp, #32]
 8007e7e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007e80:	443b      	add	r3, r7
 8007e82:	9308      	str	r3, [sp, #32]
 8007e84:	2300      	movs	r3, #0
 8007e86:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e8a:	2b09      	cmp	r3, #9
 8007e8c:	d864      	bhi.n	8007f58 <_dtoa_r+0x280>
 8007e8e:	2b05      	cmp	r3, #5
 8007e90:	bfc4      	itt	gt
 8007e92:	3b04      	subgt	r3, #4
 8007e94:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e98:	f1a3 0302 	sub.w	r3, r3, #2
 8007e9c:	bfcc      	ite	gt
 8007e9e:	2400      	movgt	r4, #0
 8007ea0:	2401      	movle	r4, #1
 8007ea2:	2b03      	cmp	r3, #3
 8007ea4:	d863      	bhi.n	8007f6e <_dtoa_r+0x296>
 8007ea6:	e8df f003 	tbb	[pc, r3]
 8007eaa:	372a      	.short	0x372a
 8007eac:	5535      	.short	0x5535
 8007eae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007eb2:	441e      	add	r6, r3
 8007eb4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007eb8:	2b20      	cmp	r3, #32
 8007eba:	bfc1      	itttt	gt
 8007ebc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007ec0:	409f      	lslgt	r7, r3
 8007ec2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007ec6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007eca:	bfd6      	itet	le
 8007ecc:	f1c3 0320 	rsble	r3, r3, #32
 8007ed0:	ea47 0003 	orrgt.w	r0, r7, r3
 8007ed4:	fa04 f003 	lslle.w	r0, r4, r3
 8007ed8:	f7f8 fb1c 	bl	8000514 <__aeabi_ui2d>
 8007edc:	2201      	movs	r2, #1
 8007ede:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007ee2:	3e01      	subs	r6, #1
 8007ee4:	9214      	str	r2, [sp, #80]	@ 0x50
 8007ee6:	e777      	b.n	8007dd8 <_dtoa_r+0x100>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e7b8      	b.n	8007e5e <_dtoa_r+0x186>
 8007eec:	9012      	str	r0, [sp, #72]	@ 0x48
 8007eee:	e7b7      	b.n	8007e60 <_dtoa_r+0x188>
 8007ef0:	427b      	negs	r3, r7
 8007ef2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	eba8 0807 	sub.w	r8, r8, r7
 8007efa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007efc:	e7c4      	b.n	8007e88 <_dtoa_r+0x1b0>
 8007efe:	2300      	movs	r3, #0
 8007f00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	dc35      	bgt.n	8007f74 <_dtoa_r+0x29c>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	9307      	str	r3, [sp, #28]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f12:	e00b      	b.n	8007f2c <_dtoa_r+0x254>
 8007f14:	2301      	movs	r3, #1
 8007f16:	e7f3      	b.n	8007f00 <_dtoa_r+0x228>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f1e:	18fb      	adds	r3, r7, r3
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	3301      	adds	r3, #1
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	9307      	str	r3, [sp, #28]
 8007f28:	bfb8      	it	lt
 8007f2a:	2301      	movlt	r3, #1
 8007f2c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007f30:	2100      	movs	r1, #0
 8007f32:	2204      	movs	r2, #4
 8007f34:	f102 0514 	add.w	r5, r2, #20
 8007f38:	429d      	cmp	r5, r3
 8007f3a:	d91f      	bls.n	8007f7c <_dtoa_r+0x2a4>
 8007f3c:	6041      	str	r1, [r0, #4]
 8007f3e:	4658      	mov	r0, fp
 8007f40:	f000 fcd8 	bl	80088f4 <_Balloc>
 8007f44:	4682      	mov	sl, r0
 8007f46:	2800      	cmp	r0, #0
 8007f48:	d13c      	bne.n	8007fc4 <_dtoa_r+0x2ec>
 8007f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8007fb8 <_dtoa_r+0x2e0>)
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007f52:	e6d8      	b.n	8007d06 <_dtoa_r+0x2e>
 8007f54:	2301      	movs	r3, #1
 8007f56:	e7e0      	b.n	8007f1a <_dtoa_r+0x242>
 8007f58:	2401      	movs	r4, #1
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007f60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	9307      	str	r3, [sp, #28]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2312      	movs	r3, #18
 8007f6c:	e7d0      	b.n	8007f10 <_dtoa_r+0x238>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f72:	e7f5      	b.n	8007f60 <_dtoa_r+0x288>
 8007f74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	9307      	str	r3, [sp, #28]
 8007f7a:	e7d7      	b.n	8007f2c <_dtoa_r+0x254>
 8007f7c:	3101      	adds	r1, #1
 8007f7e:	0052      	lsls	r2, r2, #1
 8007f80:	e7d8      	b.n	8007f34 <_dtoa_r+0x25c>
 8007f82:	bf00      	nop
 8007f84:	f3af 8000 	nop.w
 8007f88:	636f4361 	.word	0x636f4361
 8007f8c:	3fd287a7 	.word	0x3fd287a7
 8007f90:	8b60c8b3 	.word	0x8b60c8b3
 8007f94:	3fc68a28 	.word	0x3fc68a28
 8007f98:	509f79fb 	.word	0x509f79fb
 8007f9c:	3fd34413 	.word	0x3fd34413
 8007fa0:	0800b0b1 	.word	0x0800b0b1
 8007fa4:	0800b0c8 	.word	0x0800b0c8
 8007fa8:	7ff00000 	.word	0x7ff00000
 8007fac:	0800b081 	.word	0x0800b081
 8007fb0:	3ff80000 	.word	0x3ff80000
 8007fb4:	0800b1c0 	.word	0x0800b1c0
 8007fb8:	0800b120 	.word	0x0800b120
 8007fbc:	0800b0ad 	.word	0x0800b0ad
 8007fc0:	0800b080 	.word	0x0800b080
 8007fc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007fc8:	6018      	str	r0, [r3, #0]
 8007fca:	9b07      	ldr	r3, [sp, #28]
 8007fcc:	2b0e      	cmp	r3, #14
 8007fce:	f200 80a4 	bhi.w	800811a <_dtoa_r+0x442>
 8007fd2:	2c00      	cmp	r4, #0
 8007fd4:	f000 80a1 	beq.w	800811a <_dtoa_r+0x442>
 8007fd8:	2f00      	cmp	r7, #0
 8007fda:	dd33      	ble.n	8008044 <_dtoa_r+0x36c>
 8007fdc:	4bad      	ldr	r3, [pc, #692]	@ (8008294 <_dtoa_r+0x5bc>)
 8007fde:	f007 020f 	and.w	r2, r7, #15
 8007fe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fe6:	ed93 7b00 	vldr	d7, [r3]
 8007fea:	05f8      	lsls	r0, r7, #23
 8007fec:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007ff0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007ff4:	d516      	bpl.n	8008024 <_dtoa_r+0x34c>
 8007ff6:	4ba8      	ldr	r3, [pc, #672]	@ (8008298 <_dtoa_r+0x5c0>)
 8007ff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ffc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008000:	f7f8 fc2c 	bl	800085c <__aeabi_ddiv>
 8008004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008008:	f004 040f 	and.w	r4, r4, #15
 800800c:	2603      	movs	r6, #3
 800800e:	4da2      	ldr	r5, [pc, #648]	@ (8008298 <_dtoa_r+0x5c0>)
 8008010:	b954      	cbnz	r4, 8008028 <_dtoa_r+0x350>
 8008012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800801a:	f7f8 fc1f 	bl	800085c <__aeabi_ddiv>
 800801e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008022:	e028      	b.n	8008076 <_dtoa_r+0x39e>
 8008024:	2602      	movs	r6, #2
 8008026:	e7f2      	b.n	800800e <_dtoa_r+0x336>
 8008028:	07e1      	lsls	r1, r4, #31
 800802a:	d508      	bpl.n	800803e <_dtoa_r+0x366>
 800802c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008030:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008034:	f7f8 fae8 	bl	8000608 <__aeabi_dmul>
 8008038:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800803c:	3601      	adds	r6, #1
 800803e:	1064      	asrs	r4, r4, #1
 8008040:	3508      	adds	r5, #8
 8008042:	e7e5      	b.n	8008010 <_dtoa_r+0x338>
 8008044:	f000 80d2 	beq.w	80081ec <_dtoa_r+0x514>
 8008048:	427c      	negs	r4, r7
 800804a:	4b92      	ldr	r3, [pc, #584]	@ (8008294 <_dtoa_r+0x5bc>)
 800804c:	4d92      	ldr	r5, [pc, #584]	@ (8008298 <_dtoa_r+0x5c0>)
 800804e:	f004 020f 	and.w	r2, r4, #15
 8008052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800805e:	f7f8 fad3 	bl	8000608 <__aeabi_dmul>
 8008062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008066:	1124      	asrs	r4, r4, #4
 8008068:	2300      	movs	r3, #0
 800806a:	2602      	movs	r6, #2
 800806c:	2c00      	cmp	r4, #0
 800806e:	f040 80b2 	bne.w	80081d6 <_dtoa_r+0x4fe>
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1d3      	bne.n	800801e <_dtoa_r+0x346>
 8008076:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008078:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 80b7 	beq.w	80081f0 <_dtoa_r+0x518>
 8008082:	4b86      	ldr	r3, [pc, #536]	@ (800829c <_dtoa_r+0x5c4>)
 8008084:	2200      	movs	r2, #0
 8008086:	4620      	mov	r0, r4
 8008088:	4629      	mov	r1, r5
 800808a:	f7f8 fd2f 	bl	8000aec <__aeabi_dcmplt>
 800808e:	2800      	cmp	r0, #0
 8008090:	f000 80ae 	beq.w	80081f0 <_dtoa_r+0x518>
 8008094:	9b07      	ldr	r3, [sp, #28]
 8008096:	2b00      	cmp	r3, #0
 8008098:	f000 80aa 	beq.w	80081f0 <_dtoa_r+0x518>
 800809c:	9b00      	ldr	r3, [sp, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	dd37      	ble.n	8008112 <_dtoa_r+0x43a>
 80080a2:	1e7b      	subs	r3, r7, #1
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	4620      	mov	r0, r4
 80080a8:	4b7d      	ldr	r3, [pc, #500]	@ (80082a0 <_dtoa_r+0x5c8>)
 80080aa:	2200      	movs	r2, #0
 80080ac:	4629      	mov	r1, r5
 80080ae:	f7f8 faab 	bl	8000608 <__aeabi_dmul>
 80080b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080b6:	9c00      	ldr	r4, [sp, #0]
 80080b8:	3601      	adds	r6, #1
 80080ba:	4630      	mov	r0, r6
 80080bc:	f7f8 fa3a 	bl	8000534 <__aeabi_i2d>
 80080c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080c4:	f7f8 faa0 	bl	8000608 <__aeabi_dmul>
 80080c8:	4b76      	ldr	r3, [pc, #472]	@ (80082a4 <_dtoa_r+0x5cc>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	f7f8 f8e6 	bl	800029c <__adddf3>
 80080d0:	4605      	mov	r5, r0
 80080d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80080d6:	2c00      	cmp	r4, #0
 80080d8:	f040 808d 	bne.w	80081f6 <_dtoa_r+0x51e>
 80080dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080e0:	4b71      	ldr	r3, [pc, #452]	@ (80082a8 <_dtoa_r+0x5d0>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	f7f8 f8d8 	bl	8000298 <__aeabi_dsub>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080f0:	462a      	mov	r2, r5
 80080f2:	4633      	mov	r3, r6
 80080f4:	f7f8 fd18 	bl	8000b28 <__aeabi_dcmpgt>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	f040 828b 	bne.w	8008614 <_dtoa_r+0x93c>
 80080fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008102:	462a      	mov	r2, r5
 8008104:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008108:	f7f8 fcf0 	bl	8000aec <__aeabi_dcmplt>
 800810c:	2800      	cmp	r0, #0
 800810e:	f040 8128 	bne.w	8008362 <_dtoa_r+0x68a>
 8008112:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008116:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800811a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800811c:	2b00      	cmp	r3, #0
 800811e:	f2c0 815a 	blt.w	80083d6 <_dtoa_r+0x6fe>
 8008122:	2f0e      	cmp	r7, #14
 8008124:	f300 8157 	bgt.w	80083d6 <_dtoa_r+0x6fe>
 8008128:	4b5a      	ldr	r3, [pc, #360]	@ (8008294 <_dtoa_r+0x5bc>)
 800812a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800812e:	ed93 7b00 	vldr	d7, [r3]
 8008132:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008134:	2b00      	cmp	r3, #0
 8008136:	ed8d 7b00 	vstr	d7, [sp]
 800813a:	da03      	bge.n	8008144 <_dtoa_r+0x46c>
 800813c:	9b07      	ldr	r3, [sp, #28]
 800813e:	2b00      	cmp	r3, #0
 8008140:	f340 8101 	ble.w	8008346 <_dtoa_r+0x66e>
 8008144:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008148:	4656      	mov	r6, sl
 800814a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800814e:	4620      	mov	r0, r4
 8008150:	4629      	mov	r1, r5
 8008152:	f7f8 fb83 	bl	800085c <__aeabi_ddiv>
 8008156:	f7f8 fd07 	bl	8000b68 <__aeabi_d2iz>
 800815a:	4680      	mov	r8, r0
 800815c:	f7f8 f9ea 	bl	8000534 <__aeabi_i2d>
 8008160:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008164:	f7f8 fa50 	bl	8000608 <__aeabi_dmul>
 8008168:	4602      	mov	r2, r0
 800816a:	460b      	mov	r3, r1
 800816c:	4620      	mov	r0, r4
 800816e:	4629      	mov	r1, r5
 8008170:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008174:	f7f8 f890 	bl	8000298 <__aeabi_dsub>
 8008178:	f806 4b01 	strb.w	r4, [r6], #1
 800817c:	9d07      	ldr	r5, [sp, #28]
 800817e:	eba6 040a 	sub.w	r4, r6, sl
 8008182:	42a5      	cmp	r5, r4
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	f040 8117 	bne.w	80083ba <_dtoa_r+0x6e2>
 800818c:	f7f8 f886 	bl	800029c <__adddf3>
 8008190:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008194:	4604      	mov	r4, r0
 8008196:	460d      	mov	r5, r1
 8008198:	f7f8 fcc6 	bl	8000b28 <__aeabi_dcmpgt>
 800819c:	2800      	cmp	r0, #0
 800819e:	f040 80f9 	bne.w	8008394 <_dtoa_r+0x6bc>
 80081a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081a6:	4620      	mov	r0, r4
 80081a8:	4629      	mov	r1, r5
 80081aa:	f7f8 fc95 	bl	8000ad8 <__aeabi_dcmpeq>
 80081ae:	b118      	cbz	r0, 80081b8 <_dtoa_r+0x4e0>
 80081b0:	f018 0f01 	tst.w	r8, #1
 80081b4:	f040 80ee 	bne.w	8008394 <_dtoa_r+0x6bc>
 80081b8:	4649      	mov	r1, r9
 80081ba:	4658      	mov	r0, fp
 80081bc:	f000 fbda 	bl	8008974 <_Bfree>
 80081c0:	2300      	movs	r3, #0
 80081c2:	7033      	strb	r3, [r6, #0]
 80081c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80081c6:	3701      	adds	r7, #1
 80081c8:	601f      	str	r7, [r3, #0]
 80081ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 831d 	beq.w	800880c <_dtoa_r+0xb34>
 80081d2:	601e      	str	r6, [r3, #0]
 80081d4:	e31a      	b.n	800880c <_dtoa_r+0xb34>
 80081d6:	07e2      	lsls	r2, r4, #31
 80081d8:	d505      	bpl.n	80081e6 <_dtoa_r+0x50e>
 80081da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081de:	f7f8 fa13 	bl	8000608 <__aeabi_dmul>
 80081e2:	3601      	adds	r6, #1
 80081e4:	2301      	movs	r3, #1
 80081e6:	1064      	asrs	r4, r4, #1
 80081e8:	3508      	adds	r5, #8
 80081ea:	e73f      	b.n	800806c <_dtoa_r+0x394>
 80081ec:	2602      	movs	r6, #2
 80081ee:	e742      	b.n	8008076 <_dtoa_r+0x39e>
 80081f0:	9c07      	ldr	r4, [sp, #28]
 80081f2:	9704      	str	r7, [sp, #16]
 80081f4:	e761      	b.n	80080ba <_dtoa_r+0x3e2>
 80081f6:	4b27      	ldr	r3, [pc, #156]	@ (8008294 <_dtoa_r+0x5bc>)
 80081f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008202:	4454      	add	r4, sl
 8008204:	2900      	cmp	r1, #0
 8008206:	d053      	beq.n	80082b0 <_dtoa_r+0x5d8>
 8008208:	4928      	ldr	r1, [pc, #160]	@ (80082ac <_dtoa_r+0x5d4>)
 800820a:	2000      	movs	r0, #0
 800820c:	f7f8 fb26 	bl	800085c <__aeabi_ddiv>
 8008210:	4633      	mov	r3, r6
 8008212:	462a      	mov	r2, r5
 8008214:	f7f8 f840 	bl	8000298 <__aeabi_dsub>
 8008218:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800821c:	4656      	mov	r6, sl
 800821e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008222:	f7f8 fca1 	bl	8000b68 <__aeabi_d2iz>
 8008226:	4605      	mov	r5, r0
 8008228:	f7f8 f984 	bl	8000534 <__aeabi_i2d>
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008234:	f7f8 f830 	bl	8000298 <__aeabi_dsub>
 8008238:	3530      	adds	r5, #48	@ 0x30
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008242:	f806 5b01 	strb.w	r5, [r6], #1
 8008246:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800824a:	f7f8 fc4f 	bl	8000aec <__aeabi_dcmplt>
 800824e:	2800      	cmp	r0, #0
 8008250:	d171      	bne.n	8008336 <_dtoa_r+0x65e>
 8008252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008256:	4911      	ldr	r1, [pc, #68]	@ (800829c <_dtoa_r+0x5c4>)
 8008258:	2000      	movs	r0, #0
 800825a:	f7f8 f81d 	bl	8000298 <__aeabi_dsub>
 800825e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008262:	f7f8 fc43 	bl	8000aec <__aeabi_dcmplt>
 8008266:	2800      	cmp	r0, #0
 8008268:	f040 8095 	bne.w	8008396 <_dtoa_r+0x6be>
 800826c:	42a6      	cmp	r6, r4
 800826e:	f43f af50 	beq.w	8008112 <_dtoa_r+0x43a>
 8008272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008276:	4b0a      	ldr	r3, [pc, #40]	@ (80082a0 <_dtoa_r+0x5c8>)
 8008278:	2200      	movs	r2, #0
 800827a:	f7f8 f9c5 	bl	8000608 <__aeabi_dmul>
 800827e:	4b08      	ldr	r3, [pc, #32]	@ (80082a0 <_dtoa_r+0x5c8>)
 8008280:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008284:	2200      	movs	r2, #0
 8008286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800828a:	f7f8 f9bd 	bl	8000608 <__aeabi_dmul>
 800828e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008292:	e7c4      	b.n	800821e <_dtoa_r+0x546>
 8008294:	0800b1c0 	.word	0x0800b1c0
 8008298:	0800b198 	.word	0x0800b198
 800829c:	3ff00000 	.word	0x3ff00000
 80082a0:	40240000 	.word	0x40240000
 80082a4:	401c0000 	.word	0x401c0000
 80082a8:	40140000 	.word	0x40140000
 80082ac:	3fe00000 	.word	0x3fe00000
 80082b0:	4631      	mov	r1, r6
 80082b2:	4628      	mov	r0, r5
 80082b4:	f7f8 f9a8 	bl	8000608 <__aeabi_dmul>
 80082b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80082bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80082be:	4656      	mov	r6, sl
 80082c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082c4:	f7f8 fc50 	bl	8000b68 <__aeabi_d2iz>
 80082c8:	4605      	mov	r5, r0
 80082ca:	f7f8 f933 	bl	8000534 <__aeabi_i2d>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082d6:	f7f7 ffdf 	bl	8000298 <__aeabi_dsub>
 80082da:	3530      	adds	r5, #48	@ 0x30
 80082dc:	f806 5b01 	strb.w	r5, [r6], #1
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	42a6      	cmp	r6, r4
 80082e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082ea:	f04f 0200 	mov.w	r2, #0
 80082ee:	d124      	bne.n	800833a <_dtoa_r+0x662>
 80082f0:	4bac      	ldr	r3, [pc, #688]	@ (80085a4 <_dtoa_r+0x8cc>)
 80082f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80082f6:	f7f7 ffd1 	bl	800029c <__adddf3>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008302:	f7f8 fc11 	bl	8000b28 <__aeabi_dcmpgt>
 8008306:	2800      	cmp	r0, #0
 8008308:	d145      	bne.n	8008396 <_dtoa_r+0x6be>
 800830a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800830e:	49a5      	ldr	r1, [pc, #660]	@ (80085a4 <_dtoa_r+0x8cc>)
 8008310:	2000      	movs	r0, #0
 8008312:	f7f7 ffc1 	bl	8000298 <__aeabi_dsub>
 8008316:	4602      	mov	r2, r0
 8008318:	460b      	mov	r3, r1
 800831a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800831e:	f7f8 fbe5 	bl	8000aec <__aeabi_dcmplt>
 8008322:	2800      	cmp	r0, #0
 8008324:	f43f aef5 	beq.w	8008112 <_dtoa_r+0x43a>
 8008328:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800832a:	1e73      	subs	r3, r6, #1
 800832c:	9315      	str	r3, [sp, #84]	@ 0x54
 800832e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008332:	2b30      	cmp	r3, #48	@ 0x30
 8008334:	d0f8      	beq.n	8008328 <_dtoa_r+0x650>
 8008336:	9f04      	ldr	r7, [sp, #16]
 8008338:	e73e      	b.n	80081b8 <_dtoa_r+0x4e0>
 800833a:	4b9b      	ldr	r3, [pc, #620]	@ (80085a8 <_dtoa_r+0x8d0>)
 800833c:	f7f8 f964 	bl	8000608 <__aeabi_dmul>
 8008340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008344:	e7bc      	b.n	80082c0 <_dtoa_r+0x5e8>
 8008346:	d10c      	bne.n	8008362 <_dtoa_r+0x68a>
 8008348:	4b98      	ldr	r3, [pc, #608]	@ (80085ac <_dtoa_r+0x8d4>)
 800834a:	2200      	movs	r2, #0
 800834c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008350:	f7f8 f95a 	bl	8000608 <__aeabi_dmul>
 8008354:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008358:	f7f8 fbdc 	bl	8000b14 <__aeabi_dcmpge>
 800835c:	2800      	cmp	r0, #0
 800835e:	f000 8157 	beq.w	8008610 <_dtoa_r+0x938>
 8008362:	2400      	movs	r4, #0
 8008364:	4625      	mov	r5, r4
 8008366:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008368:	43db      	mvns	r3, r3
 800836a:	9304      	str	r3, [sp, #16]
 800836c:	4656      	mov	r6, sl
 800836e:	2700      	movs	r7, #0
 8008370:	4621      	mov	r1, r4
 8008372:	4658      	mov	r0, fp
 8008374:	f000 fafe 	bl	8008974 <_Bfree>
 8008378:	2d00      	cmp	r5, #0
 800837a:	d0dc      	beq.n	8008336 <_dtoa_r+0x65e>
 800837c:	b12f      	cbz	r7, 800838a <_dtoa_r+0x6b2>
 800837e:	42af      	cmp	r7, r5
 8008380:	d003      	beq.n	800838a <_dtoa_r+0x6b2>
 8008382:	4639      	mov	r1, r7
 8008384:	4658      	mov	r0, fp
 8008386:	f000 faf5 	bl	8008974 <_Bfree>
 800838a:	4629      	mov	r1, r5
 800838c:	4658      	mov	r0, fp
 800838e:	f000 faf1 	bl	8008974 <_Bfree>
 8008392:	e7d0      	b.n	8008336 <_dtoa_r+0x65e>
 8008394:	9704      	str	r7, [sp, #16]
 8008396:	4633      	mov	r3, r6
 8008398:	461e      	mov	r6, r3
 800839a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800839e:	2a39      	cmp	r2, #57	@ 0x39
 80083a0:	d107      	bne.n	80083b2 <_dtoa_r+0x6da>
 80083a2:	459a      	cmp	sl, r3
 80083a4:	d1f8      	bne.n	8008398 <_dtoa_r+0x6c0>
 80083a6:	9a04      	ldr	r2, [sp, #16]
 80083a8:	3201      	adds	r2, #1
 80083aa:	9204      	str	r2, [sp, #16]
 80083ac:	2230      	movs	r2, #48	@ 0x30
 80083ae:	f88a 2000 	strb.w	r2, [sl]
 80083b2:	781a      	ldrb	r2, [r3, #0]
 80083b4:	3201      	adds	r2, #1
 80083b6:	701a      	strb	r2, [r3, #0]
 80083b8:	e7bd      	b.n	8008336 <_dtoa_r+0x65e>
 80083ba:	4b7b      	ldr	r3, [pc, #492]	@ (80085a8 <_dtoa_r+0x8d0>)
 80083bc:	2200      	movs	r2, #0
 80083be:	f7f8 f923 	bl	8000608 <__aeabi_dmul>
 80083c2:	2200      	movs	r2, #0
 80083c4:	2300      	movs	r3, #0
 80083c6:	4604      	mov	r4, r0
 80083c8:	460d      	mov	r5, r1
 80083ca:	f7f8 fb85 	bl	8000ad8 <__aeabi_dcmpeq>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	f43f aebb 	beq.w	800814a <_dtoa_r+0x472>
 80083d4:	e6f0      	b.n	80081b8 <_dtoa_r+0x4e0>
 80083d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80083d8:	2a00      	cmp	r2, #0
 80083da:	f000 80db 	beq.w	8008594 <_dtoa_r+0x8bc>
 80083de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083e0:	2a01      	cmp	r2, #1
 80083e2:	f300 80bf 	bgt.w	8008564 <_dtoa_r+0x88c>
 80083e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80083e8:	2a00      	cmp	r2, #0
 80083ea:	f000 80b7 	beq.w	800855c <_dtoa_r+0x884>
 80083ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80083f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80083f4:	4646      	mov	r6, r8
 80083f6:	9a08      	ldr	r2, [sp, #32]
 80083f8:	2101      	movs	r1, #1
 80083fa:	441a      	add	r2, r3
 80083fc:	4658      	mov	r0, fp
 80083fe:	4498      	add	r8, r3
 8008400:	9208      	str	r2, [sp, #32]
 8008402:	f000 fb6b 	bl	8008adc <__i2b>
 8008406:	4605      	mov	r5, r0
 8008408:	b15e      	cbz	r6, 8008422 <_dtoa_r+0x74a>
 800840a:	9b08      	ldr	r3, [sp, #32]
 800840c:	2b00      	cmp	r3, #0
 800840e:	dd08      	ble.n	8008422 <_dtoa_r+0x74a>
 8008410:	42b3      	cmp	r3, r6
 8008412:	9a08      	ldr	r2, [sp, #32]
 8008414:	bfa8      	it	ge
 8008416:	4633      	movge	r3, r6
 8008418:	eba8 0803 	sub.w	r8, r8, r3
 800841c:	1af6      	subs	r6, r6, r3
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	9308      	str	r3, [sp, #32]
 8008422:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008424:	b1f3      	cbz	r3, 8008464 <_dtoa_r+0x78c>
 8008426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 80b7 	beq.w	800859c <_dtoa_r+0x8c4>
 800842e:	b18c      	cbz	r4, 8008454 <_dtoa_r+0x77c>
 8008430:	4629      	mov	r1, r5
 8008432:	4622      	mov	r2, r4
 8008434:	4658      	mov	r0, fp
 8008436:	f000 fc11 	bl	8008c5c <__pow5mult>
 800843a:	464a      	mov	r2, r9
 800843c:	4601      	mov	r1, r0
 800843e:	4605      	mov	r5, r0
 8008440:	4658      	mov	r0, fp
 8008442:	f000 fb61 	bl	8008b08 <__multiply>
 8008446:	4649      	mov	r1, r9
 8008448:	9004      	str	r0, [sp, #16]
 800844a:	4658      	mov	r0, fp
 800844c:	f000 fa92 	bl	8008974 <_Bfree>
 8008450:	9b04      	ldr	r3, [sp, #16]
 8008452:	4699      	mov	r9, r3
 8008454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008456:	1b1a      	subs	r2, r3, r4
 8008458:	d004      	beq.n	8008464 <_dtoa_r+0x78c>
 800845a:	4649      	mov	r1, r9
 800845c:	4658      	mov	r0, fp
 800845e:	f000 fbfd 	bl	8008c5c <__pow5mult>
 8008462:	4681      	mov	r9, r0
 8008464:	2101      	movs	r1, #1
 8008466:	4658      	mov	r0, fp
 8008468:	f000 fb38 	bl	8008adc <__i2b>
 800846c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800846e:	4604      	mov	r4, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	f000 81cf 	beq.w	8008814 <_dtoa_r+0xb3c>
 8008476:	461a      	mov	r2, r3
 8008478:	4601      	mov	r1, r0
 800847a:	4658      	mov	r0, fp
 800847c:	f000 fbee 	bl	8008c5c <__pow5mult>
 8008480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008482:	2b01      	cmp	r3, #1
 8008484:	4604      	mov	r4, r0
 8008486:	f300 8095 	bgt.w	80085b4 <_dtoa_r+0x8dc>
 800848a:	9b02      	ldr	r3, [sp, #8]
 800848c:	2b00      	cmp	r3, #0
 800848e:	f040 8087 	bne.w	80085a0 <_dtoa_r+0x8c8>
 8008492:	9b03      	ldr	r3, [sp, #12]
 8008494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008498:	2b00      	cmp	r3, #0
 800849a:	f040 8089 	bne.w	80085b0 <_dtoa_r+0x8d8>
 800849e:	9b03      	ldr	r3, [sp, #12]
 80084a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80084a4:	0d1b      	lsrs	r3, r3, #20
 80084a6:	051b      	lsls	r3, r3, #20
 80084a8:	b12b      	cbz	r3, 80084b6 <_dtoa_r+0x7de>
 80084aa:	9b08      	ldr	r3, [sp, #32]
 80084ac:	3301      	adds	r3, #1
 80084ae:	9308      	str	r3, [sp, #32]
 80084b0:	f108 0801 	add.w	r8, r8, #1
 80084b4:	2301      	movs	r3, #1
 80084b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80084b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 81b0 	beq.w	8008820 <_dtoa_r+0xb48>
 80084c0:	6923      	ldr	r3, [r4, #16]
 80084c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80084c6:	6918      	ldr	r0, [r3, #16]
 80084c8:	f000 fabc 	bl	8008a44 <__hi0bits>
 80084cc:	f1c0 0020 	rsb	r0, r0, #32
 80084d0:	9b08      	ldr	r3, [sp, #32]
 80084d2:	4418      	add	r0, r3
 80084d4:	f010 001f 	ands.w	r0, r0, #31
 80084d8:	d077      	beq.n	80085ca <_dtoa_r+0x8f2>
 80084da:	f1c0 0320 	rsb	r3, r0, #32
 80084de:	2b04      	cmp	r3, #4
 80084e0:	dd6b      	ble.n	80085ba <_dtoa_r+0x8e2>
 80084e2:	9b08      	ldr	r3, [sp, #32]
 80084e4:	f1c0 001c 	rsb	r0, r0, #28
 80084e8:	4403      	add	r3, r0
 80084ea:	4480      	add	r8, r0
 80084ec:	4406      	add	r6, r0
 80084ee:	9308      	str	r3, [sp, #32]
 80084f0:	f1b8 0f00 	cmp.w	r8, #0
 80084f4:	dd05      	ble.n	8008502 <_dtoa_r+0x82a>
 80084f6:	4649      	mov	r1, r9
 80084f8:	4642      	mov	r2, r8
 80084fa:	4658      	mov	r0, fp
 80084fc:	f000 fc08 	bl	8008d10 <__lshift>
 8008500:	4681      	mov	r9, r0
 8008502:	9b08      	ldr	r3, [sp, #32]
 8008504:	2b00      	cmp	r3, #0
 8008506:	dd05      	ble.n	8008514 <_dtoa_r+0x83c>
 8008508:	4621      	mov	r1, r4
 800850a:	461a      	mov	r2, r3
 800850c:	4658      	mov	r0, fp
 800850e:	f000 fbff 	bl	8008d10 <__lshift>
 8008512:	4604      	mov	r4, r0
 8008514:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008516:	2b00      	cmp	r3, #0
 8008518:	d059      	beq.n	80085ce <_dtoa_r+0x8f6>
 800851a:	4621      	mov	r1, r4
 800851c:	4648      	mov	r0, r9
 800851e:	f000 fc63 	bl	8008de8 <__mcmp>
 8008522:	2800      	cmp	r0, #0
 8008524:	da53      	bge.n	80085ce <_dtoa_r+0x8f6>
 8008526:	1e7b      	subs	r3, r7, #1
 8008528:	9304      	str	r3, [sp, #16]
 800852a:	4649      	mov	r1, r9
 800852c:	2300      	movs	r3, #0
 800852e:	220a      	movs	r2, #10
 8008530:	4658      	mov	r0, fp
 8008532:	f000 fa41 	bl	80089b8 <__multadd>
 8008536:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008538:	4681      	mov	r9, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	f000 8172 	beq.w	8008824 <_dtoa_r+0xb4c>
 8008540:	2300      	movs	r3, #0
 8008542:	4629      	mov	r1, r5
 8008544:	220a      	movs	r2, #10
 8008546:	4658      	mov	r0, fp
 8008548:	f000 fa36 	bl	80089b8 <__multadd>
 800854c:	9b00      	ldr	r3, [sp, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	4605      	mov	r5, r0
 8008552:	dc67      	bgt.n	8008624 <_dtoa_r+0x94c>
 8008554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008556:	2b02      	cmp	r3, #2
 8008558:	dc41      	bgt.n	80085de <_dtoa_r+0x906>
 800855a:	e063      	b.n	8008624 <_dtoa_r+0x94c>
 800855c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800855e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008562:	e746      	b.n	80083f2 <_dtoa_r+0x71a>
 8008564:	9b07      	ldr	r3, [sp, #28]
 8008566:	1e5c      	subs	r4, r3, #1
 8008568:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800856a:	42a3      	cmp	r3, r4
 800856c:	bfbf      	itttt	lt
 800856e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008570:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008572:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008574:	1ae3      	sublt	r3, r4, r3
 8008576:	bfb4      	ite	lt
 8008578:	18d2      	addlt	r2, r2, r3
 800857a:	1b1c      	subge	r4, r3, r4
 800857c:	9b07      	ldr	r3, [sp, #28]
 800857e:	bfbc      	itt	lt
 8008580:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008582:	2400      	movlt	r4, #0
 8008584:	2b00      	cmp	r3, #0
 8008586:	bfb5      	itete	lt
 8008588:	eba8 0603 	sublt.w	r6, r8, r3
 800858c:	9b07      	ldrge	r3, [sp, #28]
 800858e:	2300      	movlt	r3, #0
 8008590:	4646      	movge	r6, r8
 8008592:	e730      	b.n	80083f6 <_dtoa_r+0x71e>
 8008594:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008596:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008598:	4646      	mov	r6, r8
 800859a:	e735      	b.n	8008408 <_dtoa_r+0x730>
 800859c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800859e:	e75c      	b.n	800845a <_dtoa_r+0x782>
 80085a0:	2300      	movs	r3, #0
 80085a2:	e788      	b.n	80084b6 <_dtoa_r+0x7de>
 80085a4:	3fe00000 	.word	0x3fe00000
 80085a8:	40240000 	.word	0x40240000
 80085ac:	40140000 	.word	0x40140000
 80085b0:	9b02      	ldr	r3, [sp, #8]
 80085b2:	e780      	b.n	80084b6 <_dtoa_r+0x7de>
 80085b4:	2300      	movs	r3, #0
 80085b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80085b8:	e782      	b.n	80084c0 <_dtoa_r+0x7e8>
 80085ba:	d099      	beq.n	80084f0 <_dtoa_r+0x818>
 80085bc:	9a08      	ldr	r2, [sp, #32]
 80085be:	331c      	adds	r3, #28
 80085c0:	441a      	add	r2, r3
 80085c2:	4498      	add	r8, r3
 80085c4:	441e      	add	r6, r3
 80085c6:	9208      	str	r2, [sp, #32]
 80085c8:	e792      	b.n	80084f0 <_dtoa_r+0x818>
 80085ca:	4603      	mov	r3, r0
 80085cc:	e7f6      	b.n	80085bc <_dtoa_r+0x8e4>
 80085ce:	9b07      	ldr	r3, [sp, #28]
 80085d0:	9704      	str	r7, [sp, #16]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	dc20      	bgt.n	8008618 <_dtoa_r+0x940>
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085da:	2b02      	cmp	r3, #2
 80085dc:	dd1e      	ble.n	800861c <_dtoa_r+0x944>
 80085de:	9b00      	ldr	r3, [sp, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f47f aec0 	bne.w	8008366 <_dtoa_r+0x68e>
 80085e6:	4621      	mov	r1, r4
 80085e8:	2205      	movs	r2, #5
 80085ea:	4658      	mov	r0, fp
 80085ec:	f000 f9e4 	bl	80089b8 <__multadd>
 80085f0:	4601      	mov	r1, r0
 80085f2:	4604      	mov	r4, r0
 80085f4:	4648      	mov	r0, r9
 80085f6:	f000 fbf7 	bl	8008de8 <__mcmp>
 80085fa:	2800      	cmp	r0, #0
 80085fc:	f77f aeb3 	ble.w	8008366 <_dtoa_r+0x68e>
 8008600:	4656      	mov	r6, sl
 8008602:	2331      	movs	r3, #49	@ 0x31
 8008604:	f806 3b01 	strb.w	r3, [r6], #1
 8008608:	9b04      	ldr	r3, [sp, #16]
 800860a:	3301      	adds	r3, #1
 800860c:	9304      	str	r3, [sp, #16]
 800860e:	e6ae      	b.n	800836e <_dtoa_r+0x696>
 8008610:	9c07      	ldr	r4, [sp, #28]
 8008612:	9704      	str	r7, [sp, #16]
 8008614:	4625      	mov	r5, r4
 8008616:	e7f3      	b.n	8008600 <_dtoa_r+0x928>
 8008618:	9b07      	ldr	r3, [sp, #28]
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 8104 	beq.w	800882c <_dtoa_r+0xb54>
 8008624:	2e00      	cmp	r6, #0
 8008626:	dd05      	ble.n	8008634 <_dtoa_r+0x95c>
 8008628:	4629      	mov	r1, r5
 800862a:	4632      	mov	r2, r6
 800862c:	4658      	mov	r0, fp
 800862e:	f000 fb6f 	bl	8008d10 <__lshift>
 8008632:	4605      	mov	r5, r0
 8008634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008636:	2b00      	cmp	r3, #0
 8008638:	d05a      	beq.n	80086f0 <_dtoa_r+0xa18>
 800863a:	6869      	ldr	r1, [r5, #4]
 800863c:	4658      	mov	r0, fp
 800863e:	f000 f959 	bl	80088f4 <_Balloc>
 8008642:	4606      	mov	r6, r0
 8008644:	b928      	cbnz	r0, 8008652 <_dtoa_r+0x97a>
 8008646:	4b84      	ldr	r3, [pc, #528]	@ (8008858 <_dtoa_r+0xb80>)
 8008648:	4602      	mov	r2, r0
 800864a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800864e:	f7ff bb5a 	b.w	8007d06 <_dtoa_r+0x2e>
 8008652:	692a      	ldr	r2, [r5, #16]
 8008654:	3202      	adds	r2, #2
 8008656:	0092      	lsls	r2, r2, #2
 8008658:	f105 010c 	add.w	r1, r5, #12
 800865c:	300c      	adds	r0, #12
 800865e:	f000 fee9 	bl	8009434 <memcpy>
 8008662:	2201      	movs	r2, #1
 8008664:	4631      	mov	r1, r6
 8008666:	4658      	mov	r0, fp
 8008668:	f000 fb52 	bl	8008d10 <__lshift>
 800866c:	f10a 0301 	add.w	r3, sl, #1
 8008670:	9307      	str	r3, [sp, #28]
 8008672:	9b00      	ldr	r3, [sp, #0]
 8008674:	4453      	add	r3, sl
 8008676:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008678:	9b02      	ldr	r3, [sp, #8]
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	462f      	mov	r7, r5
 8008680:	930a      	str	r3, [sp, #40]	@ 0x28
 8008682:	4605      	mov	r5, r0
 8008684:	9b07      	ldr	r3, [sp, #28]
 8008686:	4621      	mov	r1, r4
 8008688:	3b01      	subs	r3, #1
 800868a:	4648      	mov	r0, r9
 800868c:	9300      	str	r3, [sp, #0]
 800868e:	f7ff fa9a 	bl	8007bc6 <quorem>
 8008692:	4639      	mov	r1, r7
 8008694:	9002      	str	r0, [sp, #8]
 8008696:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800869a:	4648      	mov	r0, r9
 800869c:	f000 fba4 	bl	8008de8 <__mcmp>
 80086a0:	462a      	mov	r2, r5
 80086a2:	9008      	str	r0, [sp, #32]
 80086a4:	4621      	mov	r1, r4
 80086a6:	4658      	mov	r0, fp
 80086a8:	f000 fbba 	bl	8008e20 <__mdiff>
 80086ac:	68c2      	ldr	r2, [r0, #12]
 80086ae:	4606      	mov	r6, r0
 80086b0:	bb02      	cbnz	r2, 80086f4 <_dtoa_r+0xa1c>
 80086b2:	4601      	mov	r1, r0
 80086b4:	4648      	mov	r0, r9
 80086b6:	f000 fb97 	bl	8008de8 <__mcmp>
 80086ba:	4602      	mov	r2, r0
 80086bc:	4631      	mov	r1, r6
 80086be:	4658      	mov	r0, fp
 80086c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80086c2:	f000 f957 	bl	8008974 <_Bfree>
 80086c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086ca:	9e07      	ldr	r6, [sp, #28]
 80086cc:	ea43 0102 	orr.w	r1, r3, r2
 80086d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086d2:	4319      	orrs	r1, r3
 80086d4:	d110      	bne.n	80086f8 <_dtoa_r+0xa20>
 80086d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086da:	d029      	beq.n	8008730 <_dtoa_r+0xa58>
 80086dc:	9b08      	ldr	r3, [sp, #32]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	dd02      	ble.n	80086e8 <_dtoa_r+0xa10>
 80086e2:	9b02      	ldr	r3, [sp, #8]
 80086e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80086e8:	9b00      	ldr	r3, [sp, #0]
 80086ea:	f883 8000 	strb.w	r8, [r3]
 80086ee:	e63f      	b.n	8008370 <_dtoa_r+0x698>
 80086f0:	4628      	mov	r0, r5
 80086f2:	e7bb      	b.n	800866c <_dtoa_r+0x994>
 80086f4:	2201      	movs	r2, #1
 80086f6:	e7e1      	b.n	80086bc <_dtoa_r+0x9e4>
 80086f8:	9b08      	ldr	r3, [sp, #32]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	db04      	blt.n	8008708 <_dtoa_r+0xa30>
 80086fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008700:	430b      	orrs	r3, r1
 8008702:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008704:	430b      	orrs	r3, r1
 8008706:	d120      	bne.n	800874a <_dtoa_r+0xa72>
 8008708:	2a00      	cmp	r2, #0
 800870a:	dded      	ble.n	80086e8 <_dtoa_r+0xa10>
 800870c:	4649      	mov	r1, r9
 800870e:	2201      	movs	r2, #1
 8008710:	4658      	mov	r0, fp
 8008712:	f000 fafd 	bl	8008d10 <__lshift>
 8008716:	4621      	mov	r1, r4
 8008718:	4681      	mov	r9, r0
 800871a:	f000 fb65 	bl	8008de8 <__mcmp>
 800871e:	2800      	cmp	r0, #0
 8008720:	dc03      	bgt.n	800872a <_dtoa_r+0xa52>
 8008722:	d1e1      	bne.n	80086e8 <_dtoa_r+0xa10>
 8008724:	f018 0f01 	tst.w	r8, #1
 8008728:	d0de      	beq.n	80086e8 <_dtoa_r+0xa10>
 800872a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800872e:	d1d8      	bne.n	80086e2 <_dtoa_r+0xa0a>
 8008730:	9a00      	ldr	r2, [sp, #0]
 8008732:	2339      	movs	r3, #57	@ 0x39
 8008734:	7013      	strb	r3, [r2, #0]
 8008736:	4633      	mov	r3, r6
 8008738:	461e      	mov	r6, r3
 800873a:	3b01      	subs	r3, #1
 800873c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008740:	2a39      	cmp	r2, #57	@ 0x39
 8008742:	d052      	beq.n	80087ea <_dtoa_r+0xb12>
 8008744:	3201      	adds	r2, #1
 8008746:	701a      	strb	r2, [r3, #0]
 8008748:	e612      	b.n	8008370 <_dtoa_r+0x698>
 800874a:	2a00      	cmp	r2, #0
 800874c:	dd07      	ble.n	800875e <_dtoa_r+0xa86>
 800874e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008752:	d0ed      	beq.n	8008730 <_dtoa_r+0xa58>
 8008754:	9a00      	ldr	r2, [sp, #0]
 8008756:	f108 0301 	add.w	r3, r8, #1
 800875a:	7013      	strb	r3, [r2, #0]
 800875c:	e608      	b.n	8008370 <_dtoa_r+0x698>
 800875e:	9b07      	ldr	r3, [sp, #28]
 8008760:	9a07      	ldr	r2, [sp, #28]
 8008762:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008766:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008768:	4293      	cmp	r3, r2
 800876a:	d028      	beq.n	80087be <_dtoa_r+0xae6>
 800876c:	4649      	mov	r1, r9
 800876e:	2300      	movs	r3, #0
 8008770:	220a      	movs	r2, #10
 8008772:	4658      	mov	r0, fp
 8008774:	f000 f920 	bl	80089b8 <__multadd>
 8008778:	42af      	cmp	r7, r5
 800877a:	4681      	mov	r9, r0
 800877c:	f04f 0300 	mov.w	r3, #0
 8008780:	f04f 020a 	mov.w	r2, #10
 8008784:	4639      	mov	r1, r7
 8008786:	4658      	mov	r0, fp
 8008788:	d107      	bne.n	800879a <_dtoa_r+0xac2>
 800878a:	f000 f915 	bl	80089b8 <__multadd>
 800878e:	4607      	mov	r7, r0
 8008790:	4605      	mov	r5, r0
 8008792:	9b07      	ldr	r3, [sp, #28]
 8008794:	3301      	adds	r3, #1
 8008796:	9307      	str	r3, [sp, #28]
 8008798:	e774      	b.n	8008684 <_dtoa_r+0x9ac>
 800879a:	f000 f90d 	bl	80089b8 <__multadd>
 800879e:	4629      	mov	r1, r5
 80087a0:	4607      	mov	r7, r0
 80087a2:	2300      	movs	r3, #0
 80087a4:	220a      	movs	r2, #10
 80087a6:	4658      	mov	r0, fp
 80087a8:	f000 f906 	bl	80089b8 <__multadd>
 80087ac:	4605      	mov	r5, r0
 80087ae:	e7f0      	b.n	8008792 <_dtoa_r+0xaba>
 80087b0:	9b00      	ldr	r3, [sp, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	bfcc      	ite	gt
 80087b6:	461e      	movgt	r6, r3
 80087b8:	2601      	movle	r6, #1
 80087ba:	4456      	add	r6, sl
 80087bc:	2700      	movs	r7, #0
 80087be:	4649      	mov	r1, r9
 80087c0:	2201      	movs	r2, #1
 80087c2:	4658      	mov	r0, fp
 80087c4:	f000 faa4 	bl	8008d10 <__lshift>
 80087c8:	4621      	mov	r1, r4
 80087ca:	4681      	mov	r9, r0
 80087cc:	f000 fb0c 	bl	8008de8 <__mcmp>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	dcb0      	bgt.n	8008736 <_dtoa_r+0xa5e>
 80087d4:	d102      	bne.n	80087dc <_dtoa_r+0xb04>
 80087d6:	f018 0f01 	tst.w	r8, #1
 80087da:	d1ac      	bne.n	8008736 <_dtoa_r+0xa5e>
 80087dc:	4633      	mov	r3, r6
 80087de:	461e      	mov	r6, r3
 80087e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087e4:	2a30      	cmp	r2, #48	@ 0x30
 80087e6:	d0fa      	beq.n	80087de <_dtoa_r+0xb06>
 80087e8:	e5c2      	b.n	8008370 <_dtoa_r+0x698>
 80087ea:	459a      	cmp	sl, r3
 80087ec:	d1a4      	bne.n	8008738 <_dtoa_r+0xa60>
 80087ee:	9b04      	ldr	r3, [sp, #16]
 80087f0:	3301      	adds	r3, #1
 80087f2:	9304      	str	r3, [sp, #16]
 80087f4:	2331      	movs	r3, #49	@ 0x31
 80087f6:	f88a 3000 	strb.w	r3, [sl]
 80087fa:	e5b9      	b.n	8008370 <_dtoa_r+0x698>
 80087fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80087fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800885c <_dtoa_r+0xb84>
 8008802:	b11b      	cbz	r3, 800880c <_dtoa_r+0xb34>
 8008804:	f10a 0308 	add.w	r3, sl, #8
 8008808:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800880a:	6013      	str	r3, [r2, #0]
 800880c:	4650      	mov	r0, sl
 800880e:	b019      	add	sp, #100	@ 0x64
 8008810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008816:	2b01      	cmp	r3, #1
 8008818:	f77f ae37 	ble.w	800848a <_dtoa_r+0x7b2>
 800881c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800881e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008820:	2001      	movs	r0, #1
 8008822:	e655      	b.n	80084d0 <_dtoa_r+0x7f8>
 8008824:	9b00      	ldr	r3, [sp, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	f77f aed6 	ble.w	80085d8 <_dtoa_r+0x900>
 800882c:	4656      	mov	r6, sl
 800882e:	4621      	mov	r1, r4
 8008830:	4648      	mov	r0, r9
 8008832:	f7ff f9c8 	bl	8007bc6 <quorem>
 8008836:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800883a:	f806 8b01 	strb.w	r8, [r6], #1
 800883e:	9b00      	ldr	r3, [sp, #0]
 8008840:	eba6 020a 	sub.w	r2, r6, sl
 8008844:	4293      	cmp	r3, r2
 8008846:	ddb3      	ble.n	80087b0 <_dtoa_r+0xad8>
 8008848:	4649      	mov	r1, r9
 800884a:	2300      	movs	r3, #0
 800884c:	220a      	movs	r2, #10
 800884e:	4658      	mov	r0, fp
 8008850:	f000 f8b2 	bl	80089b8 <__multadd>
 8008854:	4681      	mov	r9, r0
 8008856:	e7ea      	b.n	800882e <_dtoa_r+0xb56>
 8008858:	0800b120 	.word	0x0800b120
 800885c:	0800b0a4 	.word	0x0800b0a4

08008860 <_free_r>:
 8008860:	b538      	push	{r3, r4, r5, lr}
 8008862:	4605      	mov	r5, r0
 8008864:	2900      	cmp	r1, #0
 8008866:	d041      	beq.n	80088ec <_free_r+0x8c>
 8008868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800886c:	1f0c      	subs	r4, r1, #4
 800886e:	2b00      	cmp	r3, #0
 8008870:	bfb8      	it	lt
 8008872:	18e4      	addlt	r4, r4, r3
 8008874:	f7fe fb86 	bl	8006f84 <__malloc_lock>
 8008878:	4a1d      	ldr	r2, [pc, #116]	@ (80088f0 <_free_r+0x90>)
 800887a:	6813      	ldr	r3, [r2, #0]
 800887c:	b933      	cbnz	r3, 800888c <_free_r+0x2c>
 800887e:	6063      	str	r3, [r4, #4]
 8008880:	6014      	str	r4, [r2, #0]
 8008882:	4628      	mov	r0, r5
 8008884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008888:	f7fe bb82 	b.w	8006f90 <__malloc_unlock>
 800888c:	42a3      	cmp	r3, r4
 800888e:	d908      	bls.n	80088a2 <_free_r+0x42>
 8008890:	6820      	ldr	r0, [r4, #0]
 8008892:	1821      	adds	r1, r4, r0
 8008894:	428b      	cmp	r3, r1
 8008896:	bf01      	itttt	eq
 8008898:	6819      	ldreq	r1, [r3, #0]
 800889a:	685b      	ldreq	r3, [r3, #4]
 800889c:	1809      	addeq	r1, r1, r0
 800889e:	6021      	streq	r1, [r4, #0]
 80088a0:	e7ed      	b.n	800887e <_free_r+0x1e>
 80088a2:	461a      	mov	r2, r3
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	b10b      	cbz	r3, 80088ac <_free_r+0x4c>
 80088a8:	42a3      	cmp	r3, r4
 80088aa:	d9fa      	bls.n	80088a2 <_free_r+0x42>
 80088ac:	6811      	ldr	r1, [r2, #0]
 80088ae:	1850      	adds	r0, r2, r1
 80088b0:	42a0      	cmp	r0, r4
 80088b2:	d10b      	bne.n	80088cc <_free_r+0x6c>
 80088b4:	6820      	ldr	r0, [r4, #0]
 80088b6:	4401      	add	r1, r0
 80088b8:	1850      	adds	r0, r2, r1
 80088ba:	4283      	cmp	r3, r0
 80088bc:	6011      	str	r1, [r2, #0]
 80088be:	d1e0      	bne.n	8008882 <_free_r+0x22>
 80088c0:	6818      	ldr	r0, [r3, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	6053      	str	r3, [r2, #4]
 80088c6:	4408      	add	r0, r1
 80088c8:	6010      	str	r0, [r2, #0]
 80088ca:	e7da      	b.n	8008882 <_free_r+0x22>
 80088cc:	d902      	bls.n	80088d4 <_free_r+0x74>
 80088ce:	230c      	movs	r3, #12
 80088d0:	602b      	str	r3, [r5, #0]
 80088d2:	e7d6      	b.n	8008882 <_free_r+0x22>
 80088d4:	6820      	ldr	r0, [r4, #0]
 80088d6:	1821      	adds	r1, r4, r0
 80088d8:	428b      	cmp	r3, r1
 80088da:	bf04      	itt	eq
 80088dc:	6819      	ldreq	r1, [r3, #0]
 80088de:	685b      	ldreq	r3, [r3, #4]
 80088e0:	6063      	str	r3, [r4, #4]
 80088e2:	bf04      	itt	eq
 80088e4:	1809      	addeq	r1, r1, r0
 80088e6:	6021      	streq	r1, [r4, #0]
 80088e8:	6054      	str	r4, [r2, #4]
 80088ea:	e7ca      	b.n	8008882 <_free_r+0x22>
 80088ec:	bd38      	pop	{r3, r4, r5, pc}
 80088ee:	bf00      	nop
 80088f0:	20000680 	.word	0x20000680

080088f4 <_Balloc>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	69c6      	ldr	r6, [r0, #28]
 80088f8:	4604      	mov	r4, r0
 80088fa:	460d      	mov	r5, r1
 80088fc:	b976      	cbnz	r6, 800891c <_Balloc+0x28>
 80088fe:	2010      	movs	r0, #16
 8008900:	f7fe fa96 	bl	8006e30 <malloc>
 8008904:	4602      	mov	r2, r0
 8008906:	61e0      	str	r0, [r4, #28]
 8008908:	b920      	cbnz	r0, 8008914 <_Balloc+0x20>
 800890a:	4b18      	ldr	r3, [pc, #96]	@ (800896c <_Balloc+0x78>)
 800890c:	4818      	ldr	r0, [pc, #96]	@ (8008970 <_Balloc+0x7c>)
 800890e:	216b      	movs	r1, #107	@ 0x6b
 8008910:	f000 fd9e 	bl	8009450 <__assert_func>
 8008914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008918:	6006      	str	r6, [r0, #0]
 800891a:	60c6      	str	r6, [r0, #12]
 800891c:	69e6      	ldr	r6, [r4, #28]
 800891e:	68f3      	ldr	r3, [r6, #12]
 8008920:	b183      	cbz	r3, 8008944 <_Balloc+0x50>
 8008922:	69e3      	ldr	r3, [r4, #28]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800892a:	b9b8      	cbnz	r0, 800895c <_Balloc+0x68>
 800892c:	2101      	movs	r1, #1
 800892e:	fa01 f605 	lsl.w	r6, r1, r5
 8008932:	1d72      	adds	r2, r6, #5
 8008934:	0092      	lsls	r2, r2, #2
 8008936:	4620      	mov	r0, r4
 8008938:	f000 fda8 	bl	800948c <_calloc_r>
 800893c:	b160      	cbz	r0, 8008958 <_Balloc+0x64>
 800893e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008942:	e00e      	b.n	8008962 <_Balloc+0x6e>
 8008944:	2221      	movs	r2, #33	@ 0x21
 8008946:	2104      	movs	r1, #4
 8008948:	4620      	mov	r0, r4
 800894a:	f000 fd9f 	bl	800948c <_calloc_r>
 800894e:	69e3      	ldr	r3, [r4, #28]
 8008950:	60f0      	str	r0, [r6, #12]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1e4      	bne.n	8008922 <_Balloc+0x2e>
 8008958:	2000      	movs	r0, #0
 800895a:	bd70      	pop	{r4, r5, r6, pc}
 800895c:	6802      	ldr	r2, [r0, #0]
 800895e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008962:	2300      	movs	r3, #0
 8008964:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008968:	e7f7      	b.n	800895a <_Balloc+0x66>
 800896a:	bf00      	nop
 800896c:	0800b0b1 	.word	0x0800b0b1
 8008970:	0800b131 	.word	0x0800b131

08008974 <_Bfree>:
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	69c6      	ldr	r6, [r0, #28]
 8008978:	4605      	mov	r5, r0
 800897a:	460c      	mov	r4, r1
 800897c:	b976      	cbnz	r6, 800899c <_Bfree+0x28>
 800897e:	2010      	movs	r0, #16
 8008980:	f7fe fa56 	bl	8006e30 <malloc>
 8008984:	4602      	mov	r2, r0
 8008986:	61e8      	str	r0, [r5, #28]
 8008988:	b920      	cbnz	r0, 8008994 <_Bfree+0x20>
 800898a:	4b09      	ldr	r3, [pc, #36]	@ (80089b0 <_Bfree+0x3c>)
 800898c:	4809      	ldr	r0, [pc, #36]	@ (80089b4 <_Bfree+0x40>)
 800898e:	218f      	movs	r1, #143	@ 0x8f
 8008990:	f000 fd5e 	bl	8009450 <__assert_func>
 8008994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008998:	6006      	str	r6, [r0, #0]
 800899a:	60c6      	str	r6, [r0, #12]
 800899c:	b13c      	cbz	r4, 80089ae <_Bfree+0x3a>
 800899e:	69eb      	ldr	r3, [r5, #28]
 80089a0:	6862      	ldr	r2, [r4, #4]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089a8:	6021      	str	r1, [r4, #0]
 80089aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089ae:	bd70      	pop	{r4, r5, r6, pc}
 80089b0:	0800b0b1 	.word	0x0800b0b1
 80089b4:	0800b131 	.word	0x0800b131

080089b8 <__multadd>:
 80089b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089bc:	690d      	ldr	r5, [r1, #16]
 80089be:	4607      	mov	r7, r0
 80089c0:	460c      	mov	r4, r1
 80089c2:	461e      	mov	r6, r3
 80089c4:	f101 0c14 	add.w	ip, r1, #20
 80089c8:	2000      	movs	r0, #0
 80089ca:	f8dc 3000 	ldr.w	r3, [ip]
 80089ce:	b299      	uxth	r1, r3
 80089d0:	fb02 6101 	mla	r1, r2, r1, r6
 80089d4:	0c1e      	lsrs	r6, r3, #16
 80089d6:	0c0b      	lsrs	r3, r1, #16
 80089d8:	fb02 3306 	mla	r3, r2, r6, r3
 80089dc:	b289      	uxth	r1, r1
 80089de:	3001      	adds	r0, #1
 80089e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80089e4:	4285      	cmp	r5, r0
 80089e6:	f84c 1b04 	str.w	r1, [ip], #4
 80089ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80089ee:	dcec      	bgt.n	80089ca <__multadd+0x12>
 80089f0:	b30e      	cbz	r6, 8008a36 <__multadd+0x7e>
 80089f2:	68a3      	ldr	r3, [r4, #8]
 80089f4:	42ab      	cmp	r3, r5
 80089f6:	dc19      	bgt.n	8008a2c <__multadd+0x74>
 80089f8:	6861      	ldr	r1, [r4, #4]
 80089fa:	4638      	mov	r0, r7
 80089fc:	3101      	adds	r1, #1
 80089fe:	f7ff ff79 	bl	80088f4 <_Balloc>
 8008a02:	4680      	mov	r8, r0
 8008a04:	b928      	cbnz	r0, 8008a12 <__multadd+0x5a>
 8008a06:	4602      	mov	r2, r0
 8008a08:	4b0c      	ldr	r3, [pc, #48]	@ (8008a3c <__multadd+0x84>)
 8008a0a:	480d      	ldr	r0, [pc, #52]	@ (8008a40 <__multadd+0x88>)
 8008a0c:	21ba      	movs	r1, #186	@ 0xba
 8008a0e:	f000 fd1f 	bl	8009450 <__assert_func>
 8008a12:	6922      	ldr	r2, [r4, #16]
 8008a14:	3202      	adds	r2, #2
 8008a16:	f104 010c 	add.w	r1, r4, #12
 8008a1a:	0092      	lsls	r2, r2, #2
 8008a1c:	300c      	adds	r0, #12
 8008a1e:	f000 fd09 	bl	8009434 <memcpy>
 8008a22:	4621      	mov	r1, r4
 8008a24:	4638      	mov	r0, r7
 8008a26:	f7ff ffa5 	bl	8008974 <_Bfree>
 8008a2a:	4644      	mov	r4, r8
 8008a2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a30:	3501      	adds	r5, #1
 8008a32:	615e      	str	r6, [r3, #20]
 8008a34:	6125      	str	r5, [r4, #16]
 8008a36:	4620      	mov	r0, r4
 8008a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a3c:	0800b120 	.word	0x0800b120
 8008a40:	0800b131 	.word	0x0800b131

08008a44 <__hi0bits>:
 8008a44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008a48:	4603      	mov	r3, r0
 8008a4a:	bf36      	itet	cc
 8008a4c:	0403      	lslcc	r3, r0, #16
 8008a4e:	2000      	movcs	r0, #0
 8008a50:	2010      	movcc	r0, #16
 8008a52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a56:	bf3c      	itt	cc
 8008a58:	021b      	lslcc	r3, r3, #8
 8008a5a:	3008      	addcc	r0, #8
 8008a5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a60:	bf3c      	itt	cc
 8008a62:	011b      	lslcc	r3, r3, #4
 8008a64:	3004      	addcc	r0, #4
 8008a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a6a:	bf3c      	itt	cc
 8008a6c:	009b      	lslcc	r3, r3, #2
 8008a6e:	3002      	addcc	r0, #2
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	db05      	blt.n	8008a80 <__hi0bits+0x3c>
 8008a74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a78:	f100 0001 	add.w	r0, r0, #1
 8008a7c:	bf08      	it	eq
 8008a7e:	2020      	moveq	r0, #32
 8008a80:	4770      	bx	lr

08008a82 <__lo0bits>:
 8008a82:	6803      	ldr	r3, [r0, #0]
 8008a84:	4602      	mov	r2, r0
 8008a86:	f013 0007 	ands.w	r0, r3, #7
 8008a8a:	d00b      	beq.n	8008aa4 <__lo0bits+0x22>
 8008a8c:	07d9      	lsls	r1, r3, #31
 8008a8e:	d421      	bmi.n	8008ad4 <__lo0bits+0x52>
 8008a90:	0798      	lsls	r0, r3, #30
 8008a92:	bf49      	itett	mi
 8008a94:	085b      	lsrmi	r3, r3, #1
 8008a96:	089b      	lsrpl	r3, r3, #2
 8008a98:	2001      	movmi	r0, #1
 8008a9a:	6013      	strmi	r3, [r2, #0]
 8008a9c:	bf5c      	itt	pl
 8008a9e:	6013      	strpl	r3, [r2, #0]
 8008aa0:	2002      	movpl	r0, #2
 8008aa2:	4770      	bx	lr
 8008aa4:	b299      	uxth	r1, r3
 8008aa6:	b909      	cbnz	r1, 8008aac <__lo0bits+0x2a>
 8008aa8:	0c1b      	lsrs	r3, r3, #16
 8008aaa:	2010      	movs	r0, #16
 8008aac:	b2d9      	uxtb	r1, r3
 8008aae:	b909      	cbnz	r1, 8008ab4 <__lo0bits+0x32>
 8008ab0:	3008      	adds	r0, #8
 8008ab2:	0a1b      	lsrs	r3, r3, #8
 8008ab4:	0719      	lsls	r1, r3, #28
 8008ab6:	bf04      	itt	eq
 8008ab8:	091b      	lsreq	r3, r3, #4
 8008aba:	3004      	addeq	r0, #4
 8008abc:	0799      	lsls	r1, r3, #30
 8008abe:	bf04      	itt	eq
 8008ac0:	089b      	lsreq	r3, r3, #2
 8008ac2:	3002      	addeq	r0, #2
 8008ac4:	07d9      	lsls	r1, r3, #31
 8008ac6:	d403      	bmi.n	8008ad0 <__lo0bits+0x4e>
 8008ac8:	085b      	lsrs	r3, r3, #1
 8008aca:	f100 0001 	add.w	r0, r0, #1
 8008ace:	d003      	beq.n	8008ad8 <__lo0bits+0x56>
 8008ad0:	6013      	str	r3, [r2, #0]
 8008ad2:	4770      	bx	lr
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	4770      	bx	lr
 8008ad8:	2020      	movs	r0, #32
 8008ada:	4770      	bx	lr

08008adc <__i2b>:
 8008adc:	b510      	push	{r4, lr}
 8008ade:	460c      	mov	r4, r1
 8008ae0:	2101      	movs	r1, #1
 8008ae2:	f7ff ff07 	bl	80088f4 <_Balloc>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	b928      	cbnz	r0, 8008af6 <__i2b+0x1a>
 8008aea:	4b05      	ldr	r3, [pc, #20]	@ (8008b00 <__i2b+0x24>)
 8008aec:	4805      	ldr	r0, [pc, #20]	@ (8008b04 <__i2b+0x28>)
 8008aee:	f240 1145 	movw	r1, #325	@ 0x145
 8008af2:	f000 fcad 	bl	8009450 <__assert_func>
 8008af6:	2301      	movs	r3, #1
 8008af8:	6144      	str	r4, [r0, #20]
 8008afa:	6103      	str	r3, [r0, #16]
 8008afc:	bd10      	pop	{r4, pc}
 8008afe:	bf00      	nop
 8008b00:	0800b120 	.word	0x0800b120
 8008b04:	0800b131 	.word	0x0800b131

08008b08 <__multiply>:
 8008b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	4614      	mov	r4, r2
 8008b0e:	690a      	ldr	r2, [r1, #16]
 8008b10:	6923      	ldr	r3, [r4, #16]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	bfa8      	it	ge
 8008b16:	4623      	movge	r3, r4
 8008b18:	460f      	mov	r7, r1
 8008b1a:	bfa4      	itt	ge
 8008b1c:	460c      	movge	r4, r1
 8008b1e:	461f      	movge	r7, r3
 8008b20:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008b24:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008b28:	68a3      	ldr	r3, [r4, #8]
 8008b2a:	6861      	ldr	r1, [r4, #4]
 8008b2c:	eb0a 0609 	add.w	r6, sl, r9
 8008b30:	42b3      	cmp	r3, r6
 8008b32:	b085      	sub	sp, #20
 8008b34:	bfb8      	it	lt
 8008b36:	3101      	addlt	r1, #1
 8008b38:	f7ff fedc 	bl	80088f4 <_Balloc>
 8008b3c:	b930      	cbnz	r0, 8008b4c <__multiply+0x44>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	4b44      	ldr	r3, [pc, #272]	@ (8008c54 <__multiply+0x14c>)
 8008b42:	4845      	ldr	r0, [pc, #276]	@ (8008c58 <__multiply+0x150>)
 8008b44:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008b48:	f000 fc82 	bl	8009450 <__assert_func>
 8008b4c:	f100 0514 	add.w	r5, r0, #20
 8008b50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b54:	462b      	mov	r3, r5
 8008b56:	2200      	movs	r2, #0
 8008b58:	4543      	cmp	r3, r8
 8008b5a:	d321      	bcc.n	8008ba0 <__multiply+0x98>
 8008b5c:	f107 0114 	add.w	r1, r7, #20
 8008b60:	f104 0214 	add.w	r2, r4, #20
 8008b64:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008b68:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008b6c:	9302      	str	r3, [sp, #8]
 8008b6e:	1b13      	subs	r3, r2, r4
 8008b70:	3b15      	subs	r3, #21
 8008b72:	f023 0303 	bic.w	r3, r3, #3
 8008b76:	3304      	adds	r3, #4
 8008b78:	f104 0715 	add.w	r7, r4, #21
 8008b7c:	42ba      	cmp	r2, r7
 8008b7e:	bf38      	it	cc
 8008b80:	2304      	movcc	r3, #4
 8008b82:	9301      	str	r3, [sp, #4]
 8008b84:	9b02      	ldr	r3, [sp, #8]
 8008b86:	9103      	str	r1, [sp, #12]
 8008b88:	428b      	cmp	r3, r1
 8008b8a:	d80c      	bhi.n	8008ba6 <__multiply+0x9e>
 8008b8c:	2e00      	cmp	r6, #0
 8008b8e:	dd03      	ble.n	8008b98 <__multiply+0x90>
 8008b90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d05b      	beq.n	8008c50 <__multiply+0x148>
 8008b98:	6106      	str	r6, [r0, #16]
 8008b9a:	b005      	add	sp, #20
 8008b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba0:	f843 2b04 	str.w	r2, [r3], #4
 8008ba4:	e7d8      	b.n	8008b58 <__multiply+0x50>
 8008ba6:	f8b1 a000 	ldrh.w	sl, [r1]
 8008baa:	f1ba 0f00 	cmp.w	sl, #0
 8008bae:	d024      	beq.n	8008bfa <__multiply+0xf2>
 8008bb0:	f104 0e14 	add.w	lr, r4, #20
 8008bb4:	46a9      	mov	r9, r5
 8008bb6:	f04f 0c00 	mov.w	ip, #0
 8008bba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008bbe:	f8d9 3000 	ldr.w	r3, [r9]
 8008bc2:	fa1f fb87 	uxth.w	fp, r7
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	fb0a 330b 	mla	r3, sl, fp, r3
 8008bcc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008bd0:	f8d9 7000 	ldr.w	r7, [r9]
 8008bd4:	4463      	add	r3, ip
 8008bd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008bda:	fb0a c70b 	mla	r7, sl, fp, ip
 8008bde:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008be8:	4572      	cmp	r2, lr
 8008bea:	f849 3b04 	str.w	r3, [r9], #4
 8008bee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008bf2:	d8e2      	bhi.n	8008bba <__multiply+0xb2>
 8008bf4:	9b01      	ldr	r3, [sp, #4]
 8008bf6:	f845 c003 	str.w	ip, [r5, r3]
 8008bfa:	9b03      	ldr	r3, [sp, #12]
 8008bfc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008c00:	3104      	adds	r1, #4
 8008c02:	f1b9 0f00 	cmp.w	r9, #0
 8008c06:	d021      	beq.n	8008c4c <__multiply+0x144>
 8008c08:	682b      	ldr	r3, [r5, #0]
 8008c0a:	f104 0c14 	add.w	ip, r4, #20
 8008c0e:	46ae      	mov	lr, r5
 8008c10:	f04f 0a00 	mov.w	sl, #0
 8008c14:	f8bc b000 	ldrh.w	fp, [ip]
 8008c18:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008c1c:	fb09 770b 	mla	r7, r9, fp, r7
 8008c20:	4457      	add	r7, sl
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c28:	f84e 3b04 	str.w	r3, [lr], #4
 8008c2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c34:	f8be 3000 	ldrh.w	r3, [lr]
 8008c38:	fb09 330a 	mla	r3, r9, sl, r3
 8008c3c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008c40:	4562      	cmp	r2, ip
 8008c42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c46:	d8e5      	bhi.n	8008c14 <__multiply+0x10c>
 8008c48:	9f01      	ldr	r7, [sp, #4]
 8008c4a:	51eb      	str	r3, [r5, r7]
 8008c4c:	3504      	adds	r5, #4
 8008c4e:	e799      	b.n	8008b84 <__multiply+0x7c>
 8008c50:	3e01      	subs	r6, #1
 8008c52:	e79b      	b.n	8008b8c <__multiply+0x84>
 8008c54:	0800b120 	.word	0x0800b120
 8008c58:	0800b131 	.word	0x0800b131

08008c5c <__pow5mult>:
 8008c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c60:	4615      	mov	r5, r2
 8008c62:	f012 0203 	ands.w	r2, r2, #3
 8008c66:	4607      	mov	r7, r0
 8008c68:	460e      	mov	r6, r1
 8008c6a:	d007      	beq.n	8008c7c <__pow5mult+0x20>
 8008c6c:	4c25      	ldr	r4, [pc, #148]	@ (8008d04 <__pow5mult+0xa8>)
 8008c6e:	3a01      	subs	r2, #1
 8008c70:	2300      	movs	r3, #0
 8008c72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c76:	f7ff fe9f 	bl	80089b8 <__multadd>
 8008c7a:	4606      	mov	r6, r0
 8008c7c:	10ad      	asrs	r5, r5, #2
 8008c7e:	d03d      	beq.n	8008cfc <__pow5mult+0xa0>
 8008c80:	69fc      	ldr	r4, [r7, #28]
 8008c82:	b97c      	cbnz	r4, 8008ca4 <__pow5mult+0x48>
 8008c84:	2010      	movs	r0, #16
 8008c86:	f7fe f8d3 	bl	8006e30 <malloc>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	61f8      	str	r0, [r7, #28]
 8008c8e:	b928      	cbnz	r0, 8008c9c <__pow5mult+0x40>
 8008c90:	4b1d      	ldr	r3, [pc, #116]	@ (8008d08 <__pow5mult+0xac>)
 8008c92:	481e      	ldr	r0, [pc, #120]	@ (8008d0c <__pow5mult+0xb0>)
 8008c94:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c98:	f000 fbda 	bl	8009450 <__assert_func>
 8008c9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ca0:	6004      	str	r4, [r0, #0]
 8008ca2:	60c4      	str	r4, [r0, #12]
 8008ca4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008ca8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cac:	b94c      	cbnz	r4, 8008cc2 <__pow5mult+0x66>
 8008cae:	f240 2171 	movw	r1, #625	@ 0x271
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	f7ff ff12 	bl	8008adc <__i2b>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	6003      	str	r3, [r0, #0]
 8008cc2:	f04f 0900 	mov.w	r9, #0
 8008cc6:	07eb      	lsls	r3, r5, #31
 8008cc8:	d50a      	bpl.n	8008ce0 <__pow5mult+0x84>
 8008cca:	4631      	mov	r1, r6
 8008ccc:	4622      	mov	r2, r4
 8008cce:	4638      	mov	r0, r7
 8008cd0:	f7ff ff1a 	bl	8008b08 <__multiply>
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	4680      	mov	r8, r0
 8008cd8:	4638      	mov	r0, r7
 8008cda:	f7ff fe4b 	bl	8008974 <_Bfree>
 8008cde:	4646      	mov	r6, r8
 8008ce0:	106d      	asrs	r5, r5, #1
 8008ce2:	d00b      	beq.n	8008cfc <__pow5mult+0xa0>
 8008ce4:	6820      	ldr	r0, [r4, #0]
 8008ce6:	b938      	cbnz	r0, 8008cf8 <__pow5mult+0x9c>
 8008ce8:	4622      	mov	r2, r4
 8008cea:	4621      	mov	r1, r4
 8008cec:	4638      	mov	r0, r7
 8008cee:	f7ff ff0b 	bl	8008b08 <__multiply>
 8008cf2:	6020      	str	r0, [r4, #0]
 8008cf4:	f8c0 9000 	str.w	r9, [r0]
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	e7e4      	b.n	8008cc6 <__pow5mult+0x6a>
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d02:	bf00      	nop
 8008d04:	0800b18c 	.word	0x0800b18c
 8008d08:	0800b0b1 	.word	0x0800b0b1
 8008d0c:	0800b131 	.word	0x0800b131

08008d10 <__lshift>:
 8008d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d14:	460c      	mov	r4, r1
 8008d16:	6849      	ldr	r1, [r1, #4]
 8008d18:	6923      	ldr	r3, [r4, #16]
 8008d1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d1e:	68a3      	ldr	r3, [r4, #8]
 8008d20:	4607      	mov	r7, r0
 8008d22:	4691      	mov	r9, r2
 8008d24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d28:	f108 0601 	add.w	r6, r8, #1
 8008d2c:	42b3      	cmp	r3, r6
 8008d2e:	db0b      	blt.n	8008d48 <__lshift+0x38>
 8008d30:	4638      	mov	r0, r7
 8008d32:	f7ff fddf 	bl	80088f4 <_Balloc>
 8008d36:	4605      	mov	r5, r0
 8008d38:	b948      	cbnz	r0, 8008d4e <__lshift+0x3e>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	4b28      	ldr	r3, [pc, #160]	@ (8008de0 <__lshift+0xd0>)
 8008d3e:	4829      	ldr	r0, [pc, #164]	@ (8008de4 <__lshift+0xd4>)
 8008d40:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008d44:	f000 fb84 	bl	8009450 <__assert_func>
 8008d48:	3101      	adds	r1, #1
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	e7ee      	b.n	8008d2c <__lshift+0x1c>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	f100 0114 	add.w	r1, r0, #20
 8008d54:	f100 0210 	add.w	r2, r0, #16
 8008d58:	4618      	mov	r0, r3
 8008d5a:	4553      	cmp	r3, sl
 8008d5c:	db33      	blt.n	8008dc6 <__lshift+0xb6>
 8008d5e:	6920      	ldr	r0, [r4, #16]
 8008d60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d64:	f104 0314 	add.w	r3, r4, #20
 8008d68:	f019 091f 	ands.w	r9, r9, #31
 8008d6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d74:	d02b      	beq.n	8008dce <__lshift+0xbe>
 8008d76:	f1c9 0e20 	rsb	lr, r9, #32
 8008d7a:	468a      	mov	sl, r1
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	6818      	ldr	r0, [r3, #0]
 8008d80:	fa00 f009 	lsl.w	r0, r0, r9
 8008d84:	4310      	orrs	r0, r2
 8008d86:	f84a 0b04 	str.w	r0, [sl], #4
 8008d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d8e:	459c      	cmp	ip, r3
 8008d90:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d94:	d8f3      	bhi.n	8008d7e <__lshift+0x6e>
 8008d96:	ebac 0304 	sub.w	r3, ip, r4
 8008d9a:	3b15      	subs	r3, #21
 8008d9c:	f023 0303 	bic.w	r3, r3, #3
 8008da0:	3304      	adds	r3, #4
 8008da2:	f104 0015 	add.w	r0, r4, #21
 8008da6:	4584      	cmp	ip, r0
 8008da8:	bf38      	it	cc
 8008daa:	2304      	movcc	r3, #4
 8008dac:	50ca      	str	r2, [r1, r3]
 8008dae:	b10a      	cbz	r2, 8008db4 <__lshift+0xa4>
 8008db0:	f108 0602 	add.w	r6, r8, #2
 8008db4:	3e01      	subs	r6, #1
 8008db6:	4638      	mov	r0, r7
 8008db8:	612e      	str	r6, [r5, #16]
 8008dba:	4621      	mov	r1, r4
 8008dbc:	f7ff fdda 	bl	8008974 <_Bfree>
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008dca:	3301      	adds	r3, #1
 8008dcc:	e7c5      	b.n	8008d5a <__lshift+0x4a>
 8008dce:	3904      	subs	r1, #4
 8008dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dd4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008dd8:	459c      	cmp	ip, r3
 8008dda:	d8f9      	bhi.n	8008dd0 <__lshift+0xc0>
 8008ddc:	e7ea      	b.n	8008db4 <__lshift+0xa4>
 8008dde:	bf00      	nop
 8008de0:	0800b120 	.word	0x0800b120
 8008de4:	0800b131 	.word	0x0800b131

08008de8 <__mcmp>:
 8008de8:	690a      	ldr	r2, [r1, #16]
 8008dea:	4603      	mov	r3, r0
 8008dec:	6900      	ldr	r0, [r0, #16]
 8008dee:	1a80      	subs	r0, r0, r2
 8008df0:	b530      	push	{r4, r5, lr}
 8008df2:	d10e      	bne.n	8008e12 <__mcmp+0x2a>
 8008df4:	3314      	adds	r3, #20
 8008df6:	3114      	adds	r1, #20
 8008df8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008dfc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e08:	4295      	cmp	r5, r2
 8008e0a:	d003      	beq.n	8008e14 <__mcmp+0x2c>
 8008e0c:	d205      	bcs.n	8008e1a <__mcmp+0x32>
 8008e0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e12:	bd30      	pop	{r4, r5, pc}
 8008e14:	42a3      	cmp	r3, r4
 8008e16:	d3f3      	bcc.n	8008e00 <__mcmp+0x18>
 8008e18:	e7fb      	b.n	8008e12 <__mcmp+0x2a>
 8008e1a:	2001      	movs	r0, #1
 8008e1c:	e7f9      	b.n	8008e12 <__mcmp+0x2a>
	...

08008e20 <__mdiff>:
 8008e20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e24:	4689      	mov	r9, r1
 8008e26:	4606      	mov	r6, r0
 8008e28:	4611      	mov	r1, r2
 8008e2a:	4648      	mov	r0, r9
 8008e2c:	4614      	mov	r4, r2
 8008e2e:	f7ff ffdb 	bl	8008de8 <__mcmp>
 8008e32:	1e05      	subs	r5, r0, #0
 8008e34:	d112      	bne.n	8008e5c <__mdiff+0x3c>
 8008e36:	4629      	mov	r1, r5
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f7ff fd5b 	bl	80088f4 <_Balloc>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	b928      	cbnz	r0, 8008e4e <__mdiff+0x2e>
 8008e42:	4b3f      	ldr	r3, [pc, #252]	@ (8008f40 <__mdiff+0x120>)
 8008e44:	f240 2137 	movw	r1, #567	@ 0x237
 8008e48:	483e      	ldr	r0, [pc, #248]	@ (8008f44 <__mdiff+0x124>)
 8008e4a:	f000 fb01 	bl	8009450 <__assert_func>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e54:	4610      	mov	r0, r2
 8008e56:	b003      	add	sp, #12
 8008e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5c:	bfbc      	itt	lt
 8008e5e:	464b      	movlt	r3, r9
 8008e60:	46a1      	movlt	r9, r4
 8008e62:	4630      	mov	r0, r6
 8008e64:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008e68:	bfba      	itte	lt
 8008e6a:	461c      	movlt	r4, r3
 8008e6c:	2501      	movlt	r5, #1
 8008e6e:	2500      	movge	r5, #0
 8008e70:	f7ff fd40 	bl	80088f4 <_Balloc>
 8008e74:	4602      	mov	r2, r0
 8008e76:	b918      	cbnz	r0, 8008e80 <__mdiff+0x60>
 8008e78:	4b31      	ldr	r3, [pc, #196]	@ (8008f40 <__mdiff+0x120>)
 8008e7a:	f240 2145 	movw	r1, #581	@ 0x245
 8008e7e:	e7e3      	b.n	8008e48 <__mdiff+0x28>
 8008e80:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e84:	6926      	ldr	r6, [r4, #16]
 8008e86:	60c5      	str	r5, [r0, #12]
 8008e88:	f109 0310 	add.w	r3, r9, #16
 8008e8c:	f109 0514 	add.w	r5, r9, #20
 8008e90:	f104 0e14 	add.w	lr, r4, #20
 8008e94:	f100 0b14 	add.w	fp, r0, #20
 8008e98:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e9c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	46d9      	mov	r9, fp
 8008ea4:	f04f 0c00 	mov.w	ip, #0
 8008ea8:	9b01      	ldr	r3, [sp, #4]
 8008eaa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008eae:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008eb2:	9301      	str	r3, [sp, #4]
 8008eb4:	fa1f f38a 	uxth.w	r3, sl
 8008eb8:	4619      	mov	r1, r3
 8008eba:	b283      	uxth	r3, r0
 8008ebc:	1acb      	subs	r3, r1, r3
 8008ebe:	0c00      	lsrs	r0, r0, #16
 8008ec0:	4463      	add	r3, ip
 8008ec2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008ec6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008ed0:	4576      	cmp	r6, lr
 8008ed2:	f849 3b04 	str.w	r3, [r9], #4
 8008ed6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008eda:	d8e5      	bhi.n	8008ea8 <__mdiff+0x88>
 8008edc:	1b33      	subs	r3, r6, r4
 8008ede:	3b15      	subs	r3, #21
 8008ee0:	f023 0303 	bic.w	r3, r3, #3
 8008ee4:	3415      	adds	r4, #21
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	42a6      	cmp	r6, r4
 8008eea:	bf38      	it	cc
 8008eec:	2304      	movcc	r3, #4
 8008eee:	441d      	add	r5, r3
 8008ef0:	445b      	add	r3, fp
 8008ef2:	461e      	mov	r6, r3
 8008ef4:	462c      	mov	r4, r5
 8008ef6:	4544      	cmp	r4, r8
 8008ef8:	d30e      	bcc.n	8008f18 <__mdiff+0xf8>
 8008efa:	f108 0103 	add.w	r1, r8, #3
 8008efe:	1b49      	subs	r1, r1, r5
 8008f00:	f021 0103 	bic.w	r1, r1, #3
 8008f04:	3d03      	subs	r5, #3
 8008f06:	45a8      	cmp	r8, r5
 8008f08:	bf38      	it	cc
 8008f0a:	2100      	movcc	r1, #0
 8008f0c:	440b      	add	r3, r1
 8008f0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f12:	b191      	cbz	r1, 8008f3a <__mdiff+0x11a>
 8008f14:	6117      	str	r7, [r2, #16]
 8008f16:	e79d      	b.n	8008e54 <__mdiff+0x34>
 8008f18:	f854 1b04 	ldr.w	r1, [r4], #4
 8008f1c:	46e6      	mov	lr, ip
 8008f1e:	0c08      	lsrs	r0, r1, #16
 8008f20:	fa1c fc81 	uxtah	ip, ip, r1
 8008f24:	4471      	add	r1, lr
 8008f26:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008f2a:	b289      	uxth	r1, r1
 8008f2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f30:	f846 1b04 	str.w	r1, [r6], #4
 8008f34:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f38:	e7dd      	b.n	8008ef6 <__mdiff+0xd6>
 8008f3a:	3f01      	subs	r7, #1
 8008f3c:	e7e7      	b.n	8008f0e <__mdiff+0xee>
 8008f3e:	bf00      	nop
 8008f40:	0800b120 	.word	0x0800b120
 8008f44:	0800b131 	.word	0x0800b131

08008f48 <__d2b>:
 8008f48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f4c:	460f      	mov	r7, r1
 8008f4e:	2101      	movs	r1, #1
 8008f50:	ec59 8b10 	vmov	r8, r9, d0
 8008f54:	4616      	mov	r6, r2
 8008f56:	f7ff fccd 	bl	80088f4 <_Balloc>
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	b930      	cbnz	r0, 8008f6c <__d2b+0x24>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	4b23      	ldr	r3, [pc, #140]	@ (8008ff0 <__d2b+0xa8>)
 8008f62:	4824      	ldr	r0, [pc, #144]	@ (8008ff4 <__d2b+0xac>)
 8008f64:	f240 310f 	movw	r1, #783	@ 0x30f
 8008f68:	f000 fa72 	bl	8009450 <__assert_func>
 8008f6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f74:	b10d      	cbz	r5, 8008f7a <__d2b+0x32>
 8008f76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f7a:	9301      	str	r3, [sp, #4]
 8008f7c:	f1b8 0300 	subs.w	r3, r8, #0
 8008f80:	d023      	beq.n	8008fca <__d2b+0x82>
 8008f82:	4668      	mov	r0, sp
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	f7ff fd7c 	bl	8008a82 <__lo0bits>
 8008f8a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f8e:	b1d0      	cbz	r0, 8008fc6 <__d2b+0x7e>
 8008f90:	f1c0 0320 	rsb	r3, r0, #32
 8008f94:	fa02 f303 	lsl.w	r3, r2, r3
 8008f98:	430b      	orrs	r3, r1
 8008f9a:	40c2      	lsrs	r2, r0
 8008f9c:	6163      	str	r3, [r4, #20]
 8008f9e:	9201      	str	r2, [sp, #4]
 8008fa0:	9b01      	ldr	r3, [sp, #4]
 8008fa2:	61a3      	str	r3, [r4, #24]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	bf0c      	ite	eq
 8008fa8:	2201      	moveq	r2, #1
 8008faa:	2202      	movne	r2, #2
 8008fac:	6122      	str	r2, [r4, #16]
 8008fae:	b1a5      	cbz	r5, 8008fda <__d2b+0x92>
 8008fb0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008fb4:	4405      	add	r5, r0
 8008fb6:	603d      	str	r5, [r7, #0]
 8008fb8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008fbc:	6030      	str	r0, [r6, #0]
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	b003      	add	sp, #12
 8008fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fc6:	6161      	str	r1, [r4, #20]
 8008fc8:	e7ea      	b.n	8008fa0 <__d2b+0x58>
 8008fca:	a801      	add	r0, sp, #4
 8008fcc:	f7ff fd59 	bl	8008a82 <__lo0bits>
 8008fd0:	9b01      	ldr	r3, [sp, #4]
 8008fd2:	6163      	str	r3, [r4, #20]
 8008fd4:	3020      	adds	r0, #32
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	e7e8      	b.n	8008fac <__d2b+0x64>
 8008fda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008fde:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008fe2:	6038      	str	r0, [r7, #0]
 8008fe4:	6918      	ldr	r0, [r3, #16]
 8008fe6:	f7ff fd2d 	bl	8008a44 <__hi0bits>
 8008fea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008fee:	e7e5      	b.n	8008fbc <__d2b+0x74>
 8008ff0:	0800b120 	.word	0x0800b120
 8008ff4:	0800b131 	.word	0x0800b131

08008ff8 <__ssputs_r>:
 8008ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ffc:	688e      	ldr	r6, [r1, #8]
 8008ffe:	461f      	mov	r7, r3
 8009000:	42be      	cmp	r6, r7
 8009002:	680b      	ldr	r3, [r1, #0]
 8009004:	4682      	mov	sl, r0
 8009006:	460c      	mov	r4, r1
 8009008:	4690      	mov	r8, r2
 800900a:	d82d      	bhi.n	8009068 <__ssputs_r+0x70>
 800900c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009010:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009014:	d026      	beq.n	8009064 <__ssputs_r+0x6c>
 8009016:	6965      	ldr	r5, [r4, #20]
 8009018:	6909      	ldr	r1, [r1, #16]
 800901a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800901e:	eba3 0901 	sub.w	r9, r3, r1
 8009022:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009026:	1c7b      	adds	r3, r7, #1
 8009028:	444b      	add	r3, r9
 800902a:	106d      	asrs	r5, r5, #1
 800902c:	429d      	cmp	r5, r3
 800902e:	bf38      	it	cc
 8009030:	461d      	movcc	r5, r3
 8009032:	0553      	lsls	r3, r2, #21
 8009034:	d527      	bpl.n	8009086 <__ssputs_r+0x8e>
 8009036:	4629      	mov	r1, r5
 8009038:	f7fd ff24 	bl	8006e84 <_malloc_r>
 800903c:	4606      	mov	r6, r0
 800903e:	b360      	cbz	r0, 800909a <__ssputs_r+0xa2>
 8009040:	6921      	ldr	r1, [r4, #16]
 8009042:	464a      	mov	r2, r9
 8009044:	f000 f9f6 	bl	8009434 <memcpy>
 8009048:	89a3      	ldrh	r3, [r4, #12]
 800904a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800904e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009052:	81a3      	strh	r3, [r4, #12]
 8009054:	6126      	str	r6, [r4, #16]
 8009056:	6165      	str	r5, [r4, #20]
 8009058:	444e      	add	r6, r9
 800905a:	eba5 0509 	sub.w	r5, r5, r9
 800905e:	6026      	str	r6, [r4, #0]
 8009060:	60a5      	str	r5, [r4, #8]
 8009062:	463e      	mov	r6, r7
 8009064:	42be      	cmp	r6, r7
 8009066:	d900      	bls.n	800906a <__ssputs_r+0x72>
 8009068:	463e      	mov	r6, r7
 800906a:	6820      	ldr	r0, [r4, #0]
 800906c:	4632      	mov	r2, r6
 800906e:	4641      	mov	r1, r8
 8009070:	f000 f9c6 	bl	8009400 <memmove>
 8009074:	68a3      	ldr	r3, [r4, #8]
 8009076:	1b9b      	subs	r3, r3, r6
 8009078:	60a3      	str	r3, [r4, #8]
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	4433      	add	r3, r6
 800907e:	6023      	str	r3, [r4, #0]
 8009080:	2000      	movs	r0, #0
 8009082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009086:	462a      	mov	r2, r5
 8009088:	f000 fa26 	bl	80094d8 <_realloc_r>
 800908c:	4606      	mov	r6, r0
 800908e:	2800      	cmp	r0, #0
 8009090:	d1e0      	bne.n	8009054 <__ssputs_r+0x5c>
 8009092:	6921      	ldr	r1, [r4, #16]
 8009094:	4650      	mov	r0, sl
 8009096:	f7ff fbe3 	bl	8008860 <_free_r>
 800909a:	230c      	movs	r3, #12
 800909c:	f8ca 3000 	str.w	r3, [sl]
 80090a0:	89a3      	ldrh	r3, [r4, #12]
 80090a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090a6:	81a3      	strh	r3, [r4, #12]
 80090a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090ac:	e7e9      	b.n	8009082 <__ssputs_r+0x8a>
	...

080090b0 <_svfiprintf_r>:
 80090b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b4:	4698      	mov	r8, r3
 80090b6:	898b      	ldrh	r3, [r1, #12]
 80090b8:	061b      	lsls	r3, r3, #24
 80090ba:	b09d      	sub	sp, #116	@ 0x74
 80090bc:	4607      	mov	r7, r0
 80090be:	460d      	mov	r5, r1
 80090c0:	4614      	mov	r4, r2
 80090c2:	d510      	bpl.n	80090e6 <_svfiprintf_r+0x36>
 80090c4:	690b      	ldr	r3, [r1, #16]
 80090c6:	b973      	cbnz	r3, 80090e6 <_svfiprintf_r+0x36>
 80090c8:	2140      	movs	r1, #64	@ 0x40
 80090ca:	f7fd fedb 	bl	8006e84 <_malloc_r>
 80090ce:	6028      	str	r0, [r5, #0]
 80090d0:	6128      	str	r0, [r5, #16]
 80090d2:	b930      	cbnz	r0, 80090e2 <_svfiprintf_r+0x32>
 80090d4:	230c      	movs	r3, #12
 80090d6:	603b      	str	r3, [r7, #0]
 80090d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090dc:	b01d      	add	sp, #116	@ 0x74
 80090de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e2:	2340      	movs	r3, #64	@ 0x40
 80090e4:	616b      	str	r3, [r5, #20]
 80090e6:	2300      	movs	r3, #0
 80090e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80090ea:	2320      	movs	r3, #32
 80090ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80090f4:	2330      	movs	r3, #48	@ 0x30
 80090f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009294 <_svfiprintf_r+0x1e4>
 80090fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090fe:	f04f 0901 	mov.w	r9, #1
 8009102:	4623      	mov	r3, r4
 8009104:	469a      	mov	sl, r3
 8009106:	f813 2b01 	ldrb.w	r2, [r3], #1
 800910a:	b10a      	cbz	r2, 8009110 <_svfiprintf_r+0x60>
 800910c:	2a25      	cmp	r2, #37	@ 0x25
 800910e:	d1f9      	bne.n	8009104 <_svfiprintf_r+0x54>
 8009110:	ebba 0b04 	subs.w	fp, sl, r4
 8009114:	d00b      	beq.n	800912e <_svfiprintf_r+0x7e>
 8009116:	465b      	mov	r3, fp
 8009118:	4622      	mov	r2, r4
 800911a:	4629      	mov	r1, r5
 800911c:	4638      	mov	r0, r7
 800911e:	f7ff ff6b 	bl	8008ff8 <__ssputs_r>
 8009122:	3001      	adds	r0, #1
 8009124:	f000 80a7 	beq.w	8009276 <_svfiprintf_r+0x1c6>
 8009128:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800912a:	445a      	add	r2, fp
 800912c:	9209      	str	r2, [sp, #36]	@ 0x24
 800912e:	f89a 3000 	ldrb.w	r3, [sl]
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 809f 	beq.w	8009276 <_svfiprintf_r+0x1c6>
 8009138:	2300      	movs	r3, #0
 800913a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800913e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009142:	f10a 0a01 	add.w	sl, sl, #1
 8009146:	9304      	str	r3, [sp, #16]
 8009148:	9307      	str	r3, [sp, #28]
 800914a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800914e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009150:	4654      	mov	r4, sl
 8009152:	2205      	movs	r2, #5
 8009154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009158:	484e      	ldr	r0, [pc, #312]	@ (8009294 <_svfiprintf_r+0x1e4>)
 800915a:	f7f7 f841 	bl	80001e0 <memchr>
 800915e:	9a04      	ldr	r2, [sp, #16]
 8009160:	b9d8      	cbnz	r0, 800919a <_svfiprintf_r+0xea>
 8009162:	06d0      	lsls	r0, r2, #27
 8009164:	bf44      	itt	mi
 8009166:	2320      	movmi	r3, #32
 8009168:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800916c:	0711      	lsls	r1, r2, #28
 800916e:	bf44      	itt	mi
 8009170:	232b      	movmi	r3, #43	@ 0x2b
 8009172:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009176:	f89a 3000 	ldrb.w	r3, [sl]
 800917a:	2b2a      	cmp	r3, #42	@ 0x2a
 800917c:	d015      	beq.n	80091aa <_svfiprintf_r+0xfa>
 800917e:	9a07      	ldr	r2, [sp, #28]
 8009180:	4654      	mov	r4, sl
 8009182:	2000      	movs	r0, #0
 8009184:	f04f 0c0a 	mov.w	ip, #10
 8009188:	4621      	mov	r1, r4
 800918a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800918e:	3b30      	subs	r3, #48	@ 0x30
 8009190:	2b09      	cmp	r3, #9
 8009192:	d94b      	bls.n	800922c <_svfiprintf_r+0x17c>
 8009194:	b1b0      	cbz	r0, 80091c4 <_svfiprintf_r+0x114>
 8009196:	9207      	str	r2, [sp, #28]
 8009198:	e014      	b.n	80091c4 <_svfiprintf_r+0x114>
 800919a:	eba0 0308 	sub.w	r3, r0, r8
 800919e:	fa09 f303 	lsl.w	r3, r9, r3
 80091a2:	4313      	orrs	r3, r2
 80091a4:	9304      	str	r3, [sp, #16]
 80091a6:	46a2      	mov	sl, r4
 80091a8:	e7d2      	b.n	8009150 <_svfiprintf_r+0xa0>
 80091aa:	9b03      	ldr	r3, [sp, #12]
 80091ac:	1d19      	adds	r1, r3, #4
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	9103      	str	r1, [sp, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	bfbb      	ittet	lt
 80091b6:	425b      	neglt	r3, r3
 80091b8:	f042 0202 	orrlt.w	r2, r2, #2
 80091bc:	9307      	strge	r3, [sp, #28]
 80091be:	9307      	strlt	r3, [sp, #28]
 80091c0:	bfb8      	it	lt
 80091c2:	9204      	strlt	r2, [sp, #16]
 80091c4:	7823      	ldrb	r3, [r4, #0]
 80091c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80091c8:	d10a      	bne.n	80091e0 <_svfiprintf_r+0x130>
 80091ca:	7863      	ldrb	r3, [r4, #1]
 80091cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80091ce:	d132      	bne.n	8009236 <_svfiprintf_r+0x186>
 80091d0:	9b03      	ldr	r3, [sp, #12]
 80091d2:	1d1a      	adds	r2, r3, #4
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	9203      	str	r2, [sp, #12]
 80091d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091dc:	3402      	adds	r4, #2
 80091de:	9305      	str	r3, [sp, #20]
 80091e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80092a4 <_svfiprintf_r+0x1f4>
 80091e4:	7821      	ldrb	r1, [r4, #0]
 80091e6:	2203      	movs	r2, #3
 80091e8:	4650      	mov	r0, sl
 80091ea:	f7f6 fff9 	bl	80001e0 <memchr>
 80091ee:	b138      	cbz	r0, 8009200 <_svfiprintf_r+0x150>
 80091f0:	9b04      	ldr	r3, [sp, #16]
 80091f2:	eba0 000a 	sub.w	r0, r0, sl
 80091f6:	2240      	movs	r2, #64	@ 0x40
 80091f8:	4082      	lsls	r2, r0
 80091fa:	4313      	orrs	r3, r2
 80091fc:	3401      	adds	r4, #1
 80091fe:	9304      	str	r3, [sp, #16]
 8009200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009204:	4824      	ldr	r0, [pc, #144]	@ (8009298 <_svfiprintf_r+0x1e8>)
 8009206:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800920a:	2206      	movs	r2, #6
 800920c:	f7f6 ffe8 	bl	80001e0 <memchr>
 8009210:	2800      	cmp	r0, #0
 8009212:	d036      	beq.n	8009282 <_svfiprintf_r+0x1d2>
 8009214:	4b21      	ldr	r3, [pc, #132]	@ (800929c <_svfiprintf_r+0x1ec>)
 8009216:	bb1b      	cbnz	r3, 8009260 <_svfiprintf_r+0x1b0>
 8009218:	9b03      	ldr	r3, [sp, #12]
 800921a:	3307      	adds	r3, #7
 800921c:	f023 0307 	bic.w	r3, r3, #7
 8009220:	3308      	adds	r3, #8
 8009222:	9303      	str	r3, [sp, #12]
 8009224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009226:	4433      	add	r3, r6
 8009228:	9309      	str	r3, [sp, #36]	@ 0x24
 800922a:	e76a      	b.n	8009102 <_svfiprintf_r+0x52>
 800922c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009230:	460c      	mov	r4, r1
 8009232:	2001      	movs	r0, #1
 8009234:	e7a8      	b.n	8009188 <_svfiprintf_r+0xd8>
 8009236:	2300      	movs	r3, #0
 8009238:	3401      	adds	r4, #1
 800923a:	9305      	str	r3, [sp, #20]
 800923c:	4619      	mov	r1, r3
 800923e:	f04f 0c0a 	mov.w	ip, #10
 8009242:	4620      	mov	r0, r4
 8009244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009248:	3a30      	subs	r2, #48	@ 0x30
 800924a:	2a09      	cmp	r2, #9
 800924c:	d903      	bls.n	8009256 <_svfiprintf_r+0x1a6>
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0c6      	beq.n	80091e0 <_svfiprintf_r+0x130>
 8009252:	9105      	str	r1, [sp, #20]
 8009254:	e7c4      	b.n	80091e0 <_svfiprintf_r+0x130>
 8009256:	fb0c 2101 	mla	r1, ip, r1, r2
 800925a:	4604      	mov	r4, r0
 800925c:	2301      	movs	r3, #1
 800925e:	e7f0      	b.n	8009242 <_svfiprintf_r+0x192>
 8009260:	ab03      	add	r3, sp, #12
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	462a      	mov	r2, r5
 8009266:	4b0e      	ldr	r3, [pc, #56]	@ (80092a0 <_svfiprintf_r+0x1f0>)
 8009268:	a904      	add	r1, sp, #16
 800926a:	4638      	mov	r0, r7
 800926c:	f7fd ff36 	bl	80070dc <_printf_float>
 8009270:	1c42      	adds	r2, r0, #1
 8009272:	4606      	mov	r6, r0
 8009274:	d1d6      	bne.n	8009224 <_svfiprintf_r+0x174>
 8009276:	89ab      	ldrh	r3, [r5, #12]
 8009278:	065b      	lsls	r3, r3, #25
 800927a:	f53f af2d 	bmi.w	80090d8 <_svfiprintf_r+0x28>
 800927e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009280:	e72c      	b.n	80090dc <_svfiprintf_r+0x2c>
 8009282:	ab03      	add	r3, sp, #12
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	462a      	mov	r2, r5
 8009288:	4b05      	ldr	r3, [pc, #20]	@ (80092a0 <_svfiprintf_r+0x1f0>)
 800928a:	a904      	add	r1, sp, #16
 800928c:	4638      	mov	r0, r7
 800928e:	f7fe f9bd 	bl	800760c <_printf_i>
 8009292:	e7ed      	b.n	8009270 <_svfiprintf_r+0x1c0>
 8009294:	0800b288 	.word	0x0800b288
 8009298:	0800b292 	.word	0x0800b292
 800929c:	080070dd 	.word	0x080070dd
 80092a0:	08008ff9 	.word	0x08008ff9
 80092a4:	0800b28e 	.word	0x0800b28e

080092a8 <__sflush_r>:
 80092a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b0:	0716      	lsls	r6, r2, #28
 80092b2:	4605      	mov	r5, r0
 80092b4:	460c      	mov	r4, r1
 80092b6:	d454      	bmi.n	8009362 <__sflush_r+0xba>
 80092b8:	684b      	ldr	r3, [r1, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	dc02      	bgt.n	80092c4 <__sflush_r+0x1c>
 80092be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	dd48      	ble.n	8009356 <__sflush_r+0xae>
 80092c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092c6:	2e00      	cmp	r6, #0
 80092c8:	d045      	beq.n	8009356 <__sflush_r+0xae>
 80092ca:	2300      	movs	r3, #0
 80092cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80092d0:	682f      	ldr	r7, [r5, #0]
 80092d2:	6a21      	ldr	r1, [r4, #32]
 80092d4:	602b      	str	r3, [r5, #0]
 80092d6:	d030      	beq.n	800933a <__sflush_r+0x92>
 80092d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	0759      	lsls	r1, r3, #29
 80092de:	d505      	bpl.n	80092ec <__sflush_r+0x44>
 80092e0:	6863      	ldr	r3, [r4, #4]
 80092e2:	1ad2      	subs	r2, r2, r3
 80092e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80092e6:	b10b      	cbz	r3, 80092ec <__sflush_r+0x44>
 80092e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80092ea:	1ad2      	subs	r2, r2, r3
 80092ec:	2300      	movs	r3, #0
 80092ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092f0:	6a21      	ldr	r1, [r4, #32]
 80092f2:	4628      	mov	r0, r5
 80092f4:	47b0      	blx	r6
 80092f6:	1c43      	adds	r3, r0, #1
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	d106      	bne.n	800930a <__sflush_r+0x62>
 80092fc:	6829      	ldr	r1, [r5, #0]
 80092fe:	291d      	cmp	r1, #29
 8009300:	d82b      	bhi.n	800935a <__sflush_r+0xb2>
 8009302:	4a2a      	ldr	r2, [pc, #168]	@ (80093ac <__sflush_r+0x104>)
 8009304:	410a      	asrs	r2, r1
 8009306:	07d6      	lsls	r6, r2, #31
 8009308:	d427      	bmi.n	800935a <__sflush_r+0xb2>
 800930a:	2200      	movs	r2, #0
 800930c:	6062      	str	r2, [r4, #4]
 800930e:	04d9      	lsls	r1, r3, #19
 8009310:	6922      	ldr	r2, [r4, #16]
 8009312:	6022      	str	r2, [r4, #0]
 8009314:	d504      	bpl.n	8009320 <__sflush_r+0x78>
 8009316:	1c42      	adds	r2, r0, #1
 8009318:	d101      	bne.n	800931e <__sflush_r+0x76>
 800931a:	682b      	ldr	r3, [r5, #0]
 800931c:	b903      	cbnz	r3, 8009320 <__sflush_r+0x78>
 800931e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009320:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009322:	602f      	str	r7, [r5, #0]
 8009324:	b1b9      	cbz	r1, 8009356 <__sflush_r+0xae>
 8009326:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800932a:	4299      	cmp	r1, r3
 800932c:	d002      	beq.n	8009334 <__sflush_r+0x8c>
 800932e:	4628      	mov	r0, r5
 8009330:	f7ff fa96 	bl	8008860 <_free_r>
 8009334:	2300      	movs	r3, #0
 8009336:	6363      	str	r3, [r4, #52]	@ 0x34
 8009338:	e00d      	b.n	8009356 <__sflush_r+0xae>
 800933a:	2301      	movs	r3, #1
 800933c:	4628      	mov	r0, r5
 800933e:	47b0      	blx	r6
 8009340:	4602      	mov	r2, r0
 8009342:	1c50      	adds	r0, r2, #1
 8009344:	d1c9      	bne.n	80092da <__sflush_r+0x32>
 8009346:	682b      	ldr	r3, [r5, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d0c6      	beq.n	80092da <__sflush_r+0x32>
 800934c:	2b1d      	cmp	r3, #29
 800934e:	d001      	beq.n	8009354 <__sflush_r+0xac>
 8009350:	2b16      	cmp	r3, #22
 8009352:	d11e      	bne.n	8009392 <__sflush_r+0xea>
 8009354:	602f      	str	r7, [r5, #0]
 8009356:	2000      	movs	r0, #0
 8009358:	e022      	b.n	80093a0 <__sflush_r+0xf8>
 800935a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800935e:	b21b      	sxth	r3, r3
 8009360:	e01b      	b.n	800939a <__sflush_r+0xf2>
 8009362:	690f      	ldr	r7, [r1, #16]
 8009364:	2f00      	cmp	r7, #0
 8009366:	d0f6      	beq.n	8009356 <__sflush_r+0xae>
 8009368:	0793      	lsls	r3, r2, #30
 800936a:	680e      	ldr	r6, [r1, #0]
 800936c:	bf08      	it	eq
 800936e:	694b      	ldreq	r3, [r1, #20]
 8009370:	600f      	str	r7, [r1, #0]
 8009372:	bf18      	it	ne
 8009374:	2300      	movne	r3, #0
 8009376:	eba6 0807 	sub.w	r8, r6, r7
 800937a:	608b      	str	r3, [r1, #8]
 800937c:	f1b8 0f00 	cmp.w	r8, #0
 8009380:	dde9      	ble.n	8009356 <__sflush_r+0xae>
 8009382:	6a21      	ldr	r1, [r4, #32]
 8009384:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009386:	4643      	mov	r3, r8
 8009388:	463a      	mov	r2, r7
 800938a:	4628      	mov	r0, r5
 800938c:	47b0      	blx	r6
 800938e:	2800      	cmp	r0, #0
 8009390:	dc08      	bgt.n	80093a4 <__sflush_r+0xfc>
 8009392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800939a:	81a3      	strh	r3, [r4, #12]
 800939c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093a4:	4407      	add	r7, r0
 80093a6:	eba8 0800 	sub.w	r8, r8, r0
 80093aa:	e7e7      	b.n	800937c <__sflush_r+0xd4>
 80093ac:	dfbffffe 	.word	0xdfbffffe

080093b0 <_fflush_r>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	690b      	ldr	r3, [r1, #16]
 80093b4:	4605      	mov	r5, r0
 80093b6:	460c      	mov	r4, r1
 80093b8:	b913      	cbnz	r3, 80093c0 <_fflush_r+0x10>
 80093ba:	2500      	movs	r5, #0
 80093bc:	4628      	mov	r0, r5
 80093be:	bd38      	pop	{r3, r4, r5, pc}
 80093c0:	b118      	cbz	r0, 80093ca <_fflush_r+0x1a>
 80093c2:	6a03      	ldr	r3, [r0, #32]
 80093c4:	b90b      	cbnz	r3, 80093ca <_fflush_r+0x1a>
 80093c6:	f7fe facd 	bl	8007964 <__sinit>
 80093ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d0f3      	beq.n	80093ba <_fflush_r+0xa>
 80093d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80093d4:	07d0      	lsls	r0, r2, #31
 80093d6:	d404      	bmi.n	80093e2 <_fflush_r+0x32>
 80093d8:	0599      	lsls	r1, r3, #22
 80093da:	d402      	bmi.n	80093e2 <_fflush_r+0x32>
 80093dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093de:	f7fe fbe8 	bl	8007bb2 <__retarget_lock_acquire_recursive>
 80093e2:	4628      	mov	r0, r5
 80093e4:	4621      	mov	r1, r4
 80093e6:	f7ff ff5f 	bl	80092a8 <__sflush_r>
 80093ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093ec:	07da      	lsls	r2, r3, #31
 80093ee:	4605      	mov	r5, r0
 80093f0:	d4e4      	bmi.n	80093bc <_fflush_r+0xc>
 80093f2:	89a3      	ldrh	r3, [r4, #12]
 80093f4:	059b      	lsls	r3, r3, #22
 80093f6:	d4e1      	bmi.n	80093bc <_fflush_r+0xc>
 80093f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093fa:	f7fe fbdb 	bl	8007bb4 <__retarget_lock_release_recursive>
 80093fe:	e7dd      	b.n	80093bc <_fflush_r+0xc>

08009400 <memmove>:
 8009400:	4288      	cmp	r0, r1
 8009402:	b510      	push	{r4, lr}
 8009404:	eb01 0402 	add.w	r4, r1, r2
 8009408:	d902      	bls.n	8009410 <memmove+0x10>
 800940a:	4284      	cmp	r4, r0
 800940c:	4623      	mov	r3, r4
 800940e:	d807      	bhi.n	8009420 <memmove+0x20>
 8009410:	1e43      	subs	r3, r0, #1
 8009412:	42a1      	cmp	r1, r4
 8009414:	d008      	beq.n	8009428 <memmove+0x28>
 8009416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800941a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800941e:	e7f8      	b.n	8009412 <memmove+0x12>
 8009420:	4402      	add	r2, r0
 8009422:	4601      	mov	r1, r0
 8009424:	428a      	cmp	r2, r1
 8009426:	d100      	bne.n	800942a <memmove+0x2a>
 8009428:	bd10      	pop	{r4, pc}
 800942a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800942e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009432:	e7f7      	b.n	8009424 <memmove+0x24>

08009434 <memcpy>:
 8009434:	440a      	add	r2, r1
 8009436:	4291      	cmp	r1, r2
 8009438:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800943c:	d100      	bne.n	8009440 <memcpy+0xc>
 800943e:	4770      	bx	lr
 8009440:	b510      	push	{r4, lr}
 8009442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800944a:	4291      	cmp	r1, r2
 800944c:	d1f9      	bne.n	8009442 <memcpy+0xe>
 800944e:	bd10      	pop	{r4, pc}

08009450 <__assert_func>:
 8009450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009452:	4614      	mov	r4, r2
 8009454:	461a      	mov	r2, r3
 8009456:	4b09      	ldr	r3, [pc, #36]	@ (800947c <__assert_func+0x2c>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4605      	mov	r5, r0
 800945c:	68d8      	ldr	r0, [r3, #12]
 800945e:	b954      	cbnz	r4, 8009476 <__assert_func+0x26>
 8009460:	4b07      	ldr	r3, [pc, #28]	@ (8009480 <__assert_func+0x30>)
 8009462:	461c      	mov	r4, r3
 8009464:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009468:	9100      	str	r1, [sp, #0]
 800946a:	462b      	mov	r3, r5
 800946c:	4905      	ldr	r1, [pc, #20]	@ (8009484 <__assert_func+0x34>)
 800946e:	f000 f86f 	bl	8009550 <fiprintf>
 8009472:	f000 f87f 	bl	8009574 <abort>
 8009476:	4b04      	ldr	r3, [pc, #16]	@ (8009488 <__assert_func+0x38>)
 8009478:	e7f4      	b.n	8009464 <__assert_func+0x14>
 800947a:	bf00      	nop
 800947c:	20000040 	.word	0x20000040
 8009480:	0800b2de 	.word	0x0800b2de
 8009484:	0800b2b0 	.word	0x0800b2b0
 8009488:	0800b2a3 	.word	0x0800b2a3

0800948c <_calloc_r>:
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	fba1 5402 	umull	r5, r4, r1, r2
 8009492:	b93c      	cbnz	r4, 80094a4 <_calloc_r+0x18>
 8009494:	4629      	mov	r1, r5
 8009496:	f7fd fcf5 	bl	8006e84 <_malloc_r>
 800949a:	4606      	mov	r6, r0
 800949c:	b928      	cbnz	r0, 80094aa <_calloc_r+0x1e>
 800949e:	2600      	movs	r6, #0
 80094a0:	4630      	mov	r0, r6
 80094a2:	bd70      	pop	{r4, r5, r6, pc}
 80094a4:	220c      	movs	r2, #12
 80094a6:	6002      	str	r2, [r0, #0]
 80094a8:	e7f9      	b.n	800949e <_calloc_r+0x12>
 80094aa:	462a      	mov	r2, r5
 80094ac:	4621      	mov	r1, r4
 80094ae:	f7fe faf2 	bl	8007a96 <memset>
 80094b2:	e7f5      	b.n	80094a0 <_calloc_r+0x14>

080094b4 <__ascii_mbtowc>:
 80094b4:	b082      	sub	sp, #8
 80094b6:	b901      	cbnz	r1, 80094ba <__ascii_mbtowc+0x6>
 80094b8:	a901      	add	r1, sp, #4
 80094ba:	b142      	cbz	r2, 80094ce <__ascii_mbtowc+0x1a>
 80094bc:	b14b      	cbz	r3, 80094d2 <__ascii_mbtowc+0x1e>
 80094be:	7813      	ldrb	r3, [r2, #0]
 80094c0:	600b      	str	r3, [r1, #0]
 80094c2:	7812      	ldrb	r2, [r2, #0]
 80094c4:	1e10      	subs	r0, r2, #0
 80094c6:	bf18      	it	ne
 80094c8:	2001      	movne	r0, #1
 80094ca:	b002      	add	sp, #8
 80094cc:	4770      	bx	lr
 80094ce:	4610      	mov	r0, r2
 80094d0:	e7fb      	b.n	80094ca <__ascii_mbtowc+0x16>
 80094d2:	f06f 0001 	mvn.w	r0, #1
 80094d6:	e7f8      	b.n	80094ca <__ascii_mbtowc+0x16>

080094d8 <_realloc_r>:
 80094d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094dc:	4680      	mov	r8, r0
 80094de:	4615      	mov	r5, r2
 80094e0:	460c      	mov	r4, r1
 80094e2:	b921      	cbnz	r1, 80094ee <_realloc_r+0x16>
 80094e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094e8:	4611      	mov	r1, r2
 80094ea:	f7fd bccb 	b.w	8006e84 <_malloc_r>
 80094ee:	b92a      	cbnz	r2, 80094fc <_realloc_r+0x24>
 80094f0:	f7ff f9b6 	bl	8008860 <_free_r>
 80094f4:	2400      	movs	r4, #0
 80094f6:	4620      	mov	r0, r4
 80094f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094fc:	f000 f841 	bl	8009582 <_malloc_usable_size_r>
 8009500:	4285      	cmp	r5, r0
 8009502:	4606      	mov	r6, r0
 8009504:	d802      	bhi.n	800950c <_realloc_r+0x34>
 8009506:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800950a:	d8f4      	bhi.n	80094f6 <_realloc_r+0x1e>
 800950c:	4629      	mov	r1, r5
 800950e:	4640      	mov	r0, r8
 8009510:	f7fd fcb8 	bl	8006e84 <_malloc_r>
 8009514:	4607      	mov	r7, r0
 8009516:	2800      	cmp	r0, #0
 8009518:	d0ec      	beq.n	80094f4 <_realloc_r+0x1c>
 800951a:	42b5      	cmp	r5, r6
 800951c:	462a      	mov	r2, r5
 800951e:	4621      	mov	r1, r4
 8009520:	bf28      	it	cs
 8009522:	4632      	movcs	r2, r6
 8009524:	f7ff ff86 	bl	8009434 <memcpy>
 8009528:	4621      	mov	r1, r4
 800952a:	4640      	mov	r0, r8
 800952c:	f7ff f998 	bl	8008860 <_free_r>
 8009530:	463c      	mov	r4, r7
 8009532:	e7e0      	b.n	80094f6 <_realloc_r+0x1e>

08009534 <__ascii_wctomb>:
 8009534:	4603      	mov	r3, r0
 8009536:	4608      	mov	r0, r1
 8009538:	b141      	cbz	r1, 800954c <__ascii_wctomb+0x18>
 800953a:	2aff      	cmp	r2, #255	@ 0xff
 800953c:	d904      	bls.n	8009548 <__ascii_wctomb+0x14>
 800953e:	228a      	movs	r2, #138	@ 0x8a
 8009540:	601a      	str	r2, [r3, #0]
 8009542:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009546:	4770      	bx	lr
 8009548:	700a      	strb	r2, [r1, #0]
 800954a:	2001      	movs	r0, #1
 800954c:	4770      	bx	lr
	...

08009550 <fiprintf>:
 8009550:	b40e      	push	{r1, r2, r3}
 8009552:	b503      	push	{r0, r1, lr}
 8009554:	4601      	mov	r1, r0
 8009556:	ab03      	add	r3, sp, #12
 8009558:	4805      	ldr	r0, [pc, #20]	@ (8009570 <fiprintf+0x20>)
 800955a:	f853 2b04 	ldr.w	r2, [r3], #4
 800955e:	6800      	ldr	r0, [r0, #0]
 8009560:	9301      	str	r3, [sp, #4]
 8009562:	f000 f83f 	bl	80095e4 <_vfiprintf_r>
 8009566:	b002      	add	sp, #8
 8009568:	f85d eb04 	ldr.w	lr, [sp], #4
 800956c:	b003      	add	sp, #12
 800956e:	4770      	bx	lr
 8009570:	20000040 	.word	0x20000040

08009574 <abort>:
 8009574:	b508      	push	{r3, lr}
 8009576:	2006      	movs	r0, #6
 8009578:	f000 fa08 	bl	800998c <raise>
 800957c:	2001      	movs	r0, #1
 800957e:	f7f9 f87b 	bl	8002678 <_exit>

08009582 <_malloc_usable_size_r>:
 8009582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009586:	1f18      	subs	r0, r3, #4
 8009588:	2b00      	cmp	r3, #0
 800958a:	bfbc      	itt	lt
 800958c:	580b      	ldrlt	r3, [r1, r0]
 800958e:	18c0      	addlt	r0, r0, r3
 8009590:	4770      	bx	lr

08009592 <__sfputc_r>:
 8009592:	6893      	ldr	r3, [r2, #8]
 8009594:	3b01      	subs	r3, #1
 8009596:	2b00      	cmp	r3, #0
 8009598:	b410      	push	{r4}
 800959a:	6093      	str	r3, [r2, #8]
 800959c:	da08      	bge.n	80095b0 <__sfputc_r+0x1e>
 800959e:	6994      	ldr	r4, [r2, #24]
 80095a0:	42a3      	cmp	r3, r4
 80095a2:	db01      	blt.n	80095a8 <__sfputc_r+0x16>
 80095a4:	290a      	cmp	r1, #10
 80095a6:	d103      	bne.n	80095b0 <__sfputc_r+0x1e>
 80095a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095ac:	f000 b932 	b.w	8009814 <__swbuf_r>
 80095b0:	6813      	ldr	r3, [r2, #0]
 80095b2:	1c58      	adds	r0, r3, #1
 80095b4:	6010      	str	r0, [r2, #0]
 80095b6:	7019      	strb	r1, [r3, #0]
 80095b8:	4608      	mov	r0, r1
 80095ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <__sfputs_r>:
 80095c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c2:	4606      	mov	r6, r0
 80095c4:	460f      	mov	r7, r1
 80095c6:	4614      	mov	r4, r2
 80095c8:	18d5      	adds	r5, r2, r3
 80095ca:	42ac      	cmp	r4, r5
 80095cc:	d101      	bne.n	80095d2 <__sfputs_r+0x12>
 80095ce:	2000      	movs	r0, #0
 80095d0:	e007      	b.n	80095e2 <__sfputs_r+0x22>
 80095d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d6:	463a      	mov	r2, r7
 80095d8:	4630      	mov	r0, r6
 80095da:	f7ff ffda 	bl	8009592 <__sfputc_r>
 80095de:	1c43      	adds	r3, r0, #1
 80095e0:	d1f3      	bne.n	80095ca <__sfputs_r+0xa>
 80095e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080095e4 <_vfiprintf_r>:
 80095e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e8:	460d      	mov	r5, r1
 80095ea:	b09d      	sub	sp, #116	@ 0x74
 80095ec:	4614      	mov	r4, r2
 80095ee:	4698      	mov	r8, r3
 80095f0:	4606      	mov	r6, r0
 80095f2:	b118      	cbz	r0, 80095fc <_vfiprintf_r+0x18>
 80095f4:	6a03      	ldr	r3, [r0, #32]
 80095f6:	b90b      	cbnz	r3, 80095fc <_vfiprintf_r+0x18>
 80095f8:	f7fe f9b4 	bl	8007964 <__sinit>
 80095fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095fe:	07d9      	lsls	r1, r3, #31
 8009600:	d405      	bmi.n	800960e <_vfiprintf_r+0x2a>
 8009602:	89ab      	ldrh	r3, [r5, #12]
 8009604:	059a      	lsls	r2, r3, #22
 8009606:	d402      	bmi.n	800960e <_vfiprintf_r+0x2a>
 8009608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800960a:	f7fe fad2 	bl	8007bb2 <__retarget_lock_acquire_recursive>
 800960e:	89ab      	ldrh	r3, [r5, #12]
 8009610:	071b      	lsls	r3, r3, #28
 8009612:	d501      	bpl.n	8009618 <_vfiprintf_r+0x34>
 8009614:	692b      	ldr	r3, [r5, #16]
 8009616:	b99b      	cbnz	r3, 8009640 <_vfiprintf_r+0x5c>
 8009618:	4629      	mov	r1, r5
 800961a:	4630      	mov	r0, r6
 800961c:	f000 f938 	bl	8009890 <__swsetup_r>
 8009620:	b170      	cbz	r0, 8009640 <_vfiprintf_r+0x5c>
 8009622:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009624:	07dc      	lsls	r4, r3, #31
 8009626:	d504      	bpl.n	8009632 <_vfiprintf_r+0x4e>
 8009628:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800962c:	b01d      	add	sp, #116	@ 0x74
 800962e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009632:	89ab      	ldrh	r3, [r5, #12]
 8009634:	0598      	lsls	r0, r3, #22
 8009636:	d4f7      	bmi.n	8009628 <_vfiprintf_r+0x44>
 8009638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800963a:	f7fe fabb 	bl	8007bb4 <__retarget_lock_release_recursive>
 800963e:	e7f3      	b.n	8009628 <_vfiprintf_r+0x44>
 8009640:	2300      	movs	r3, #0
 8009642:	9309      	str	r3, [sp, #36]	@ 0x24
 8009644:	2320      	movs	r3, #32
 8009646:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800964a:	f8cd 800c 	str.w	r8, [sp, #12]
 800964e:	2330      	movs	r3, #48	@ 0x30
 8009650:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009800 <_vfiprintf_r+0x21c>
 8009654:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009658:	f04f 0901 	mov.w	r9, #1
 800965c:	4623      	mov	r3, r4
 800965e:	469a      	mov	sl, r3
 8009660:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009664:	b10a      	cbz	r2, 800966a <_vfiprintf_r+0x86>
 8009666:	2a25      	cmp	r2, #37	@ 0x25
 8009668:	d1f9      	bne.n	800965e <_vfiprintf_r+0x7a>
 800966a:	ebba 0b04 	subs.w	fp, sl, r4
 800966e:	d00b      	beq.n	8009688 <_vfiprintf_r+0xa4>
 8009670:	465b      	mov	r3, fp
 8009672:	4622      	mov	r2, r4
 8009674:	4629      	mov	r1, r5
 8009676:	4630      	mov	r0, r6
 8009678:	f7ff ffa2 	bl	80095c0 <__sfputs_r>
 800967c:	3001      	adds	r0, #1
 800967e:	f000 80a7 	beq.w	80097d0 <_vfiprintf_r+0x1ec>
 8009682:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009684:	445a      	add	r2, fp
 8009686:	9209      	str	r2, [sp, #36]	@ 0x24
 8009688:	f89a 3000 	ldrb.w	r3, [sl]
 800968c:	2b00      	cmp	r3, #0
 800968e:	f000 809f 	beq.w	80097d0 <_vfiprintf_r+0x1ec>
 8009692:	2300      	movs	r3, #0
 8009694:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800969c:	f10a 0a01 	add.w	sl, sl, #1
 80096a0:	9304      	str	r3, [sp, #16]
 80096a2:	9307      	str	r3, [sp, #28]
 80096a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80096aa:	4654      	mov	r4, sl
 80096ac:	2205      	movs	r2, #5
 80096ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b2:	4853      	ldr	r0, [pc, #332]	@ (8009800 <_vfiprintf_r+0x21c>)
 80096b4:	f7f6 fd94 	bl	80001e0 <memchr>
 80096b8:	9a04      	ldr	r2, [sp, #16]
 80096ba:	b9d8      	cbnz	r0, 80096f4 <_vfiprintf_r+0x110>
 80096bc:	06d1      	lsls	r1, r2, #27
 80096be:	bf44      	itt	mi
 80096c0:	2320      	movmi	r3, #32
 80096c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096c6:	0713      	lsls	r3, r2, #28
 80096c8:	bf44      	itt	mi
 80096ca:	232b      	movmi	r3, #43	@ 0x2b
 80096cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096d0:	f89a 3000 	ldrb.w	r3, [sl]
 80096d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80096d6:	d015      	beq.n	8009704 <_vfiprintf_r+0x120>
 80096d8:	9a07      	ldr	r2, [sp, #28]
 80096da:	4654      	mov	r4, sl
 80096dc:	2000      	movs	r0, #0
 80096de:	f04f 0c0a 	mov.w	ip, #10
 80096e2:	4621      	mov	r1, r4
 80096e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096e8:	3b30      	subs	r3, #48	@ 0x30
 80096ea:	2b09      	cmp	r3, #9
 80096ec:	d94b      	bls.n	8009786 <_vfiprintf_r+0x1a2>
 80096ee:	b1b0      	cbz	r0, 800971e <_vfiprintf_r+0x13a>
 80096f0:	9207      	str	r2, [sp, #28]
 80096f2:	e014      	b.n	800971e <_vfiprintf_r+0x13a>
 80096f4:	eba0 0308 	sub.w	r3, r0, r8
 80096f8:	fa09 f303 	lsl.w	r3, r9, r3
 80096fc:	4313      	orrs	r3, r2
 80096fe:	9304      	str	r3, [sp, #16]
 8009700:	46a2      	mov	sl, r4
 8009702:	e7d2      	b.n	80096aa <_vfiprintf_r+0xc6>
 8009704:	9b03      	ldr	r3, [sp, #12]
 8009706:	1d19      	adds	r1, r3, #4
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	9103      	str	r1, [sp, #12]
 800970c:	2b00      	cmp	r3, #0
 800970e:	bfbb      	ittet	lt
 8009710:	425b      	neglt	r3, r3
 8009712:	f042 0202 	orrlt.w	r2, r2, #2
 8009716:	9307      	strge	r3, [sp, #28]
 8009718:	9307      	strlt	r3, [sp, #28]
 800971a:	bfb8      	it	lt
 800971c:	9204      	strlt	r2, [sp, #16]
 800971e:	7823      	ldrb	r3, [r4, #0]
 8009720:	2b2e      	cmp	r3, #46	@ 0x2e
 8009722:	d10a      	bne.n	800973a <_vfiprintf_r+0x156>
 8009724:	7863      	ldrb	r3, [r4, #1]
 8009726:	2b2a      	cmp	r3, #42	@ 0x2a
 8009728:	d132      	bne.n	8009790 <_vfiprintf_r+0x1ac>
 800972a:	9b03      	ldr	r3, [sp, #12]
 800972c:	1d1a      	adds	r2, r3, #4
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	9203      	str	r2, [sp, #12]
 8009732:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009736:	3402      	adds	r4, #2
 8009738:	9305      	str	r3, [sp, #20]
 800973a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009810 <_vfiprintf_r+0x22c>
 800973e:	7821      	ldrb	r1, [r4, #0]
 8009740:	2203      	movs	r2, #3
 8009742:	4650      	mov	r0, sl
 8009744:	f7f6 fd4c 	bl	80001e0 <memchr>
 8009748:	b138      	cbz	r0, 800975a <_vfiprintf_r+0x176>
 800974a:	9b04      	ldr	r3, [sp, #16]
 800974c:	eba0 000a 	sub.w	r0, r0, sl
 8009750:	2240      	movs	r2, #64	@ 0x40
 8009752:	4082      	lsls	r2, r0
 8009754:	4313      	orrs	r3, r2
 8009756:	3401      	adds	r4, #1
 8009758:	9304      	str	r3, [sp, #16]
 800975a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975e:	4829      	ldr	r0, [pc, #164]	@ (8009804 <_vfiprintf_r+0x220>)
 8009760:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009764:	2206      	movs	r2, #6
 8009766:	f7f6 fd3b 	bl	80001e0 <memchr>
 800976a:	2800      	cmp	r0, #0
 800976c:	d03f      	beq.n	80097ee <_vfiprintf_r+0x20a>
 800976e:	4b26      	ldr	r3, [pc, #152]	@ (8009808 <_vfiprintf_r+0x224>)
 8009770:	bb1b      	cbnz	r3, 80097ba <_vfiprintf_r+0x1d6>
 8009772:	9b03      	ldr	r3, [sp, #12]
 8009774:	3307      	adds	r3, #7
 8009776:	f023 0307 	bic.w	r3, r3, #7
 800977a:	3308      	adds	r3, #8
 800977c:	9303      	str	r3, [sp, #12]
 800977e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009780:	443b      	add	r3, r7
 8009782:	9309      	str	r3, [sp, #36]	@ 0x24
 8009784:	e76a      	b.n	800965c <_vfiprintf_r+0x78>
 8009786:	fb0c 3202 	mla	r2, ip, r2, r3
 800978a:	460c      	mov	r4, r1
 800978c:	2001      	movs	r0, #1
 800978e:	e7a8      	b.n	80096e2 <_vfiprintf_r+0xfe>
 8009790:	2300      	movs	r3, #0
 8009792:	3401      	adds	r4, #1
 8009794:	9305      	str	r3, [sp, #20]
 8009796:	4619      	mov	r1, r3
 8009798:	f04f 0c0a 	mov.w	ip, #10
 800979c:	4620      	mov	r0, r4
 800979e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097a2:	3a30      	subs	r2, #48	@ 0x30
 80097a4:	2a09      	cmp	r2, #9
 80097a6:	d903      	bls.n	80097b0 <_vfiprintf_r+0x1cc>
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d0c6      	beq.n	800973a <_vfiprintf_r+0x156>
 80097ac:	9105      	str	r1, [sp, #20]
 80097ae:	e7c4      	b.n	800973a <_vfiprintf_r+0x156>
 80097b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80097b4:	4604      	mov	r4, r0
 80097b6:	2301      	movs	r3, #1
 80097b8:	e7f0      	b.n	800979c <_vfiprintf_r+0x1b8>
 80097ba:	ab03      	add	r3, sp, #12
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	462a      	mov	r2, r5
 80097c0:	4b12      	ldr	r3, [pc, #72]	@ (800980c <_vfiprintf_r+0x228>)
 80097c2:	a904      	add	r1, sp, #16
 80097c4:	4630      	mov	r0, r6
 80097c6:	f7fd fc89 	bl	80070dc <_printf_float>
 80097ca:	4607      	mov	r7, r0
 80097cc:	1c78      	adds	r0, r7, #1
 80097ce:	d1d6      	bne.n	800977e <_vfiprintf_r+0x19a>
 80097d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097d2:	07d9      	lsls	r1, r3, #31
 80097d4:	d405      	bmi.n	80097e2 <_vfiprintf_r+0x1fe>
 80097d6:	89ab      	ldrh	r3, [r5, #12]
 80097d8:	059a      	lsls	r2, r3, #22
 80097da:	d402      	bmi.n	80097e2 <_vfiprintf_r+0x1fe>
 80097dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097de:	f7fe f9e9 	bl	8007bb4 <__retarget_lock_release_recursive>
 80097e2:	89ab      	ldrh	r3, [r5, #12]
 80097e4:	065b      	lsls	r3, r3, #25
 80097e6:	f53f af1f 	bmi.w	8009628 <_vfiprintf_r+0x44>
 80097ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097ec:	e71e      	b.n	800962c <_vfiprintf_r+0x48>
 80097ee:	ab03      	add	r3, sp, #12
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	462a      	mov	r2, r5
 80097f4:	4b05      	ldr	r3, [pc, #20]	@ (800980c <_vfiprintf_r+0x228>)
 80097f6:	a904      	add	r1, sp, #16
 80097f8:	4630      	mov	r0, r6
 80097fa:	f7fd ff07 	bl	800760c <_printf_i>
 80097fe:	e7e4      	b.n	80097ca <_vfiprintf_r+0x1e6>
 8009800:	0800b288 	.word	0x0800b288
 8009804:	0800b292 	.word	0x0800b292
 8009808:	080070dd 	.word	0x080070dd
 800980c:	080095c1 	.word	0x080095c1
 8009810:	0800b28e 	.word	0x0800b28e

08009814 <__swbuf_r>:
 8009814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009816:	460e      	mov	r6, r1
 8009818:	4614      	mov	r4, r2
 800981a:	4605      	mov	r5, r0
 800981c:	b118      	cbz	r0, 8009826 <__swbuf_r+0x12>
 800981e:	6a03      	ldr	r3, [r0, #32]
 8009820:	b90b      	cbnz	r3, 8009826 <__swbuf_r+0x12>
 8009822:	f7fe f89f 	bl	8007964 <__sinit>
 8009826:	69a3      	ldr	r3, [r4, #24]
 8009828:	60a3      	str	r3, [r4, #8]
 800982a:	89a3      	ldrh	r3, [r4, #12]
 800982c:	071a      	lsls	r2, r3, #28
 800982e:	d501      	bpl.n	8009834 <__swbuf_r+0x20>
 8009830:	6923      	ldr	r3, [r4, #16]
 8009832:	b943      	cbnz	r3, 8009846 <__swbuf_r+0x32>
 8009834:	4621      	mov	r1, r4
 8009836:	4628      	mov	r0, r5
 8009838:	f000 f82a 	bl	8009890 <__swsetup_r>
 800983c:	b118      	cbz	r0, 8009846 <__swbuf_r+0x32>
 800983e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009842:	4638      	mov	r0, r7
 8009844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	6922      	ldr	r2, [r4, #16]
 800984a:	1a98      	subs	r0, r3, r2
 800984c:	6963      	ldr	r3, [r4, #20]
 800984e:	b2f6      	uxtb	r6, r6
 8009850:	4283      	cmp	r3, r0
 8009852:	4637      	mov	r7, r6
 8009854:	dc05      	bgt.n	8009862 <__swbuf_r+0x4e>
 8009856:	4621      	mov	r1, r4
 8009858:	4628      	mov	r0, r5
 800985a:	f7ff fda9 	bl	80093b0 <_fflush_r>
 800985e:	2800      	cmp	r0, #0
 8009860:	d1ed      	bne.n	800983e <__swbuf_r+0x2a>
 8009862:	68a3      	ldr	r3, [r4, #8]
 8009864:	3b01      	subs	r3, #1
 8009866:	60a3      	str	r3, [r4, #8]
 8009868:	6823      	ldr	r3, [r4, #0]
 800986a:	1c5a      	adds	r2, r3, #1
 800986c:	6022      	str	r2, [r4, #0]
 800986e:	701e      	strb	r6, [r3, #0]
 8009870:	6962      	ldr	r2, [r4, #20]
 8009872:	1c43      	adds	r3, r0, #1
 8009874:	429a      	cmp	r2, r3
 8009876:	d004      	beq.n	8009882 <__swbuf_r+0x6e>
 8009878:	89a3      	ldrh	r3, [r4, #12]
 800987a:	07db      	lsls	r3, r3, #31
 800987c:	d5e1      	bpl.n	8009842 <__swbuf_r+0x2e>
 800987e:	2e0a      	cmp	r6, #10
 8009880:	d1df      	bne.n	8009842 <__swbuf_r+0x2e>
 8009882:	4621      	mov	r1, r4
 8009884:	4628      	mov	r0, r5
 8009886:	f7ff fd93 	bl	80093b0 <_fflush_r>
 800988a:	2800      	cmp	r0, #0
 800988c:	d0d9      	beq.n	8009842 <__swbuf_r+0x2e>
 800988e:	e7d6      	b.n	800983e <__swbuf_r+0x2a>

08009890 <__swsetup_r>:
 8009890:	b538      	push	{r3, r4, r5, lr}
 8009892:	4b29      	ldr	r3, [pc, #164]	@ (8009938 <__swsetup_r+0xa8>)
 8009894:	4605      	mov	r5, r0
 8009896:	6818      	ldr	r0, [r3, #0]
 8009898:	460c      	mov	r4, r1
 800989a:	b118      	cbz	r0, 80098a4 <__swsetup_r+0x14>
 800989c:	6a03      	ldr	r3, [r0, #32]
 800989e:	b90b      	cbnz	r3, 80098a4 <__swsetup_r+0x14>
 80098a0:	f7fe f860 	bl	8007964 <__sinit>
 80098a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098a8:	0719      	lsls	r1, r3, #28
 80098aa:	d422      	bmi.n	80098f2 <__swsetup_r+0x62>
 80098ac:	06da      	lsls	r2, r3, #27
 80098ae:	d407      	bmi.n	80098c0 <__swsetup_r+0x30>
 80098b0:	2209      	movs	r2, #9
 80098b2:	602a      	str	r2, [r5, #0]
 80098b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098b8:	81a3      	strh	r3, [r4, #12]
 80098ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098be:	e033      	b.n	8009928 <__swsetup_r+0x98>
 80098c0:	0758      	lsls	r0, r3, #29
 80098c2:	d512      	bpl.n	80098ea <__swsetup_r+0x5a>
 80098c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098c6:	b141      	cbz	r1, 80098da <__swsetup_r+0x4a>
 80098c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098cc:	4299      	cmp	r1, r3
 80098ce:	d002      	beq.n	80098d6 <__swsetup_r+0x46>
 80098d0:	4628      	mov	r0, r5
 80098d2:	f7fe ffc5 	bl	8008860 <_free_r>
 80098d6:	2300      	movs	r3, #0
 80098d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80098da:	89a3      	ldrh	r3, [r4, #12]
 80098dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098e0:	81a3      	strh	r3, [r4, #12]
 80098e2:	2300      	movs	r3, #0
 80098e4:	6063      	str	r3, [r4, #4]
 80098e6:	6923      	ldr	r3, [r4, #16]
 80098e8:	6023      	str	r3, [r4, #0]
 80098ea:	89a3      	ldrh	r3, [r4, #12]
 80098ec:	f043 0308 	orr.w	r3, r3, #8
 80098f0:	81a3      	strh	r3, [r4, #12]
 80098f2:	6923      	ldr	r3, [r4, #16]
 80098f4:	b94b      	cbnz	r3, 800990a <__swsetup_r+0x7a>
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009900:	d003      	beq.n	800990a <__swsetup_r+0x7a>
 8009902:	4621      	mov	r1, r4
 8009904:	4628      	mov	r0, r5
 8009906:	f000 f883 	bl	8009a10 <__smakebuf_r>
 800990a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800990e:	f013 0201 	ands.w	r2, r3, #1
 8009912:	d00a      	beq.n	800992a <__swsetup_r+0x9a>
 8009914:	2200      	movs	r2, #0
 8009916:	60a2      	str	r2, [r4, #8]
 8009918:	6962      	ldr	r2, [r4, #20]
 800991a:	4252      	negs	r2, r2
 800991c:	61a2      	str	r2, [r4, #24]
 800991e:	6922      	ldr	r2, [r4, #16]
 8009920:	b942      	cbnz	r2, 8009934 <__swsetup_r+0xa4>
 8009922:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009926:	d1c5      	bne.n	80098b4 <__swsetup_r+0x24>
 8009928:	bd38      	pop	{r3, r4, r5, pc}
 800992a:	0799      	lsls	r1, r3, #30
 800992c:	bf58      	it	pl
 800992e:	6962      	ldrpl	r2, [r4, #20]
 8009930:	60a2      	str	r2, [r4, #8]
 8009932:	e7f4      	b.n	800991e <__swsetup_r+0x8e>
 8009934:	2000      	movs	r0, #0
 8009936:	e7f7      	b.n	8009928 <__swsetup_r+0x98>
 8009938:	20000040 	.word	0x20000040

0800993c <_raise_r>:
 800993c:	291f      	cmp	r1, #31
 800993e:	b538      	push	{r3, r4, r5, lr}
 8009940:	4605      	mov	r5, r0
 8009942:	460c      	mov	r4, r1
 8009944:	d904      	bls.n	8009950 <_raise_r+0x14>
 8009946:	2316      	movs	r3, #22
 8009948:	6003      	str	r3, [r0, #0]
 800994a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800994e:	bd38      	pop	{r3, r4, r5, pc}
 8009950:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009952:	b112      	cbz	r2, 800995a <_raise_r+0x1e>
 8009954:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009958:	b94b      	cbnz	r3, 800996e <_raise_r+0x32>
 800995a:	4628      	mov	r0, r5
 800995c:	f000 f830 	bl	80099c0 <_getpid_r>
 8009960:	4622      	mov	r2, r4
 8009962:	4601      	mov	r1, r0
 8009964:	4628      	mov	r0, r5
 8009966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800996a:	f000 b817 	b.w	800999c <_kill_r>
 800996e:	2b01      	cmp	r3, #1
 8009970:	d00a      	beq.n	8009988 <_raise_r+0x4c>
 8009972:	1c59      	adds	r1, r3, #1
 8009974:	d103      	bne.n	800997e <_raise_r+0x42>
 8009976:	2316      	movs	r3, #22
 8009978:	6003      	str	r3, [r0, #0]
 800997a:	2001      	movs	r0, #1
 800997c:	e7e7      	b.n	800994e <_raise_r+0x12>
 800997e:	2100      	movs	r1, #0
 8009980:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009984:	4620      	mov	r0, r4
 8009986:	4798      	blx	r3
 8009988:	2000      	movs	r0, #0
 800998a:	e7e0      	b.n	800994e <_raise_r+0x12>

0800998c <raise>:
 800998c:	4b02      	ldr	r3, [pc, #8]	@ (8009998 <raise+0xc>)
 800998e:	4601      	mov	r1, r0
 8009990:	6818      	ldr	r0, [r3, #0]
 8009992:	f7ff bfd3 	b.w	800993c <_raise_r>
 8009996:	bf00      	nop
 8009998:	20000040 	.word	0x20000040

0800999c <_kill_r>:
 800999c:	b538      	push	{r3, r4, r5, lr}
 800999e:	4d07      	ldr	r5, [pc, #28]	@ (80099bc <_kill_r+0x20>)
 80099a0:	2300      	movs	r3, #0
 80099a2:	4604      	mov	r4, r0
 80099a4:	4608      	mov	r0, r1
 80099a6:	4611      	mov	r1, r2
 80099a8:	602b      	str	r3, [r5, #0]
 80099aa:	f7f8 fe55 	bl	8002658 <_kill>
 80099ae:	1c43      	adds	r3, r0, #1
 80099b0:	d102      	bne.n	80099b8 <_kill_r+0x1c>
 80099b2:	682b      	ldr	r3, [r5, #0]
 80099b4:	b103      	cbz	r3, 80099b8 <_kill_r+0x1c>
 80099b6:	6023      	str	r3, [r4, #0]
 80099b8:	bd38      	pop	{r3, r4, r5, pc}
 80099ba:	bf00      	nop
 80099bc:	200007c0 	.word	0x200007c0

080099c0 <_getpid_r>:
 80099c0:	f7f8 be42 	b.w	8002648 <_getpid>

080099c4 <__swhatbuf_r>:
 80099c4:	b570      	push	{r4, r5, r6, lr}
 80099c6:	460c      	mov	r4, r1
 80099c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099cc:	2900      	cmp	r1, #0
 80099ce:	b096      	sub	sp, #88	@ 0x58
 80099d0:	4615      	mov	r5, r2
 80099d2:	461e      	mov	r6, r3
 80099d4:	da0d      	bge.n	80099f2 <__swhatbuf_r+0x2e>
 80099d6:	89a3      	ldrh	r3, [r4, #12]
 80099d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80099dc:	f04f 0100 	mov.w	r1, #0
 80099e0:	bf14      	ite	ne
 80099e2:	2340      	movne	r3, #64	@ 0x40
 80099e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80099e8:	2000      	movs	r0, #0
 80099ea:	6031      	str	r1, [r6, #0]
 80099ec:	602b      	str	r3, [r5, #0]
 80099ee:	b016      	add	sp, #88	@ 0x58
 80099f0:	bd70      	pop	{r4, r5, r6, pc}
 80099f2:	466a      	mov	r2, sp
 80099f4:	f000 f848 	bl	8009a88 <_fstat_r>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	dbec      	blt.n	80099d6 <__swhatbuf_r+0x12>
 80099fc:	9901      	ldr	r1, [sp, #4]
 80099fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a06:	4259      	negs	r1, r3
 8009a08:	4159      	adcs	r1, r3
 8009a0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a0e:	e7eb      	b.n	80099e8 <__swhatbuf_r+0x24>

08009a10 <__smakebuf_r>:
 8009a10:	898b      	ldrh	r3, [r1, #12]
 8009a12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a14:	079d      	lsls	r5, r3, #30
 8009a16:	4606      	mov	r6, r0
 8009a18:	460c      	mov	r4, r1
 8009a1a:	d507      	bpl.n	8009a2c <__smakebuf_r+0x1c>
 8009a1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a20:	6023      	str	r3, [r4, #0]
 8009a22:	6123      	str	r3, [r4, #16]
 8009a24:	2301      	movs	r3, #1
 8009a26:	6163      	str	r3, [r4, #20]
 8009a28:	b003      	add	sp, #12
 8009a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a2c:	ab01      	add	r3, sp, #4
 8009a2e:	466a      	mov	r2, sp
 8009a30:	f7ff ffc8 	bl	80099c4 <__swhatbuf_r>
 8009a34:	9f00      	ldr	r7, [sp, #0]
 8009a36:	4605      	mov	r5, r0
 8009a38:	4639      	mov	r1, r7
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f7fd fa22 	bl	8006e84 <_malloc_r>
 8009a40:	b948      	cbnz	r0, 8009a56 <__smakebuf_r+0x46>
 8009a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a46:	059a      	lsls	r2, r3, #22
 8009a48:	d4ee      	bmi.n	8009a28 <__smakebuf_r+0x18>
 8009a4a:	f023 0303 	bic.w	r3, r3, #3
 8009a4e:	f043 0302 	orr.w	r3, r3, #2
 8009a52:	81a3      	strh	r3, [r4, #12]
 8009a54:	e7e2      	b.n	8009a1c <__smakebuf_r+0xc>
 8009a56:	89a3      	ldrh	r3, [r4, #12]
 8009a58:	6020      	str	r0, [r4, #0]
 8009a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a5e:	81a3      	strh	r3, [r4, #12]
 8009a60:	9b01      	ldr	r3, [sp, #4]
 8009a62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a66:	b15b      	cbz	r3, 8009a80 <__smakebuf_r+0x70>
 8009a68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	f000 f81d 	bl	8009aac <_isatty_r>
 8009a72:	b128      	cbz	r0, 8009a80 <__smakebuf_r+0x70>
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	f023 0303 	bic.w	r3, r3, #3
 8009a7a:	f043 0301 	orr.w	r3, r3, #1
 8009a7e:	81a3      	strh	r3, [r4, #12]
 8009a80:	89a3      	ldrh	r3, [r4, #12]
 8009a82:	431d      	orrs	r5, r3
 8009a84:	81a5      	strh	r5, [r4, #12]
 8009a86:	e7cf      	b.n	8009a28 <__smakebuf_r+0x18>

08009a88 <_fstat_r>:
 8009a88:	b538      	push	{r3, r4, r5, lr}
 8009a8a:	4d07      	ldr	r5, [pc, #28]	@ (8009aa8 <_fstat_r+0x20>)
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	4604      	mov	r4, r0
 8009a90:	4608      	mov	r0, r1
 8009a92:	4611      	mov	r1, r2
 8009a94:	602b      	str	r3, [r5, #0]
 8009a96:	f7f8 fe3f 	bl	8002718 <_fstat>
 8009a9a:	1c43      	adds	r3, r0, #1
 8009a9c:	d102      	bne.n	8009aa4 <_fstat_r+0x1c>
 8009a9e:	682b      	ldr	r3, [r5, #0]
 8009aa0:	b103      	cbz	r3, 8009aa4 <_fstat_r+0x1c>
 8009aa2:	6023      	str	r3, [r4, #0]
 8009aa4:	bd38      	pop	{r3, r4, r5, pc}
 8009aa6:	bf00      	nop
 8009aa8:	200007c0 	.word	0x200007c0

08009aac <_isatty_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4d06      	ldr	r5, [pc, #24]	@ (8009ac8 <_isatty_r+0x1c>)
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	4608      	mov	r0, r1
 8009ab6:	602b      	str	r3, [r5, #0]
 8009ab8:	f7f8 fe3e 	bl	8002738 <_isatty>
 8009abc:	1c43      	adds	r3, r0, #1
 8009abe:	d102      	bne.n	8009ac6 <_isatty_r+0x1a>
 8009ac0:	682b      	ldr	r3, [r5, #0]
 8009ac2:	b103      	cbz	r3, 8009ac6 <_isatty_r+0x1a>
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	bd38      	pop	{r3, r4, r5, pc}
 8009ac8:	200007c0 	.word	0x200007c0

08009acc <_init>:
 8009acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ace:	bf00      	nop
 8009ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ad2:	bc08      	pop	{r3}
 8009ad4:	469e      	mov	lr, r3
 8009ad6:	4770      	bx	lr

08009ad8 <_fini>:
 8009ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ada:	bf00      	nop
 8009adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ade:	bc08      	pop	{r3}
 8009ae0:	469e      	mov	lr, r3
 8009ae2:	4770      	bx	lr
